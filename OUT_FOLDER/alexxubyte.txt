1625899017673793541 2023-02-15 16:45:08 +0000 <alexxubyte> From 0 to Millions: A Guide to Scaling Your App - Four-Part Series  First two parts, we examine the traditional approach to building an app.  Final two parts, we examine the impact of recent trends in cloud and serverless computing.  Subscribe here:  https://t.co/l9vQPOEMS2  https://t.co/NV0v2KjYKB
1625536710670163968 2023-02-14 16:45:27 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1625536706027061253 2023-02-14 16:45:26 +0000 <alexxubyte> /6 Subscribe to our weekly free newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/CxWOKjM4UO
1625536694018789376 2023-02-14 16:45:23 +0000 <alexxubyte> /5 👉 Over to you: We can use other attributes for hashing algorithms. For example, HTTP header, request type, client type, etc. What attributes have you used?
1625536687953833984 2023-02-14 16:45:22 +0000 <alexxubyte> /4 🔹 Dynamic Algorithms 5. Least connections A new request is sent to the service instance with the least concurrent connections.  6. Least response time A new request is sent to the service instance with the fastest response time.  https://t.co/mjslDTy9WV
1625536667317841920 2023-02-14 16:45:17 +0000 <alexxubyte> /3 3. Weighted round-robin The admin can specify the weight for each service. The ones with a higher weight handle more requests than others.  4. Hash This algorithm applies a hash function on the incoming requests’ IP or URL.  https://t.co/vfeMAhK0z0
1625536646887399424 2023-02-14 16:45:12 +0000 <alexxubyte> /2 2. Sticky round-robin This is an improvement of the round-robin algorithm. If Alice’s first request goes to service A, the following requests go to service A as well.  https://t.co/hFK6ToAdHX
1625536625030885377 2023-02-14 16:45:07 +0000 <alexxubyte> /1 What are the common load-balancing algorithms?  The diagram below shows 6 common algorithms.  🔹 Static Algorithms  1. Round robin The client requests are sent to different service instances in sequential order. The services are usually required to be stateless.  https://t.co/soop2cp8hL
1625313228476805121 2023-02-14 01:57:25 +0000 <alexxubyte> @SubstackInc Thank you for building the awesome newsletter platform ❤️
1625211630396264450 2023-02-13 19:13:42 +0000 <alexxubyte> @lordserch Thank you, Sergio! We will definitely cover some topics in the payment/fintech space.
1625174270946209793 2023-02-13 16:45:15 +0000 <alexxubyte> 3/3 If you subscribe in the next 72 hours, get the first year for only $100, or $10/month (33% off).  Subscribe here:  https://t.co/l9vQPOEMS2  https://t.co/3MG8Uui7L2
1625174245528698881 2023-02-13 16:45:09 +0000 <alexxubyte> 2/3 Topics: Scale from 0 to millions: - Traditional approach - Feb/15, 22 - Modern approach - Mar/01, 08  Caching What is cache - Mar/15 Caching strategies - Mar/22 Common problems - Mar/29  Authentication: - PWD, Session, Cookie, Token - Apr/05 - SSO, OAuth, 2FA - Apr/12 - TBD
1625174239056912384 2023-02-13 16:45:07 +0000 <alexxubyte> 1/3 After 10 months of a free newsletter on substack, I’m adding a premium plan. We'll add a deep dive issue every Wednesday. Below is an example.  If you’ve found value in this newsletter, consider subscribing.  Subscribe here:  https://t.co/l9vQPOEMS2  https://t.co/8cHrfyRWL2
1624449454970658816 2023-02-11 16:45:05 +0000 <alexxubyte> Next week, we will cover:  🔹ByteByteGo newsletter 🔹Load balancer vs. API Gateway 🔹Git workflow 🔹GPT-1 -&gt; GPT-2 -&gt; GPT3 🔹Redis top use cases 🔹Experiment platform architecture  Subscribe to our weekly free newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/a44vknHUmG
1624087081600585728 2023-02-10 16:45:08 +0000 <alexxubyte> ChatGPT-like AI writers gain so much popularity because AI tools finally generate revenue!  👉 Over to you: Will you use AI writers to help you with daily work and how?  Subscribe to our weekly free newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/zPZD8abqDL
1624087069554540544 2023-02-10 16:45:06 +0000 <alexxubyte> For example, we can first use SurferSEO to extract keywords and topics and then use Jasper or writesonic to generate marketing content.  If we want to customize the tone for different audiences, we can use wordtune to paraphrase the articles.
1624087065095991296 2023-02-10 16:45:05 +0000 <alexxubyte> ChatGPT, Jasper AI, copy ai…  How are AI writers different?  The diagram below shows how we can use popular AI writers.  In general, the tools cover the workflow of copywriting and content creation. They can choose topics, write content and optimize the content.  https://t.co/o5MmKaPb7A
1623744122359271424 2023-02-09 18:02:21 +0000 <alexxubyte> @ramannoodlez Congratulations, Mitra. Just got it. Cannot wait to read it!
1623721668006023169 2023-02-09 16:33:07 +0000 <alexxubyte> We have helped over 100,000 engineers level up their system design skills in the past few years.  Here is a simple but powerful, step-by-step framework we put together to help you crack system design interviews.  Watch and subscribe here:  https://t.co/j3qf9z8qRl  https://t.co/gPMqbezz3L
1623382568111595520 2023-02-08 18:05:39 +0000 <alexxubyte> Link to the full article:  https://t.co/cRCSHCK5Pv  Thank you, @Zonito87
1623362355638976513 2023-02-08 16:45:20 +0000 <alexxubyte> /9 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1623362350060552193 2023-02-08 16:45:19 +0000 <alexxubyte> /8 We will provide a more in-depth analysis of this topic. Subscribe to our newsletter to get the latest update:  https://t.co/GHHONWzMIR  https://t.co/Zf4gH8lj96
1623362338228424705 2023-02-08 16:45:16 +0000 <alexxubyte> /7 Over to you - Did we miss anything important?
1623362334105419776 2023-02-08 16:45:15 +0000 <alexxubyte> /6 𝐂𝐚𝐜𝐡𝐞 𝐄𝐯𝐢𝐜𝐭𝐢𝐨𝐧 𝐀𝐥𝐠𝐨𝐫𝐢𝐭𝐡𝐦𝐬: • Least Recently Used (LRU) • Least Frequently Used (LFU) • First-in First-out (FIFO) • Random Replacement (RR)  𝐎𝐭𝐡𝐞𝐫 𝐢𝐬𝐬𝐮𝐞𝐬: • Thunder herd on cold start • Time-to-live (TTL)  https://t.co/kD5L2sXycQ
1623362321904185345 2023-02-08 16:45:12 +0000 <alexxubyte> /5 𝐊𝐞𝐲 𝐌𝐞𝐭𝐫𝐢𝐜𝐬: • Cache Hit Ratio • Latency • Throughput • Invalidation Rate • Memory Usage • CPU usage • Network usage  https://t.co/3scnWBQ3C4
1623362311292592128 2023-02-08 16:45:10 +0000 <alexxubyte> /4 𝐂𝐚𝐜𝐡𝐞 𝐄𝐯𝐢𝐜𝐭𝐢𝐨𝐧 𝐀𝐥𝐠𝐨𝐫𝐢𝐭𝐡𝐦𝐬: • Least Recently Used (LRU) • Least Frequently Used (LFU) • First-in First-out (FIFO) • Random Replacement (RR)  https://t.co/g4fAdXX0AM
1623362301297590273 2023-02-08 16:45:07 +0000 <alexxubyte> /3 𝐒𝐮𝐢𝐭𝐚𝐛𝐥𝐞 𝐒𝐜𝐞𝐧𝐚𝐫𝐢𝐨𝐬: • In-memory solution • Read heavy system • Data is not frequently updated  𝐂𝐚𝐜𝐡𝐢𝐧𝐠 𝐓𝐞𝐜𝐡𝐧𝐢𝐪𝐮𝐞𝐬: • Cache aside • Write-through • Read-through • Write-around • Write-back  https://t.co/6U1AIzANUW
1623362292233691137 2023-02-08 16:45:05 +0000 <alexxubyte> /2 The first draft of the cheatsheet was written by guest author @Zonito87.
1623362287619969024 2023-02-08 16:45:04 +0000 <alexxubyte> /1 Caching is one of the 𝐦𝐨𝐬𝐭 𝐜𝐨𝐦𝐦𝐨𝐧𝐥𝐲 used techniques when building 𝐟𝐚𝐬𝐭 𝐨𝐧𝐥𝐢𝐧𝐞 𝐬𝐲𝐬𝐭𝐞𝐦𝐬. When using a cache, here are the top 6 things to consider:  https://t.co/1bTNpmyIm8
1622999928829272066 2023-02-07 16:45:11 +0000 <alexxubyte> /5 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1622999924496556032 2023-02-07 16:45:10 +0000 <alexxubyte> /4 Subscribe to our weekly free newsletter to learn something new every week:   https://t.co/dkjDPxaQMt  https://t.co/YfUEL0UpC9
1622999911003492352 2023-02-07 16:45:07 +0000 <alexxubyte> /3 SortedSet, for example, makes the implementation of leaderboards so simple and efficient. On the other hand, a bitmap can be used to aggregate month-over-month login statuses.  👉 Over to you: What do you use Redis for in your projects?
1622999908415578113 2023-02-07 16:45:06 +0000 <alexxubyte> /2 2️⃣ Redis implements IO multiplexing and single-threaded execution.  3️⃣ Several efficient lower-level data structures are leveraged by Redis. By keeping these data structures in memory, serialization and deserialization costs are reduced.
1622999903894110214 2023-02-07 16:45:05 +0000 <alexxubyte> /1 Why is Redis so 𝐟𝐚𝐬𝐭?  The diagram below shows 3 main reasons:  1️⃣ Redis is RAM-based. Access to RAM is at least 1000 times faster than access to random disks. Redis can be used as a cache to improve application responsiveness and reduce database load when used as a cache.  https://t.co/tebVdYNpS4
1622637609355980800 2023-02-06 16:45:27 +0000 <alexxubyte> /9 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1622637603836272640 2023-02-06 16:45:26 +0000 <alexxubyte> /8 Subscribe to our weekly free newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/2SlZvCKEw8
1622637589235900416 2023-02-06 16:45:23 +0000 <alexxubyte> /7 👉 Over to you: there are two ways to save the history of a file: either save every version of the file, or save every delta change to the file and reconstruct the file by aggregating all delta changes. Would you recommend Git using one over another, and why?
1622637583229648897 2023-02-06 16:45:21 +0000 <alexxubyte> /6 🔹When you type "git push", your local repository data will be synced to the remote repository. As the remote repository uses the same data structure as your local repository, it is also immutable: you can only add data to it  https://t.co/NPaPyvpMzP
1622637565621964803 2023-02-06 16:45:17 +0000 <alexxubyte> /5 🔹When you type "git commit", your staging files are added to the local repository. Local repository is a tree version of the append-only write-ahead log (WAL). They are both immutable: you can only append to the end of the data structure.  https://t.co/1XfFJNMHE1
1622637549792677888 2023-02-06 16:45:13 +0000 <alexxubyte> /4 🔹When you type "git add", your files will be added to the staging area. These files are now immutable. It is no longer possible to edit them  https://t.co/97RHAIsu1K
1622637534508613632 2023-02-06 16:45:10 +0000 <alexxubyte> /3 🔹Users' local Git storage consists of three sections: working copy, staging area, and local repository. 🔹Working copies contain the files you are currently working on. The data is mutable, so you can do whatever you want with it  https://t.co/x2JM1CM0op
1622637520839389184 2023-02-06 16:45:06 +0000 <alexxubyte> /2 Immutable system designs are commonly used in systems that require high levels of auditability, such as financial systems and version control systems. Here's how it's used in Git design:
1622637514833166336 2023-02-06 16:45:05 +0000 <alexxubyte> /1 Git Workflow &amp; Immutability  Immutability here means that once data is written into Git, it cannot be changed. Modifications only create new data versions. The old data remains unchanged.  https://t.co/IPFgyNHkM3
1621912747465396224 2023-02-04 16:45:07 +0000 <alexxubyte> Next week, we will cover:  🔹System Design Interview - Step-by-Step Guide (YT) 🔹Git workflow 🔹Why is Redis fast 🔹API gateway vs. load balancer 🔹Considerations when using cache  Subscribe to our weekly free newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/Y2iqApwl9J
1621540606496632834 2023-02-03 16:06:22 +0000 <alexxubyte> In 1998, Amazon's system architecture looked like this. During that time, Amazon had 2,100 employees.  Thank you, @Werner, for sharing this incredible manifesto. We gain a better understanding of the history and evolution of Amazon's systems.  Read here:  https://t.co/FkokvawdL3  https://t.co/meI7o8C6fG
1621185537058168832 2023-02-02 16:35:26 +0000 <alexxubyte> 8 Key Data Structures That Power Modern Databases  In this video, we will briefly talk about:  🔹Skiplist 🔹Hash index 🔹SSTable 🔹LSM tree 🔹B-treeperformance 🔹Inverted index 🔹Suffix tree 🔹R-tree  Watch and subscribe here:  https://t.co/ZejYA5vlOM  https://t.co/7AQUmYICbO
1621035256156651522 2023-02-02 06:38:17 +0000 <alexxubyte> @amuldotexe Thank you 🙏
1620826925173460993 2023-02-01 16:50:27 +0000 <alexxubyte> 2/2  Digital version of the book is available at:  https://t.co/a6sk8JyZsn  https://t.co/IkjqxkImav
1620826896484421633 2023-02-01 16:50:20 +0000 <alexxubyte> 1/2 *BIG* announcement: My new book Machine Learning System Design Interview, is available!  Thanks to everyone who helped us make this happen.  I’d appreciate a retweet so that it can reach a wider audience.  Paperback version of the book:  https://t.co/vCVhdE9ap7  https://t.co/uMVQo4muW6
1620571974769733633 2023-01-31 23:57:22 +0000 <alexxubyte> @nutlope Congratulations, this looks awesome!
1620498736974815232 2023-01-31 19:06:20 +0000 <alexxubyte> @bhuynhtweet @sama Thanks. Moderation might be built into the model. We are not sure about that part.
1620463313133142017 2023-01-31 16:45:35 +0000 <alexxubyte> /12 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1620463307839909889 2023-01-31 16:45:33 +0000 <alexxubyte> /11 Subscribe to our weekly free newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/QEVJ7SMk2t
1620463291754762240 2023-01-31 16:45:30 +0000 <alexxubyte> /10 🔹Step 7: If the input passes content moderation, it is shown to the user. If the input doesn’t pass content moderation, it goes to template response generation and shows a template answer to the user.  https://t.co/cLO5a26XPc
1620463277284401152 2023-01-31 16:45:26 +0000 <alexxubyte> /9 🔹Step 5-6: Once the model generates the response, it is sent to a content moderation component again. This ensures the generated response is safe, harmless, unbiased, etc.  https://t.co/E3xx3ijsWV
1620463264596652032 2023-01-31 16:45:23 +0000 <alexxubyte> /8 🔹Steps 3-4: If the input passes content moderation, it is sent to the chatGPT model. If the input doesn’t pass content moderation, it goes straight to template response generation.
1620463261945835522 2023-01-31 16:45:23 +0000 <alexxubyte> /7 2. Answer a prompt 🔹Step 1: The user enters the full question.  🔹Step 2: The question is sent to a content moderation component. This component ensures that the question does not violate safety guidelines and filters inappropriate questions.
1620463256266760192 2023-01-31 16:45:21 +0000 <alexxubyte> /6  2). Collect more data that comprise (question, several answers) and train a reward model to rank these answers from most relevant to least relevant. 3). Use reinforcement learning (PPO optimization) to fine-tune the model, so the model's answers are more accurate.  https://t.co/UV4saippzd
1620463242022887429 2023-01-31 16:45:18 +0000 <alexxubyte> /5 1). Collect training data that comprise (questions and answers), and fine-tune the pre-trained model on this data. The model takes a question as input and learns to generate an answer similar to the training data.  https://t.co/TeK2tYSqXg
1620463228869550081 2023-01-31 16:45:15 +0000 <alexxubyte> /4 - Fine-tuning: This stage is a 3-step process that turns the pre-trained model into a question-answering ChatGPT model:  https://t.co/x4Og7uaUK7
1620463214919323654 2023-01-31 16:45:11 +0000 <alexxubyte> /3 The objective is to train a model that can predict future words given a sentence in a way that is grammatically correct and semantically meaningful.  After the pre-training stage, the model can complete given sentences, but it is not capable of responding to questions.  https://t.co/T2BGdDe980
1620463199551365124 2023-01-31 16:45:08 +0000 <alexxubyte> /2 1. Training. To train a ChatGPT model, there are two stages:  - Pre-training: In this stage, we train a GPT model (decoder-only transformer) on a large chunk of internet data.  https://t.co/JmEPQiNF0c
1620463186460971008 2023-01-31 16:45:05 +0000 <alexxubyte> /1 How does ChatGPT work?  Disclaimer: since OpenAI hasn't provided all the details, some parts of the diagram may be inaccurate. @sama, we would love to hear your feedback.  We attempted to explain how it works in the diagram below. The process can be broken down into two parts.  https://t.co/1FU6s76pW1
1620128003627053058 2023-01-30 18:33:11 +0000 <alexxubyte> References:  Cloud versus On-Premise Computing:  https://t.co/z8cTUP6LFY Why we're leaving the cloud :  https://t.co/kjsKU4POLK Choosing between Amazon EC2 and Amazon RDS :  https://t.co/B8XcxTlNNB
1620100846532042754 2023-01-30 16:45:16 +0000 <alexxubyte> /9 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1620100842220326912 2023-01-30 16:45:15 +0000 <alexxubyte> /8 Subscribe to our weekly free newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/o49ddCzVBJ
1620100828697866245 2023-01-30 16:45:12 +0000 <alexxubyte> /7 👉 Over to you: Which notable companies use on-premise solutions and why?  Reference: 1. AWS guide: Choosing between Amazon EC2 and Amazon RDS 2. Cloud versus On-Premise Computing by Cameron Fisher, MIT
1620100826080645121 2023-01-30 16:45:11 +0000 <alexxubyte> /6 Ironically, because it is so easy to allocate services to the cloud for scalability or reliability reasons, an organization tends to 𝐨𝐯𝐞𝐫𝐮𝐬𝐞 the cloud after adopting the cloud. It is essential to set up a monitoring framework for cost transparency.
1620100823438200835 2023-01-30 16:45:10 +0000 <alexxubyte> /5 🔹 In research conducted by Cameron Fisher, the cloud starts from 𝐚𝐥𝐦𝐨𝐬𝐭 𝐳𝐞𝐫𝐨 𝐜𝐨𝐬𝐭. Over time, the cost starts to accumulate on subscriptions and deployment consulting.
1620100820825174016 2023-01-30 16:45:10 +0000 <alexxubyte> /4 Later, if the business model doesn’t work, we can just stop using the services to save costs without thinking about how to deal with the hardware.
1620100818199523330 2023-01-30 16:45:09 +0000 <alexxubyte> /3 For example, if we run the databases on-premise, we need to take care of hardware setup, operating system installation, DBMS maintenance, etc. But if we use Amazon RDS, we need to take care of optimization.  This saves us the trouble to hire Linux admins and DB admins
1620100815552929793 2023-01-30 16:45:09 +0000 <alexxubyte> /2 🔹 When a company or a business line initially starts, product-market fit is key. The cloud enables quick setup to run the system with minimal necessary hardware. The cost is also transparent.
1620100809940938752 2023-01-30 16:45:07 +0000 <alexxubyte> /1 𝐃𝐨𝐞𝐬 𝐭𝐡𝐞 𝐜𝐥𝐨𝐮𝐝 𝐫𝐞𝐚𝐥𝐥𝐲 𝐬𝐚𝐯𝐞 𝐜𝐨𝐬𝐭𝐬?  Let’s look at this question 𝐢𝐧 𝐚 𝐥𝐨𝐧𝐠𝐞𝐫 𝐭𝐢𝐦𝐞 𝐫𝐚𝐧𝐠𝐞 to see what the cloud brings us.  https://t.co/3GcGMuDia1
1619376027259793408 2023-01-28 16:45:06 +0000 <alexxubyte> Next week:  🔹Does the cloud save costs? 🔹How chatGPT works 🔹ML system design book 🔹Important data structures for DBs (YouTube) 🔹Error code  I will provide a more in-depth analysis of some topics. Subscribe to our newsletter to get the latest update:  https://t.co/7Kc0uJopzE  https://t.co/B8P7NbH9rd
1619205261604065282 2023-01-28 05:26:32 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/TG5w0J5Jf1
1619022939218903040 2023-01-27 17:22:03 +0000 <alexxubyte> @oneschema_co is the embeddable CSV Importer for developers.  https://t.co/hWswJgIzCn
1619022937725755394 2023-01-27 17:22:03 +0000 <alexxubyte> Last week's system design refresher:  1. CI/CD in 5 minutes (Youtube video) 2. Visa dispute and chargeback 3. Deployment strategy 4. Designing a chat application  Thank you to our wonderful sponsor: @oneschema_co  https://t.co/y52nEae9YO
1619013629772435457 2023-01-27 16:45:03 +0000 <alexxubyte> Code complexity vs. Experience By @flaviocopes  https://t.co/E4aBthdMBy
1618981640029757440 2023-01-27 14:37:56 +0000 <alexxubyte> @dvassallo @SubstackInc Update: the newsletter emails in question are deleted. Thanks everyone.
1618860429991890944 2023-01-27 06:36:18 +0000 <alexxubyte> @sailfishcc1 thanks.  https://t.co/J4UVksoQID
1618847127572205568 2023-01-27 05:43:26 +0000 <alexxubyte> @Arnaud_Wanet @SubstackInc  https://t.co/J4UVksoQID
1618847054528389121 2023-01-27 05:43:09 +0000 <alexxubyte> @lugoli @SubstackInc Sadly no good way to prevent it.
1618846234672005120 2023-01-27 05:39:53 +0000 <alexxubyte> @Kovid_R @SubstackInc Probably not
1618732584334393344 2023-01-26 22:08:17 +0000 <alexxubyte> @dvassallo @SubstackInc Thanks, Daniel!
1618640142016876545 2023-01-26 16:00:57 +0000 <alexxubyte> /10 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1618640136992067587 2023-01-26 16:00:56 +0000 <alexxubyte> /9 I will provide a more in-depth analysis of this topic. Subscribe to our newsletter to get the latest update:  https://t.co/GHHONWzMIR  https://t.co/Bpbh77dMCE
1618640123670761479 2023-01-26 16:00:53 +0000 <alexxubyte> /8 Over to you: What is your experience with BNPL? Who were the providers you used?
1618640119828996098 2023-01-26 16:00:52 +0000 <alexxubyte> /7 Step 9. Bob can now receive the product since it has been released.  Steps 10-11. The BNPL provider receives installment payments from Bob every two weeks. Payment gateways process installments by deducting them from credit/debit cards.  https://t.co/DOGaQbCZ3o
1618640110609895424 2023-01-26 16:00:49 +0000 <alexxubyte> /6 Step 6-8. Bob now pays the $25 down payment to BNPL. Stripe processes the payment transaction. It is then forwarded to the card network by Stripe. The card network must be paid an interchange fee since this goes through them as well.  https://t.co/qReeGdmTpg
1618640102246481923 2023-01-26 16:00:47 +0000 <alexxubyte> /5 A total of $96 out of $100 is paid to the merchant immediately (yes, the merchant receives less with BNPL than with credit cards!) Bob must now pay the BNPL provider according to the payment schedule.  https://t.co/TgCkMBDxuC
1618640093291646979 2023-01-26 16:00:45 +0000 <alexxubyte> /4 Steps 2-3. Bob's credit score is checked by the BNPL provider, and the transaction is approved.  Steps 4-5. A BNPL provider grants Bob a $100 consumer loan, which is usually financed by a bank.  https://t.co/VCY6VO93Eq
1618640084924002306 2023-01-26 16:00:43 +0000 <alexxubyte> /3 The diagram below shows how the process works:  Step 0. Bob registers with AfterPay. An approved credit/debit card is linked to this account.  Step 1. The "Buy Now, Pay Later" payment option is chosen by Bob when he wants to purchase a $100 product.  https://t.co/5V2m62b4g7
1618640077344899075 2023-01-26 16:00:41 +0000 <alexxubyte> /2 The growth of BNPL has been dramatic in recent years. The BNPL provider represents the primary interface between the merchants and the customers for both eCommerce and POS (Point of Sale).
1618640073360281603 2023-01-26 16:00:41 +0000 <alexxubyte> /1 What is Buy Now, Pay Later (BNPL), and how does it work? What is the revenue model for BNPL providers?  https://t.co/uOoEmbN0Tf
1618285848814030849 2023-01-25 16:33:07 +0000 <alexxubyte> Why are system design interviews important?  Software is expensive to build.  In this short video, we discuss: - Why SDIs are important - What do companies look for - Do’s and Don'ts  Do you have any tips on how to ace SDIs?  Watch and subscribe here:  https://t.co/h668hG7qTj  https://t.co/gcqk41pK5W
1617926528486248452 2023-01-24 16:45:18 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1617926523247554560 2023-01-24 16:45:17 +0000 <alexxubyte> /7 I will provide a more in-depth analysis of this topic. Subscribe to our newsletter to get the latest update:  https://t.co/9nVvzXEN3s  https://t.co/HipNTby9Ss
1617926510538817537 2023-01-24 16:45:14 +0000 <alexxubyte> /6 👉 Over to you: When do you usually use git rebase?
1617926507804110849 2023-01-24 16:45:13 +0000 <alexxubyte> /5 Rebase can be dangerous if “the golden rule of git rebase” is not followed.  𝐓𝐡𝐞 𝐆𝐨𝐥𝐝𝐞𝐧 𝐑𝐮𝐥𝐞 𝐨𝐟 𝐆𝐢𝐭 𝐑𝐞𝐛𝐚𝐬𝐞 Never use it on public branches!
1617926502104043522 2023-01-24 16:45:12 +0000 <alexxubyte> /4 𝐆𝐢𝐭 𝐑𝐞𝐛𝐚𝐬𝐞  Git rebase moves the feature branch histories to the head of the main branch. It creates new commits E’, F’, and G’ for each commit in the feature branch.  The benefit of rebase is that it has 𝐥𝐢𝐧𝐞𝐚𝐫 𝐜𝐨𝐦𝐦𝐢𝐭 𝐡𝐢𝐬𝐭𝐨𝐫𝐲.  https://t.co/T0DMKX5GiN
1617926489579851777 2023-01-24 16:45:09 +0000 <alexxubyte> /3 𝐆𝐢𝐭 𝐌𝐞𝐫𝐠𝐞 This creates a new commit G’ in the main branch. G’ ties the histories of both main and feature branches.  Git merge is 𝐧𝐨𝐧-𝐝𝐞𝐬𝐭𝐫𝐮𝐜𝐭𝐢𝐯𝐞. Neither the main nor the feature branch is changed.  https://t.co/QRvAddIHxJ
1617926478896988160 2023-01-24 16:45:06 +0000 <alexxubyte> /2 When we 𝐦𝐞𝐫𝐠𝐞 𝐜𝐡𝐚𝐧𝐠𝐞𝐬 from one Git branch to another, we can use ‘git merge’ or ‘git rebase’. The diagram below shows how the two commands work.
1617926474279030784 2023-01-24 16:45:05 +0000 <alexxubyte> /1 𝐆𝐢𝐭 𝐌𝐞𝐫𝐠𝐞 𝐯𝐬. 𝐆𝐢𝐭 𝐑𝐞𝐛𝐚𝐬𝐞  What are the differences?  https://t.co/DEYCtsAadE
1617571097838522369 2023-01-23 17:12:57 +0000 <alexxubyte> Also posted the thread on hackernews. Upvote would be appreciated:  https://t.co/My6oFRxFd6
1617564212917841921 2023-01-23 16:45:35 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1617564207591096320 2023-01-23 16:45:34 +0000 <alexxubyte> /7 I will provide a more in-depth analysis of this topic. Subscribe to our newsletter to get the latest update:  https://t.co/9nVvzXEN3s  https://t.co/XuvmJhwIwH
1617564194215464961 2023-01-23 16:45:31 +0000 <alexxubyte> /6 This is not an exhaustive list of all database index types. Over to you:  1). Which one have you used and for what purpose? 2). There is another one called “reverse index”. Do you know the difference between “reverse index” and “inverted index”?
1617564186619547650 2023-01-23 16:45:29 +0000 <alexxubyte> /5 🔹Inverted index: used for document indexing. Used in Lucene 🔹Suffix tree: for string pattern search 🔹R-tree: multi-dimension search, such as finding the nearest neighbor  https://t.co/9i4lBkFLGp
1617564159947968512 2023-01-23 16:45:23 +0000 <alexxubyte> /4 🔹Hash index: a very common implementation of the “Map” data structure (or “Collection”) 🔹SSTable: immutable on-disk “Map” implementation 🔹LSM tree: Skiplist + SSTable. High write throughput 🔹B-tree: disk-based solution. Consistent read/write performance  https://t.co/58ymCKthJN
1617564132798271488 2023-01-23 16:45:16 +0000 <alexxubyte> /3 All of these factors affect your choice of database index format.  The following are some of the most popular data structures used for indexing data:  🔹Skiplist: a common in-memory index type. Used in Redis  https://t.co/QGYmum6gCC
1617564105900163072 2023-01-23 16:45:10 +0000 <alexxubyte> /2 The answer will vary depending on your use case. Data can be indexed in memory or on disk. Similarly, data formats vary, such as numbers, strings, geographic coordinates, etc. The system might be write-heavy or read-heavy.
1617564098820182018 2023-01-23 16:45:08 +0000 <alexxubyte> /1 8 Data Structures That Power Your Databases. Which one should we pick?  https://t.co/xcWVp28zrz
1617553393937158146 2023-01-23 16:02:36 +0000 <alexxubyte> @GergelyOrosz Thank you for your kind words and for recommending it to others. I've been doing the same for @Pragmatic_Eng. I am happy to see our newsletters continue to grow!
1617337033445511168 2023-01-23 01:42:52 +0000 <alexxubyte> @KevinNaughtonJr Thanks Kevin!
1617216966250594307 2023-01-22 17:45:45 +0000 <alexxubyte> Stats from @SubstackInc Audience insights
1617216962555445248 2023-01-22 17:45:44 +0000 <alexxubyte> It's exciting to see that the ByteByteGo system design newsletter is read by people from all 50 states in the US and 198 countries globally. It never occurred to me that so many people would be interested it. Thank you, everyone!  Subscribe here:  https://t.co/0RYwcKdZ4q  https://t.co/ddTBlqPXx0
1616970075214598146 2023-01-22 01:24:42 +0000 <alexxubyte> @kvss1992 If you are new to system design, volume 1 is a better fit as it covers more fundamentals. Volume 2 goes a lot deeper than volume 1.
1616957856682749953 2023-01-22 00:36:09 +0000 <alexxubyte> @obonigwe1 I use  https://t.co/J4UVksoQID most of the time. This one is from Canva.
1616835586270326785 2023-01-21 16:30:17 +0000 <alexxubyte> Next week, we will cover:  🔹How does chatGPT work? 🔹Git merge and rebase 🔹Why is system design important? 🔹System design interview cheat sheet 🔹Stateless vs. Stateful  Subscribe to our weekly free newsletter to learn something new every week:  https://t.co/7Kc0uJopzE  https://t.co/ZFsKKjL8wL
1616473589628416003 2023-01-20 16:31:51 +0000 <alexxubyte> I discovered some handy Excel techniques from this short video.  By CheatSheets on LinkedIn.  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/mNrDEpvvTk
1616109332327985155 2023-01-19 16:24:25 +0000 <alexxubyte> /9 👉 Over to you: Dispute is expensive. How can we reduce it and make the process more streamlined?
1616109329756860417 2023-01-19 16:24:24 +0000 <alexxubyte> /8 🔹 Step 15: The card network rules based on the evidence and assigns the final liability to either the cardholder or the merchant.
1616109325780660225 2023-01-19 16:24:23 +0000 <alexxubyte> /7 🔹 Steps 12-14: The issuer reviews the representment. There are two options:  1. The issuer charges the transaction back to the cardholder;  2. The issuer submits the dispute to the card network for arbitration.  https://t.co/rh3r33Qhi2
1616109317895385090 2023-01-19 16:24:21 +0000 <alexxubyte> /6 🔹 Steps 9-11: The acquiring bank reviews the evidence and represents the transaction to the card network, which forwards it to the issuer.  https://t.co/0nn2vY2mai
1616109308906999815 2023-01-19 16:24:19 +0000 <alexxubyte> /5 🔹 Steps 7,8: The merchant has two options:  1. Merchants can accept chargebacks if they appear legitimate.  2. The merchant can represent to the issuer the document that supports the transaction.  https://t.co/XWCqjQOmzE
1616109299775963136 2023-01-19 16:24:17 +0000 <alexxubyte> /4 🔹 Steps 4-6: The card network sends the dispute to the acquiring bank. After reviewing the details, the acquiring bank might ask the merchant to resolve the issue.  https://t.co/TjEoEMfls1
1616109290846302208 2023-01-19 16:24:15 +0000 <alexxubyte> /3 🔹 Steps 1-3: The cardholder Bob raises a dispute with the card issuer. Details are reviewed by the issuing bank. In cases of legitimate disputes, the issuing bank submits a chargeback request to the card network.  https://t.co/AWgydMPf4O
1616109281375555589 2023-01-19 16:24:13 +0000 <alexxubyte> /2 A dispute is 𝐞𝐱𝐩𝐞𝐧𝐬𝐢𝐯𝐞: for every dollar in disputed transactions, an additional $1.50 is spent on fees and expenses.  The diagram below shows why. 👇  https://t.co/1USbYeDOxZ
1616109271758016513 2023-01-19 16:24:10 +0000 <alexxubyte> /1 How do Visa 𝐝𝐢𝐬𝐩𝐮𝐭𝐞 and 𝐜𝐡𝐚𝐫𝐠𝐞𝐛𝐚𝐜𝐤 work?  A dispute happens when a cardholder disagrees with a merchant’s charge. A chargeback is a process of reversing the charge. Sometimes, the two terms are used interchangeably.  https://t.co/Zh9erFoO9J
1615884500596318208 2023-01-19 01:31:01 +0000 <alexxubyte> Enjoy this thread?  You might like the Kubernetes video as well:   https://t.co/gqtQ8DP04i
1615828592335937538 2023-01-18 21:48:51 +0000 <alexxubyte> The video was made by @sahnlam. Follow him for more videos like this.
1615758682368933889 2023-01-18 17:11:03 +0000 <alexxubyte> What is CI/CD? How does it help us ship faster? Is it worth the hassle? In this video, we will talk about:  - How it works - Some of the most popular tools - Does it help us ship faster - Trade-offs  Watch and subscribe here:  https://t.co/DfZtoUCp53  https://t.co/fdnwwWLiLB
1615532040388218880 2023-01-18 02:10:28 +0000 <alexxubyte> Enjoy this thread?  You might like our System Design newsletter as well:   https://t.co/MFxM4jYvAt
1615389840958447616 2023-01-17 16:45:25 +0000 <alexxubyte> 8/ I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1615389838420905984 2023-01-17 16:45:24 +0000 <alexxubyte> 7/ 👉 Over to you: Which deployment strategies have you used?
1615389833526153221 2023-01-17 16:45:23 +0000 <alexxubyte> 6/ 𝐅𝐞𝐚𝐭𝐮𝐫𝐞 𝐓𝐨𝐠𝐠𝐥𝐞  With the feature toggle, A small portion of users with a specific flag go through the code of the new feature, while other users go through normal code.  💡 No downtime ✅ 💡 Targeted users ✅  https://t.co/5TPJl0r5yi
1615389817625530368 2023-01-17 16:45:19 +0000 <alexxubyte> 5/ 𝐂𝐚𝐧𝐚𝐫𝐲 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭  With canary deployment, only a small portion of instances are upgraded with the new version, once all the tests pass, a portion of users are routed to canary instances.  💡 No downtime ✅ 💡 Targeted users ❌
1615389811631853574 2023-01-17 16:45:18 +0000 <alexxubyte> 4/ 𝐁𝐥𝐮𝐞-𝐆𝐫𝐞𝐞𝐧 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭  In blue-green deployment, two environments are deployed in production simultaneously. Once the green environment passes the tests, the load balancer switches users to it.  💡 No downtime ✅ 💡 Targeted users ❌  https://t.co/BtEWiafNBJ
1615389796528189442 2023-01-17 16:45:14 +0000 <alexxubyte> 3/ 𝐑𝐨𝐥𝐥𝐢𝐧𝐠 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭  Rolling Deployment applies phased deployment compared with big bang deployment. The whole plant is upgraded one by one over a period of time.  💡 No downtime ✅ 💡 Targeted users ❌  https://t.co/RFImWm5zgD
1615389779486707712 2023-01-17 16:45:10 +0000 <alexxubyte> 2/ 𝐁𝐢𝐠 𝐁𝐚𝐧𝐠 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭  Big Bang Deployment is quite straightforward, where we roll out a new version in one go with service downtime. We roll back to the previous version if the deployment fails.  💡 No downtime ❌ 💡 Targeted users ❌  https://t.co/al6NidlrXY
1615389760834670592 2023-01-17 16:45:06 +0000 <alexxubyte> 1/ 𝐖𝐡𝐚𝐭 𝐢𝐬 𝐭𝐡𝐞 𝐩𝐫𝐨𝐜𝐞𝐬𝐬 𝐟𝐨𝐫 𝐝𝐞𝐩𝐥𝐨𝐲𝐢𝐧𝐠 𝐜𝐡𝐚𝐧𝐠𝐞𝐬 𝐭𝐨 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐢𝐨𝐧?  The diagram below shows several common 𝐝𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭 𝐬𝐭𝐫𝐚𝐭𝐞𝐠𝐢𝐞𝐬.  https://t.co/BkgSxXCAvI
1615051574191230981 2023-01-16 18:21:16 +0000 <alexxubyte> Enjoy this thread?  You might like our System Design YouTube channel as well:   https://t.co/pWcapRDGkC
1615027461947035648 2023-01-16 16:45:27 +0000 <alexxubyte> 8/ I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1615027459254288386 2023-01-16 16:45:26 +0000 <alexxubyte> 7/ 👉 Over to you: How to sync the chat messages among Alice’s different devices?
1615027453541638149 2023-01-16 16:45:25 +0000 <alexxubyte> 6/ 🔹Steps 7-8: If Bob is online, the chat message is pushed to Bob via the web socket.  https://t.co/tXmFrKv60G
1615027437741690880 2023-01-16 16:45:21 +0000 <alexxubyte> 5/ 🔹Step 6: Before forwarding the messaging, the message sync service checks Bob’s presence:  a) If Bob is online, the chat message is sent to chat service B.  b) If Bob is offline, the message is sent to the push server and gets pushed to Bob’s device.  https://t.co/ECVjdYDaEe
1615027422424084480 2023-01-16 16:45:17 +0000 <alexxubyte> 4/ 🔹Step 5: The chat message is sent to the message sync queue to sync to Bob’s chat service.  https://t.co/5z60svQJwC
1615027405462343692 2023-01-16 16:45:13 +0000 <alexxubyte> 3/ 𝐌𝐞𝐬𝐬𝐚𝐠𝐢𝐧𝐠 𝐅𝐥𝐨𝐰  🔹Steps 1-2: Alice sends a chat message to Bob. The chat message is routed to Chat Service A.  🔹Steps 3-4: The chat message is sent to the sequencing service which generates a unique ID, and is persisted in the message store.  https://t.co/TBuqMPtp5v
1615027388727070720 2023-01-16 16:45:09 +0000 <alexxubyte> 2/ 𝐔𝐬𝐞𝐫 𝐋𝐨𝐠𝐢𝐧 𝐅𝐥𝐨𝐰  🔹Step 1: Alice logs in to the chat application and establishes a web socket connection with the server side.  🔹Steps 2-4: The presence service receives Alice's notification, updates her presence, and notifies Alice's friends about her presence.  https://t.co/rJqm0JJ0EW
1615027374017630209 2023-01-16 16:45:06 +0000 <alexxubyte> 1/ How do we design a 𝐜𝐡𝐚𝐭 𝐚𝐩𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 like WhatsApp, Facebook Messenger or Discord?  The diagram below shows a design for a simplified 1 to 1 chat application.  https://t.co/9DY27gZBg7
1614302588052320258 2023-01-14 16:45:03 +0000 <alexxubyte> Next week, we will cover:  - Deployment patterns - IM workflow - CI/CD (YouTube video) - Database index types - Code complexity  Join a growing community of over 200,000 System Design fans. Subscribe here:  https://t.co/dkjDPxaQMt  https://t.co/lSyajuZyWC
1614025239058608128 2023-01-13 22:22:58 +0000 <alexxubyte> @driscollis Thanks, Mike.
1613933575119994880 2023-01-13 16:18:44 +0000 <alexxubyte> Now the challenge is how to sort it back :)
1613929978068086784 2023-01-13 16:04:26 +0000 <alexxubyte> Really cool neovim plugin. I hope everyone takes a break from coding and has a great weekend.   Github repo:  https://t.co/JgvqdJ6lOa  https://t.co/F7CjtV3Vs5
1613780611877203968 2023-01-13 06:10:55 +0000 <alexxubyte> Really cool thread about many concepts about the cloud:  - IaaS, CaaS, PaaS, FaaS, SaaS - Benefits of Cloud Computing - Migrating applications to cloud &amp; modernizing applications - Benefits and use cases of storage in cloud - Object store, Block store, File store - and more.
1613577850313138176 2023-01-12 16:45:12 +0000 <alexxubyte> 7/ I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1613577847679115265 2023-01-12 16:45:12 +0000 <alexxubyte> 6/ 👉 Over to you: Are you familiar with WASM or have you used it in the workplace?
1613577845045092354 2023-01-12 16:45:11 +0000 <alexxubyte> 5/ This opens a lot of possibilities for cloud computing and 𝐞𝐝𝐠𝐞 𝐜𝐨𝐦𝐩𝐮𝐭𝐢𝐧𝐠. We can run serverless applications with fewer resources and instant startup time.
1613577842360741888 2023-01-12 16:45:11 +0000 <alexxubyte> 4/ However, with WASM, we can 𝐫𝐞𝐮𝐬𝐞 existing native code libraries developed in C/C++/Rust, etc, to run in the web browser. These web applications have near-native performance.  For example, we can run the web browser's video encoding/decoding library (written in C++).
1613577839659610114 2023-01-12 16:45:10 +0000 <alexxubyte> 3/ Traditionally, we can only work with Javascript in the web browser, and the performance cannot compare with native code like C/C++ because it is interpreted.
1613577833720483841 2023-01-12 16:45:09 +0000 <alexxubyte> 2/ What is 𝐰𝐞𝐛 𝐚𝐬𝐬𝐞𝐦𝐛𝐥𝐲 (WASM)? Why does it attract so much attention?  The diagram shows how we can run native C/C++/Rust code inside a web browser with WASM.  https://t.co/zzebyx95uy
1613577821083013121 2023-01-12 16:45:06 +0000 <alexxubyte> 1/ Is it possible to run C, C++, or Rust on a web browser?  https://t.co/ZJ3Fj39bMZ
1613566760783056896 2023-01-12 16:01:09 +0000 <alexxubyte> @javarevisited Please don't use my diagrams to promote other people's products.
1613565693290774528 2023-01-12 15:56:54 +0000 <alexxubyte> @kylascan This analogy is quite well thought out. Great article 👍
1613215565698727937 2023-01-11 16:45:37 +0000 <alexxubyte> What is Kubernetes? Why is it called k8s? In this video, we will talk about:  - How it works - Its architecture - Its upsides and downsides - Whether we should use it  Watch and subscribe here:  https://t.co/rECVdhXkiw  https://t.co/fAmMIO9NIs
1613001879121965056 2023-01-11 02:36:30 +0000 <alexxubyte> @jinalthegeek The digital version is only available at  https://t.co/drsnD1nDRm
1613001723605577728 2023-01-11 02:35:53 +0000 <alexxubyte> @kaiomurz No preorder. If you are interested, you can enter the email to the google form. I’ll send out an email when the book is available.
1613001266241892353 2023-01-11 02:34:04 +0000 <alexxubyte> @01Blows No, it is a separate product.
1612853049021845504 2023-01-10 16:45:06 +0000 <alexxubyte> *BIG* announcement:  Our new book, Machine Learning System Design Interview, will be available on Amazon soon (Feb/01)!  Thanks to everyone who helped us make this happen.  If you want to get notified when the book is available, sign up here:  https://t.co/ILQprvXGlM  https://t.co/XjtMCnOH0W
1612831658360868866 2023-01-10 15:20:06 +0000 <alexxubyte> @simform @sequoia Grammarly, chatgpt and wordtune
1612705826179014656 2023-01-10 07:00:06 +0000 <alexxubyte> The generative AI Application Landscape map by @sequoia  Which app have you used?  https://t.co/3i2daTZUbe
1612495268020387841 2023-01-09 17:03:25 +0000 <alexxubyte> Many interesting topics. I’m looking forward to your insights!
1612490719637442560 2023-01-09 16:45:20 +0000 <alexxubyte> /11 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1612490713295622148 2023-01-09 16:45:19 +0000 <alexxubyte> /10 Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/DT8oe4Hux7
1612490701572571136 2023-01-09 16:45:16 +0000 <alexxubyte> /9 👉 Over to you: Have you met similar situations at work when you have to choose an architecture other than microservice?
1612490698959507456 2023-01-09 16:45:15 +0000 <alexxubyte> /8 So microservice architecture is designed to solve problems for certain domains. We need to think about “why” when designing applications.
1612490694261878786 2023-01-09 16:45:14 +0000 <alexxubyte> /7 🔹Real-time gaming and low-latency trading need to talk to the server in high frequency, and the requests need to go to the same running instance. So 𝐰𝐞𝐛 𝐬𝐨𝐜𝐤𝐞𝐭 connections and 𝐬𝐭𝐢𝐜𝐤𝐲 𝐫𝐨𝐮𝐭𝐢𝐧𝐠 are needed.  https://t.co/n2koksbGjV
1612490683197321216 2023-01-09 16:45:12 +0000 <alexxubyte> /6 For example, when a character is injured in a game, we don’t want to see the update 3 seconds later. This kind of user experience can kill a game.
1612490680542298114 2023-01-09 16:45:11 +0000 <alexxubyte> /5 🔹Microservice architecture is usually 𝐬𝐭𝐚𝐭𝐞𝐥𝐞𝐬𝐬, and the states are persisted in the database. Real-time gaming and low-latency trading need to 𝐬𝐭𝐨𝐫𝐞 𝐭𝐡𝐞 𝐬𝐭𝐚𝐭𝐞𝐬 𝐢𝐧 𝐦𝐞𝐦𝐨𝐫𝐲 for quick updates.
1612490677954416640 2023-01-09 16:45:10 +0000 <alexxubyte> /4 We cannot separate the services into different processes because the network latency is unbearable.
1612490673013522435 2023-01-09 16:45:09 +0000 <alexxubyte> /3 🔹These applications are very 𝐥𝐚𝐭𝐞𝐧𝐜𝐲-𝐬𝐞𝐧𝐬𝐢𝐭𝐢𝐯𝐞. For real-time gaming, the latency should be at the milli-second level; for low-latency trading, the latency should be at the micro-second level.  https://t.co/qtaRLaPU42
1612490660581634048 2023-01-09 16:45:06 +0000 <alexxubyte> /2 There are some common features of these applications, which make them choose monolithic architecture:
1612490655284199424 2023-01-09 16:45:05 +0000 <alexxubyte> /1 𝐈𝐬 𝐦𝐢𝐜𝐫𝐨𝐬𝐞𝐫𝐯𝐢𝐜𝐞 𝐚𝐫𝐜𝐡𝐢𝐭𝐞𝐜𝐭𝐮𝐫𝐞 𝐭𝐡𝐞 𝐬𝐢𝐥𝐯𝐞𝐫 𝐛𝐮𝐥𝐥𝐞𝐭?  The diagram below shows why 𝐫𝐞𝐚𝐥-𝐭𝐢𝐦𝐞 𝐠𝐚𝐦𝐢𝐧𝐠 and 𝐥𝐨𝐰-𝐥𝐚𝐭𝐞𝐧𝐜𝐲 𝐭𝐫𝐚𝐝𝐢𝐧𝐠 applications should not use microservice architecture.  https://t.co/PqClX1vDHH
1611763073265840131 2023-01-07 16:33:56 +0000 <alexxubyte> I just sent a weekly system design newsletter to 200,000+ readers. Next week:  🔹Visa disputes and chargebacks 🔹What is Kubernetes 🔹Web assembly 🔹Microservices 🔹Code complexity  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/z6Ota74Qhx
1611754137577992192 2023-01-07 15:58:25 +0000 <alexxubyte> @sumek It’s available at  https://t.co/80EUzU8K4p
1611391866863489024 2023-01-06 15:58:53 +0000 <alexxubyte> Experience is the best teacher, particularly in times when we fail.   Great image by @ ferraroroberto on IG  https://t.co/XMOHZYaUwP
1611041118233432064 2023-01-05 16:45:08 +0000 <alexxubyte> 2/2 Link to all the Linux commands:  https://t.co/inAZHhpsdZ
1611041113112207361 2023-01-05 16:45:07 +0000 <alexxubyte> 1/2 Linux commands illustrated on one page!  🔹Controlling processes: kill, killall, nice 🔹Scheduliing jobs: sleep, watch, crontab 🔹Host location: host, whois, ping 🔹Many more  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/6Q1Ro49iot
1610678762903064581 2023-01-04 16:45:16 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1610678760306769922 2023-01-04 16:45:16 +0000 <alexxubyte> /6 𝐒𝐮𝐛𝐬𝐜𝐫𝐢𝐛𝐞 𝐭𝐨 𝐨𝐮𝐫 𝐰𝐞𝐞𝐤𝐥𝐲 𝐧𝐞𝐰𝐬𝐥𝐞𝐭𝐭𝐞𝐫 to learn something new every week:   https://t.co/dkjDPxaQMt
1610678757735694337 2023-01-04 16:45:15 +0000 <alexxubyte> /5 👉 Over to you: Have you used Redis for other use cases? What are they?
1610678753688186881 2023-01-04 16:45:14 +0000 <alexxubyte> /4 🔹Calculate user retention We can use Bitmap to represent the user login daily and calculate user retention.  🔹Message queue We can use List for a message queue.  🔹Ranking We can use ZSet to sort the articles.  https://t.co/PgqPXsZ4FI
1610678739884724228 2023-01-04 16:45:11 +0000 <alexxubyte> /3 🔹Counter We can count how many likes or how many reads for articles  🔹Rate limiter We can apply a rate limit for specific user IPs  🔹Global ID generator We can use Redis Int for global ID  🔹Shopping cart We can use Redis Hash to represent key-value pairs in a shopping cart  https://t.co/iPfHoco4mw
1610678726395850753 2023-01-04 16:45:07 +0000 <alexxubyte> /2 🔹Session We can use Redis to share user session data among different services.  🔹Cache We can use Redis to cache objects or pages, especially for hotspot data.  🔹Distributed lock We can use a Redis string to acquire locks among distributed services.  https://t.co/R90VUFEGMG
1610678713087295490 2023-01-04 16:45:04 +0000 <alexxubyte> /1 How can Redis be used?  There is more to Redis than just caching.  Redis can be used in various scenarios, as shown in the diagram.  https://t.co/nNtvaUYPO4
1610419320395542530 2023-01-03 23:34:20 +0000 <alexxubyte> 2/2 Link:  https://t.co/4V5wyoH2uR  https://t.co/3XvQn13qvn
1610419319216934913 2023-01-03 23:34:20 +0000 <alexxubyte> 1/2 Interesting blog post by @scgupta detailing the cloud deployment landscape.  https://t.co/mvaZdeivzO
1610313304060342272 2023-01-03 16:33:04 +0000 <alexxubyte> What is the CAP theorem? How useful is it to system design?  The CAP theorem is a concept in CS that explains the trade-offs between consistency, availability, and partition tolerance in distributed systems.  Watch and subscribe here (YouTube video):  https://t.co/hIUTMfjwJg  https://t.co/LzktRGw5qX
1609999933234630656 2023-01-02 19:47:51 +0000 <alexxubyte> @moshhamedani I've spent a good amount of time researching this topic. Here are some of the popular ones:   - newsfeed - chat app - location-based service  - web crawler - payment systems - URL shortener  - key-value store - stock trading - storage-related (s3, dropbox) - booking systems
1609954000841093127 2023-01-02 16:45:19 +0000 <alexxubyte> /4 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1609953998269992965 2023-01-02 16:45:19 +0000 <alexxubyte> /3 If the remote repository crashes, the files can be recovered from the local repositories.  👉 Over to you: Which Git command do you use to resolve conflicting changes?
1609953992133730304 2023-01-02 16:45:17 +0000 <alexxubyte> /2 Git is a distributed version control system.  Every developer maintains a local copy of the main repository and edits and commits to the local copy.  The commit is very fast because the operation doesn’t interact with the remote repository.  https://t.co/cu3Q0p48H4
1609953957174218754 2023-01-02 16:45:09 +0000 <alexxubyte> /1 How does Git Work?  The diagram below shows the Git workflow.  https://t.co/0VcdsdSW1M
1609821855866847235 2023-01-02 08:00:14 +0000 <alexxubyte> @ALEngineered Congrats Steve! Well deserved.
1609635575828713472 2023-01-01 19:40:01 +0000 <alexxubyte> @GiuseScara Thanks for sharing, Giuseppe. Glad to hear you find it helpful 😄
1609328635730857987 2022-12-31 23:20:21 +0000 <alexxubyte> @TailLatency Thank you for your kind words, Dan.
1609318091334488064 2022-12-31 22:38:27 +0000 <alexxubyte> @kellabyte @davidfowl Thank you, Kelly!
1609275335790714881 2022-12-31 19:48:33 +0000 <alexxubyte> @zhigangsuo Yes, some of those are not quite accurate. Hopefully, this list pushes some people to gain some interest in math!
1609229165970214913 2022-12-31 16:45:05 +0000 <alexxubyte> Next week, we will cover:  🔹REST vs. GraphQL vs. gRPC 🔹Git workflow 🔹Redis use cases 🔹The CAP theorem 🔹Scaling time series data storage  𝐒𝐮𝐛𝐬𝐜𝐫𝐢𝐛𝐞 𝐭𝐨 𝐨𝐮𝐫 𝐰𝐞𝐞𝐤𝐥𝐲 𝐧𝐞𝐰𝐬𝐥𝐞𝐭𝐭𝐞𝐫 to learn something new every week:  https://t.co/dkjDPxaQMt  https://t.co/mYe8GVpb11
1608866774237478920 2022-12-30 16:45:04 +0000 <alexxubyte> 17 Equations That Changed the World. Happy Friday!  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/0RYwcKdZ4q  https://t.co/cpKmgDgrUv
1608542661023260673 2022-12-29 19:17:10 +0000 <alexxubyte> Read more here:  https://t.co/KxpTPVFErC
1608504445381533696 2022-12-29 16:45:19 +0000 <alexxubyte> /6 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1608504442797850625 2022-12-29 16:45:18 +0000 <alexxubyte> /5 Subscribe to our weekly newsletter to learn something new every week:   https://t.co/dkjDPxaQMt
1608504437844344834 2022-12-29 16:45:17 +0000 <alexxubyte> /4 Third gen: self-service, decentralized, and layered. As of early 2018, Uber had completely new business lines and numerous new applications. Freight, ATG, Elevate, groceries, and more are among the growing business lines. With a new set of goals comes the third generation.  https://t.co/9Zx8gZEYsy
1608504420773560320 2022-12-29 16:45:13 +0000 <alexxubyte> /3 Second gen: the all-encompassing gateway. Uber adopted a microservice architecture very early on. By 2019, Uber's products were powered by 2,200+ microservices as a result of this architectural decision.  https://t.co/RdMtJH6BHx
1608504402448642053 2022-12-29 16:45:08 +0000 <alexxubyte> /2 First gen: the organic evolution. Uber's architecture in 2014 would have two key services: dispatch and API. A dispatch service connects a rider with a driver, while an API service stores the long-term data of users and trips.  https://t.co/Xd3I0lResi
1608504387860860930 2022-12-29 16:45:05 +0000 <alexxubyte> /1 Evolution of Uber’s API layer  Uber’s API gateway went through 3 main stages.  https://t.co/yNFtLE0Ew3
1608142017787486210 2022-12-28 16:45:09 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1608142015291850752 2022-12-28 16:45:08 +0000 <alexxubyte> /6 👉 Over to you: of the 4 solutions (long polling, short polling, SSE, WebSocket), which ones are commonly used, for what use cases?
1608142012708159489 2022-12-28 16:45:08 +0000 <alexxubyte> /5 The difference is that SSE is uni-directional so the browser cannot send new request to server, while WebSocket is fully-duplex so the browser could keep sending new requests.
1608142010095136770 2022-12-28 16:45:07 +0000 <alexxubyte> /4 🔹HTTP server and web browser cooperate: WebSocket or SSE (server-sent event). In both cases, the HTTP server could directly send the latest data to the browser after the connection is established.
1608142007440113665 2022-12-28 16:45:07 +0000 <alexxubyte> /3 🔹Web browsers do the heavy lifting: short polling or long polling. With short polling, the browser will retry until it gets the latest data. With long polling, the HTTP server doesn’t return results until new data has arrived.
1608142004889976833 2022-12-28 16:45:06 +0000 <alexxubyte> /2 Both the web browser and the HTTP server could be responsible for this task.
1608141999940726784 2022-12-28 16:45:05 +0000 <alexxubyte> /1 Can a web server provide real-time updates?  An HTTP server cannot automatically initiate a connection to a browser. As a result, the web browser is the initiator. What should we do next to get real-time updates from the HTTP server?  https://t.co/gI05i1o8yS
1607779643310080001 2022-12-27 16:45:12 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1607779640642502657 2022-12-27 16:45:12 +0000 <alexxubyte> /7 Applying these strict accounting rules makes reconciliation much easier!  Why is a credit card called a “𝐜𝐫𝐞𝐝𝐢𝐭” card? Why is a debit card called a “𝐝𝐞𝐛𝐢𝐭” card? 👇
1607779637337419776 2022-12-27 16:45:11 +0000 <alexxubyte> /6 Bob’s card is called a “debit” card because it is a 𝐝𝐞𝐛𝐢𝐭 𝐫𝐞𝐜𝐨𝐫𝐝 when paying with a debit card.  👉 Why is this important?  This is how a ledger system is designed, only a real ledger is more complicated.  https://t.co/eJG2jJvKJF
1607779629355642881 2022-12-27 16:45:09 +0000 <alexxubyte> /5 This is a 𝐝𝐞𝐛𝐢𝐭 record.  2. Journal line 2 - Bank’s cash is an 𝐚𝐬𝐬𝐞𝐭 and the bank’s cash is deducted by $100.  This is a 𝐜𝐫𝐞𝐝𝐢𝐭 record.  The balance sheet equation still balances with the two journal lines recorded in the ledger.  https://t.co/b064f20Lsz
1607779621302603777 2022-12-27 16:45:07 +0000 <alexxubyte> /4 Bob pays $100 to the merchant with a debit card. We have two accounts involved in this transaction:  1. Journal line 1 - From the issuing bank’s point of view, Bob’s bank account is a 𝐥𝐢𝐚𝐛𝐢𝐥𝐢𝐭𝐲 (because the bank owes Bob money). Bob’s bank account is deducted by $100.  https://t.co/n0HoEhX5Cq
1607779614155501569 2022-12-27 16:45:05 +0000 <alexxubyte> /3  🔸 Each journal line is booked to an account. 🔸 Each account belongs to one of the three components in the balance sheet:  💡Asset = Liability + Equity  Let’s look at the issuing bank’s ledger as an example:
1607779611563413504 2022-12-27 16:45:05 +0000 <alexxubyte> /2  🔸 Each transaction in the business system is transformed into at least two journal lines in the ledger system. This is called 𝐝𝐨𝐮𝐛𝐥𝐞-𝐞𝐧𝐭𝐫𝐲 accounting, where every transaction must have a 𝐬𝐨𝐮𝐫𝐜𝐞 account and a 𝐭𝐚𝐫𝐠𝐞𝐭 account.
1607779608346374146 2022-12-27 16:45:04 +0000 <alexxubyte> /1 Why is a credit card called a “𝐜𝐫𝐞𝐝𝐢𝐭” card?  Why is a debit card called a “𝐝𝐞𝐛𝐢𝐭” card?  An example of a debit card payment is shown in the diagram below. 👇  https://t.co/t0nmXOZI6C
1607417272657915904 2022-12-26 16:45:16 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1607417269919047684 2022-12-26 16:45:16 +0000 <alexxubyte> /7 Subscribe to our weekly newsletter to learn something new every week:   https://t.co/dkjDPxaQMt
1607417267272421377 2022-12-26 16:45:15 +0000 <alexxubyte> /6 👉 Over to you: what comes into your mind when people talk about “cloud native”?
1607417264609046528 2022-12-26 16:45:14 +0000 <alexxubyte> /5 🔹 4. Application infrastructure The applications are massively deployed on cloud infrastructure instead of self-hosted servers.
1607417260347621377 2022-12-26 16:45:13 +0000 <alexxubyte> /4 🔹 3. Deployment &amp; packaging The applications used to be deployed on physical servers. Then around 2000, the apps not sensitive to latency were usually deployed on virtual servers. With cloud-native, apps are packaged into docker images and deployed in containers  https://t.co/WSXTIsQFA6
1607417248016379909 2022-12-26 16:45:10 +0000 <alexxubyte> /3 🔹 2. Application architecture The architecture has gone from monolithic to microservices. Each service is designed to be small, adaptive to the limited resources in cloud containers.  https://t.co/Ohn8zYYRjP
1607417236482060290 2022-12-26 16:45:08 +0000 <alexxubyte> /2 This means the applications are designed to leverage cloud features, so they are resilient to load and easy to scale.  Cloud-native includes 4 aspects:  🔹 1. Development process This has progressed from waterfall to agile to DevOps.  https://t.co/YI103DCgrt
1607417223840411652 2022-12-26 16:45:05 +0000 <alexxubyte> /1 What is cloud-native?  Below is a diagram showing the evolution of architecture and processes since the 1980s.  Organizations can build and run scalable applications on public, private, and hybrid clouds using cloud-native technologies.  https://t.co/B9nFW1rVS6
1606691232305905665 2022-12-24 16:40:15 +0000 <alexxubyte> Next week, we will cover:  🔹What is cloud native 🔹Git commands 🔹Types of database indexes 🔹CAP theorem 🔹Short/long polling  𝐃𝐨𝐧'𝐭 𝐦𝐢𝐬𝐬 𝐨𝐮𝐭 𝐨𝐧 𝐢𝐦𝐩𝐨𝐫𝐭𝐚𝐧𝐭 𝐮𝐩𝐝𝐚𝐭𝐞𝐬 𝐚𝐧𝐝 𝐞𝐱𝐜𝐥𝐮𝐬𝐢𝐯𝐞 𝐜𝐨𝐧𝐭𝐞𝐧𝐭 – subscribe now:  https://t.co/dkjDPxrTOt  https://t.co/eWE1PSt7qT
1606347571919667200 2022-12-23 17:54:40 +0000 <alexxubyte> How is data sent over the internet? What does that have to do with the 𝐎𝐒𝐈 𝐦𝐨𝐝𝐞𝐥? How does TCP/IP fit into this?  Watch and subscribe here (YouTube video):  https://t.co/CHAWxQBSFv  https://t.co/p9KOZwr3wM
1606312068574941184 2022-12-23 15:33:35 +0000 <alexxubyte> @AlexCouedelo @bytebytego Good point. Gradle is used far more than others. The diagram I found was from a few years ago. Some of the tools are outdated or more popular options are available now.
1606125168631222272 2022-12-23 03:10:55 +0000 <alexxubyte> @javarevisited Thanks. Just realized I uploaded the wrong diagram.
1605965600802492417 2022-12-22 16:36:51 +0000 <alexxubyte> /10 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1605965597958754312 2022-12-22 16:36:50 +0000 <alexxubyte> /9 👉 Over to you: Did I miss anything? Please comment on what you think is necessary to learn microservices.
1605965595458949123 2022-12-22 16:36:50 +0000 <alexxubyte> /8 🔹 Management &amp; Monitoring - To manage so many microservices, the common Ops tools include Prometheus, Elastic Stack, and Kubernetes.
1605965592728440832 2022-12-22 16:36:49 +0000 <alexxubyte> /7 🔹 Communications - For services to talk to each other, we can use messaging infra Kafka or RPC.  🔹 Persistence - We can use MySQL or PostgreSQL for a relational database, and Amazon S3 for object store. We can also use Cassandra for the wide-column store if necessary.
1605965590174126085 2022-12-22 16:36:48 +0000 <alexxubyte> /6 🔹 The microservices are deployed on clouds. We have options among AWS, Microsoft Azure, or Google GCP.  🔹 Cache and Full-text Search - Redis is a common choice for caching key-value pairs. ElasticSearch is used for full-text search.
1605965586994843655 2022-12-22 16:36:47 +0000 <alexxubyte> /5 ▶️ 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐢𝐨𝐧  🔹 NGinx is a common choice for load balancers. Cloudflare provides CDN (Content Delivery Network).  🔹 API Gateway - We can use spring boot for the gateway, and use Eureka/Zookeeper for service discovery.  https://t.co/kD5aBNRS0d
1605965580703387656 2022-12-22 16:36:46 +0000 <alexxubyte> /4 🔹 Continuous Integration - JUnit and Jenkins for automated testing. The code is packaged into a Docker image and deployed as microservices.
1605965577591214091 2022-12-22 16:36:45 +0000 <alexxubyte> /3 🔹 Development - Node.js or react is popular for frontend development, and java/python/go for backend development. Also, we need to change the configurations in the API gateway according to API definitions.  https://t.co/Ern9DAwMuW
1605965570758692867 2022-12-22 16:36:44 +0000 <alexxubyte> /2 ▶️ 𝐏𝐫𝐞-𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐢𝐨𝐧  🔹 Define API - This establishes a contract between frontend and backend. We can use Postman or OpenAPI for this.  https://t.co/ovDEN38tNy
1605965563410272263 2022-12-22 16:36:42 +0000 <alexxubyte> /1 What tech stack is commonly used for microservices?  Below you will find a diagram showing the microservice tech stack, both for the development phase and for production.  https://t.co/hFPziGW0yN
1605607770245324809 2022-12-21 16:54:57 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1605607767581941762 2022-12-21 16:54:57 +0000 <alexxubyte> /7  11.  Complex real-time database in 3 data centers: Sacramento, Atlanta, and Portland. It also has cloud contracts with AWS and Google Cloud.  12.  Long tail of legacy code. Example: running 4 versions of API code.
1605607764939530262 2022-12-21 16:54:56 +0000 <alexxubyte> /6  10.  Lack of good local dev environment. Example: some testing requires packing GBs of data. 20min to upload them to the server, and 30 min to unpack.
1605607762360033284 2022-12-21 16:54:55 +0000 <alexxubyte> /5  9.  Costingly Serializing/deserializing. Example: on Ads server, 30% CPU run ads prediction model, 70% serializing/deserializing data into four different formats.
1605607759679918080 2022-12-21 16:54:55 +0000 <alexxubyte> /4  7.  High complexity of the tech stack: a couple of weeks in Elon’s time are required to understand where everything is and how things interact.  8.  High dependency among microservices. Example: touch 1 service, 17 other services are affected.
1605607757071015943 2022-12-21 16:54:54 +0000 <alexxubyte> /3  5.  To cut the burn rate, Twitter headcounts reduced from 8k to 2k in the last 6 weeks.  6.  Got scammed by the SMS telecommunications providers. $16 million SMS costs excluding North America. 300+ SMS providers allow bots to run 2FA repeatedly.
1605607754390900736 2022-12-21 16:54:54 +0000 <alexxubyte> /2  1.  Code complexity: 20 million lines of Scala code in Twitter codebase.  2.  $1 billion in server costs per year.  3.  A metric that matters most to Twitter: unregretted user minutes.  4.  Like count is updated every second for celebrities.
1605607748283949056 2022-12-21 16:54:52 +0000 <alexxubyte> /1 My 12 bullet points TLDR on technical content from Elon Musk on a Space with @realGeorgeHotz, on the complexity of the Twitter stack, scale, metrics, ads, etc.  https://t.co/J1jxvNxyDg
1605435629398941696 2022-12-21 05:30:56 +0000 <alexxubyte> @donkeysharp Probably only occasionally.
1605435562898313216 2022-12-21 05:30:40 +0000 <alexxubyte> @ProEvilz The content is also available on my newsletter:  https://t.co/0RYwcKv26q
1605435409885863939 2022-12-21 05:30:03 +0000 <alexxubyte> @MarcelHolter Does this link work?  https://t.co/lJjPrROyqq
1605242893870190592 2022-12-20 16:45:04 +0000 <alexxubyte> *BIG* announcement: we’ve launched a Facebook page!  Facebook supports both 𝐝𝐢𝐚𝐠𝐫𝐚𝐦𝐬 𝐚𝐧𝐝 𝐯𝐢𝐝𝐞𝐨𝐬 well. Our goal is to explain complex systems in an easy-to-understand way.  We'll be posting a wide range of topics there.  Follow us on FB:  https://t.co/sekwCxADL9  https://t.co/fLgNOn7qwc
1605051506666848256 2022-12-20 04:04:34 +0000 <alexxubyte> @TheAnkurTyagi Great article, Ankur. Thanks for sharing.
1605014780653101056 2022-12-20 01:38:38 +0000 <alexxubyte> @subramaniyan176  https://t.co/J4UVks6Huv
1605014683374612480 2022-12-20 01:38:14 +0000 <alexxubyte> @DarkDoomDoom1 It depends on the setup. Usually having the api gateway is enough.
1604880545715851269 2022-12-19 16:45:13 +0000 <alexxubyte> /11 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1604880541827731463 2022-12-19 16:45:13 +0000 <alexxubyte> /10 👉 Over to you: With the data cached at so many levels, how can we guarantee the 𝐬𝐞𝐧𝐬𝐢𝐭𝐢𝐯𝐞 𝐮𝐬𝐞𝐫 𝐝𝐚𝐭𝐚 is completely erased from the systems?  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt  https://t.co/Jq1uOlby5A
1604880530503110665 2022-12-19 16:45:10 +0000 <alexxubyte> /9   - Transaction log: record all the transactions and database updates - Replication Log: used to record the replication state in a database cluster
1604880527986528258 2022-12-19 16:45:09 +0000 <alexxubyte> /8  🔹 8. Database: Even in the database, we have different levels of caches:  - WAL(Write-ahead Log): data is written to WAL first before building the B tree index - Bufferpool: A memory area allocated to cache query results - Materialized View
1604880525444780033 2022-12-19 16:45:09 +0000 <alexxubyte> /7  🔹 7. Full-text Search: we sometimes need to use full-text searches like Elastic Search for document search or log search. A copy of data is indexed in the search engine as well.
1604880522974334976 2022-12-19 16:45:08 +0000 <alexxubyte> /6  🔹 6. Distributed Cache: Distributed cache like Redis hold key-value pairs for multiple services in memory. It provides much better read/write performance than the database.
1604880520503885824 2022-12-19 16:45:07 +0000 <alexxubyte> /5  🔹 5. Services: There are multiple layers of cache in a service. If the data is not cached in CPU cache, the service will try to retrieve the data from memory. Sometimes the service has a second-level cache to store data on disk.
1604880518066999299 2022-12-19 16:45:07 +0000 <alexxubyte> /4  🔹 4. Messaging infra: Message brokers store messages on disk first, and then consumers retrieve them at their own pace. Depending on the retention policy, the data is cached in Kafka clusters for a period of time.
1604880515575582727 2022-12-19 16:45:06 +0000 <alexxubyte> /3   🔹 2. CDN: CDN caches static web resources. The clients can retrieve data from a CDN node nearby.  🔹 3. Load Balancer: The load Balancer can cache resources as well.
1604880513079971842 2022-12-19 16:45:06 +0000 <alexxubyte> /2 There are 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐥𝐚𝐲𝐞𝐫𝐬 along the flow.  🔹 1. Client apps: HTTP responses can be cached by the browser. We request data over HTTP for the first time; we request data again, and the client app tries to retrieve the data from the browser cache first.
1604880509086994436 2022-12-19 16:45:05 +0000 <alexxubyte> /1 Data is cached everywhere, from the front end to the back end!  This diagram illustrates where we cache data in a typical architecture.  https://t.co/5IaPja8UQS
1604590911844777984 2022-12-18 21:34:19 +0000 <alexxubyte> LinkedIn:  https://t.co/1UXoyavCAf
1604590910712315905 2022-12-18 21:34:19 +0000 <alexxubyte> We'll see how long it takes for this to be deleted. If you want to connect, type the words instead of copying and pasting them.   𝐈'𝐦 𝐚𝐯𝐚𝐢𝐥𝐚𝐛𝐥𝐞 𝐚𝐭 𝐌𝐚𝐬𝐭𝐨𝐝𝐨𝐧: 𝐧𝐨𝐜.𝐬𝐨𝐜𝐢𝐚𝐥/@𝐚𝐥𝐞𝐱𝐱𝐮
1604285187617013760 2022-12-18 01:19:29 +0000 <alexxubyte> Great visual on how ChatGPT is trained.
1604175342289051649 2022-12-17 18:03:00 +0000 <alexxubyte> @KevinNaughtonJr Congratulations Kevin!
1604155727492177920 2022-12-17 16:45:03 +0000 <alexxubyte> Next week, we will cover:  🔹 Microservices tech stack 🔹 HTTP short/long poll, WebSocket, SSE 🔹 Cache strategies 🔹 OSI model (YouTube) 🔹 TBD  Join a growing community of over 200,000 System Design fans. Subscribe here:  https://t.co/PczMAd8Jdb  https://t.co/otFFP0GBxe
1603793384862142465 2022-12-16 16:45:14 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1603793379921461257 2022-12-16 16:45:13 +0000 <alexxubyte> /7 👉 Over to you: Have you encountered a DDos attack in production? How did you solve it?  Good read:  https://t.co/NcSoWnp58j  https://t.co/kbHbOqge5b
1603793371650134016 2022-12-16 16:45:11 +0000 <alexxubyte> /6 This results in an exhaustion of resources on the victim server due to the accumulation of many half-open TCP connections.
1603793369204871169 2022-12-16 16:45:10 +0000 <alexxubyte> /5 Normally the client and server establish a TCP connection via a 3-way handshake. As a result of a SYN flood attack, zombies send many SYN requests to the server, but they never return an ACK from the server.
1603793364888866816 2022-12-16 16:45:09 +0000 <alexxubyte> /4 🔹Step 3: The zombies can send requests to the victim servers, exhausting the servers' resources. Since zombies are legitimate internet devices, it is difficult to distinguish DDoS traffic from normal traffic.  An example of a common DDos attack is a SYN flood.  https://t.co/Z3JhMMNbxk
1603793354646396929 2022-12-16 16:45:07 +0000 <alexxubyte> /3 🔹Steps 1 and 2: An attacker remotely controls a network of zombies via the controller. These zombies are then instructed remotely by the attacker.  https://t.co/UPa3D745ix
1603793345825738752 2022-12-16 16:45:05 +0000 <alexxubyte> /2 The purpose of a DDos attack is to disrupt the normal traffic of the victim servers through malicious requests. As a result, the servers are swamped with malicious requests and have no buffer to handle normal requests.
1603793341597945857 2022-12-16 16:45:04 +0000 <alexxubyte> /1 What is a DDos (Distributed Denial-of-Service) Attack?  Why is it hazardous to the services?  Here is an example of how DDoS works.  https://t.co/Mxwx6pYsac
1603428683514904581 2022-12-15 16:36:03 +0000 <alexxubyte> I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1603428681036070920 2022-12-15 16:36:02 +0000 <alexxubyte> 🔹 A process is a heavyweight operation. It takes more time to create and terminate. 🔹 Context switching is more expensive between processes. 🔹 Inter-thread communication is faster for threads.
1603428678494322834 2022-12-15 16:36:01 +0000 <alexxubyte> Main differences between process and thread:  🔹 Processes are usually independent, while threads exist as process subsets. 🔹 Each process has its own memory space. Threads that belong to the same process share the same memory.
1603428674392293380 2022-12-15 16:36:00 +0000 <alexxubyte> Popular interview question: What is the difference between 𝐏𝐫𝐨𝐜𝐞𝐬𝐬 and 𝐓𝐡𝐫𝐞𝐚𝐝?  Watch and subscribe here (YouTube video):  https://t.co/5Oq5J1O09O  https://t.co/r6LRKQRUal
1603067521862488064 2022-12-14 16:40:55 +0000 <alexxubyte> /4 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1603067519488561152 2022-12-14 16:40:54 +0000 <alexxubyte> /3 Subscribe to our weekly newsletter to learn something new every week:   https://t.co/dkjDPxrTOt
1603067513507487744 2022-12-14 16:40:53 +0000 <alexxubyte> /2 🔹The network is reliable 🔹Latency is zero 🔹Bandwidth is infinite 🔹The network is secure 🔹Topology doesn't change 🔹There is one administrator 🔹Transport cost is zero 🔹The network is homogeneous.  https://t.co/xMapL2sHGi
1603067499674681345 2022-12-14 16:40:50 +0000 <alexxubyte> /1 What are the most common misconceptions about distributed environments?  About 30 years ago, Peter Deutsch drafted a list of eight fallacies in distributed computing environments, now known as "The 8 fallacies of distributed computing". Many years later, the fallacies remain.  https://t.co/j7rlXrwMIg
1602704411913879553 2022-12-13 16:38:03 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1602704409372217344 2022-12-13 16:38:02 +0000 <alexxubyte> /6 I strongly recommend you play with these applications. The results are astonishing!  👉 Over to you: Have you chatted with ChatGPT? What did you ask it?
1602704406742376448 2022-12-13 16:38:02 +0000 <alexxubyte> /5 🔹DALL-E: creating images from text 🔹CLIP: connecting text and images 🔹Whisper: multi-lingual voice to text 🔹ChatGPT: chatbot, article writer, code writer
1602704404229935104 2022-12-13 16:38:01 +0000 <alexxubyte> /4 In June 2020, GPT 3 was released, which was trained by a much more comprehensive dataset.  More applications were developed based on GPT 3, including:
1602704401797238784 2022-12-13 16:38:00 +0000 <alexxubyte> /3 Later GPT 2 was used to generate music in MuseNet and JukeBox.
1602704399251357698 2022-12-13 16:38:00 +0000 <alexxubyte> /2 GPT 1 was trained with BooksCorpus dataset (5GB), whose main focus is language understanding.  On Valentine’s Day 2019, GPT 2 was released with the slogan “too dangerous to release”. It was trained with Reddit articles with over 3 likes (40GB). The training cost is $43k.
1602704395090636800 2022-12-13 16:37:59 +0000 <alexxubyte> /1 ChatGPT and copy. ai brought attention to AIGC (AI-generated Content). Why is AIGC gaining explosive growth?  The diagram below summarizes the development in this area.  OpenAI has been developing GPT (Generative Pre-Train) since 2018.  https://t.co/Ydm6cvQe85
1602702255802548224 2022-12-13 16:29:29 +0000 <alexxubyte> Honored to see my books on the list.   Will's blog/newsletter is among the best in the industry. He talks about system architecture, industry insights, hiring, etc. If you have not yet subscribed, I recommend checking it out at  https://t.co/cd2Drr95o9
1602690443371855875 2022-12-13 15:42:32 +0000 <alexxubyte> @TheAnkurTyagi Thank you, Ankur!
1602456001168318469 2022-12-13 00:10:57 +0000 <alexxubyte> @vponamariov A combination of factors may be involved, such as posting on multiple platforms and @SubstackInc's recommendation feature is awesome.
1602451500818579457 2022-12-12 23:53:04 +0000 <alexxubyte> @Franc0Fernand0 Thank you, Fernando!
1602363193434656768 2022-12-12 18:02:10 +0000 <alexxubyte> @GergelyOrosz Thank you so much for your encouragement in starting a newsletter. It has truly been rewarding to see it grow and evolve over time. I'm excited to continue providing "dense" technical content :)
1602349095196164097 2022-12-12 17:06:09 +0000 <alexxubyte> @franciscojarceo @bytebytego Thank you for your kind words, Francisco!
1602340419018162185 2022-12-12 16:31:40 +0000 <alexxubyte> /11 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1602340416568688651 2022-12-12 16:31:40 +0000 <alexxubyte> /10 Here is our weekly newsletter if you want to subscribe:  https://t.co/dkjDPxrTOt
1602340413993385990 2022-12-12 16:31:39 +0000 <alexxubyte> /9 I hope this is useful.  I want to express my gratitude for the support all of you've given me on this journey. It's truly amazing to see so many people like the content, and I feel incredibly blessed. Thank you!
1602340411543912464 2022-12-12 16:31:38 +0000 <alexxubyte> /8 What’s next?  My mission is to help industry experts write good technical content. You will see more books coming out from ByteByteGo in 2022.
1602340409039912970 2022-12-12 16:31:38 +0000 <alexxubyte> /7  Upside I enjoyed what I was doing. I am happy to have been able to contribute to education.  Downside No PTOs, 401k match, no health benefits, unstructured work, and long hours. It is possible to improve this over time.
1602340406468804619 2022-12-12 16:31:37 +0000 <alexxubyte> /6 Income I make more than I did at my tech job. Using @lennysan words, instead of one boss, I have lots of micro-bosses. And as it grows, I get a raise.
1602340403948027918 2022-12-12 16:31:37 +0000 <alexxubyte> /5 Time commitment It takes time to create high-quality content. Some 200-word social media posts take 2-4 hours to write and rewrite, while others may take over 20 hours. To make a 5-minute YouTube video, it takes us about 30 hours on average.
1602340401368530954 2022-12-12 16:31:36 +0000 <alexxubyte> /4 After publishing the books, I experimented with posting on social media (Twitter, LinkedIn, Newsletter, Instagram, Tiktok, etc.). @sahnlam and I also started a YouTube channel. There is incredible growth on most platforms. Focusing on quality is the key to our growth.
1602340398772256771 2022-12-12 16:31:35 +0000 <alexxubyte> /3 It taught me 3 things: 1) How to write technical content people like to read, 2) Good work takes time. Don’t rush it. 3) Follow your intuition.
1602340396276645890 2022-12-12 16:31:35 +0000 <alexxubyte> /2 How did we get here? Before posting anything about system design on social media, I spent 2.5 years writing 2 system design interview books. Writing a good book is incredibly hard and usually not very rewarding, but this turned out to be my best investment.
1602340393093169161 2022-12-12 16:31:34 +0000 <alexxubyte> /1 Our newsletter ByteByteGo just reached an important milestone, and I wanted to share some of the learnings in this journey.  https://t.co/Lr5oDKKWwt
1601822145524342784 2022-12-11 06:12:14 +0000 <alexxubyte> @KRBtweetz Thank you for your kind words, KRB. Appreciate it!
1601616867977633799 2022-12-10 16:36:32 +0000 <alexxubyte> Next week, we will cover: 🔹ChatGPT 🔹Thread vs. process (video) 🔹DDoS 🔹Fallacies of distributed computing 🔹Scaling a distributed queue  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt  https://t.co/1Gx4luFMTb
1601253928569487360 2022-12-09 16:34:21 +0000 <alexxubyte> How does REST API work? What are its principles, methods, constraints, and best practices? I hope the diagram below gives you a quick overview.  Image source:  https://t.co/Bi0iWpu2Lg  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt  https://t.co/LwhTD51W3h
1600892447994695684 2022-12-08 16:37:57 +0000 <alexxubyte> Discover the power of HTTPS and how it keeps your online information safe. Learn the basics in just a few minutes.  The original video from 6 months ago had a few audio issues, so we redid the audio and the animation. Hope you like it.  Watch now on YT:  https://t.co/RQWdMGnOy0  https://t.co/FHaZeUTzoF
1600888025210245120 2022-12-08 16:20:22 +0000 <alexxubyte> @mtrainier2020 Good point. For some reason, Cassandra didn’t come to my mind when it was written.
1600762075055214592 2022-12-08 07:59:54 +0000 <alexxubyte> Edit: Change "Document store" to "Object store"  https://t.co/poNz1q4O6R
1600528255563419652 2022-12-07 16:30:47 +0000 <alexxubyte> /6 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1600528253109751813 2022-12-07 16:30:46 +0000 <alexxubyte> /5 Subscribe to my weekly system design newsletter (10-min read):  https://t.co/cL9Q6tUTac
1600528250706415617 2022-12-07 16:30:46 +0000 <alexxubyte> /4 👉 Over to you: Obviously, I did not cover every type of database. Is there anything else you often use, and why do you choose it?
1600528245807468549 2022-12-07 16:30:44 +0000 <alexxubyte> /3 🔹Graph database. It is suitable for complex relationships between unstructured objects. 🔹Document store. They are good for large immutable data. 🔹Wide column store. They are usually used for big data, analytics, reporting, etc., which needs denormalized data.  https://t.co/CzceUXHuz7
1600528234495430656 2022-12-07 16:30:42 +0000 <alexxubyte> /2 My short summary is as follows: 🔹Relational database. Almost anything could be solved by them. 🔹In-memory store. Their speed and limited data size make them ideal for fast operations. 🔹Time-series database. Store and manage time-stamped data.  https://t.co/usmXNTAItW
1600528222390669315 2022-12-07 16:30:39 +0000 <alexxubyte> /1 How do you decide which type of database to use?  There are hundreds or even thousands of databases available today, such as Oracle, MySQL, MariaDB, SQLite, PostgreSQL, Redis, ClickHouse, MongoDB, S3, Ceph, etc. How do you select the architecture for your system?  https://t.co/gce7f0Iekn
1600182713994002433 2022-12-06 17:37:43 +0000 <alexxubyte> Congratulations @kinlane and @getpostman! I know you have been working on this for a while. Cannot wait to get a copy!
1600169541278892046 2022-12-06 16:45:23 +0000 <alexxubyte> /5 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1600169538913304585 2022-12-06 16:45:22 +0000 <alexxubyte> /4 👉 Over to you: Have you used ElasticSearch in your project, and what is it for?
1600169536459636742 2022-12-06 16:45:21 +0000 <alexxubyte> /3 🔹 Full-text search on StackOverflow  The core of ElasticSearch lies in the data structure and indexing. It is important to understand how ES builds the 𝐭𝐞𝐫𝐦 𝐝𝐢𝐜𝐭𝐢𝐨𝐧𝐚𝐫𝐲 using 𝐋𝐒𝐌 𝐓𝐫𝐞𝐞 (Log-Strucutured Merge Tree).
1600169532449882115 2022-12-06 16:45:20 +0000 <alexxubyte> /2 Features of ElasticSearch: 🔹 Real-time full-text search 🔹 Analytics engine 🔹 Distributed Lucene  ElasticSearch use cases: 🔹 Product search on an eCommerce website 🔹 Log analysis 🔹 Auto completer, spell checker 🔹 Business intelligence analysis 🔹 Full-text search  https://t.co/UGvyKHQVAd
1600169523453100044 2022-12-06 16:45:18 +0000 <alexxubyte> /1 𝐇𝐨𝐰 𝐝𝐨 𝐰𝐞 𝐥𝐞𝐚𝐫𝐧 𝐄𝐥𝐚𝐬𝐭𝐢𝐜𝐒𝐞𝐚𝐫𝐜𝐡?  Based on the Lucene library, Elasticsearch provides search capabilities. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface. The diagram below shows the outline.  https://t.co/POAcFxNshE
1599959750191771648 2022-12-06 02:51:44 +0000 <alexxubyte> @volodarik Thank you, Aleksandr!
1599907012758110210 2022-12-05 23:22:11 +0000 <alexxubyte> @amdev Congratulations!
1599801051615416320 2022-12-05 16:21:08 +0000 <alexxubyte> /5 👉 Over to you: Have you used TSDB before, and what did you use it for? What’s your favorite TSDB?
1599801049140690949 2022-12-05 16:21:07 +0000 <alexxubyte> /4 🔹 In this way, we can quickly aggregate and analyze data based on time and tags.  🔹 Typical usage: - Trades and market data updates in a market - Server metrics - Application performance monitoring - Network data - Sensor data - Events - Clicks streams
1599801045084798983 2022-12-05 16:21:06 +0000 <alexxubyte> /3 A TSDB is a database optimized for time series data.  🔹 From the users’ perspective, the data looks similar to the relational DB table. But behind the scenes, the weather table is stored in 4 TSMs (Time-Structured Merge Trees) in the format of [Measurement, Tag, Field Name].  https://t.co/wg0j7pqBrd
1599801036603916290 2022-12-05 16:21:04 +0000 <alexxubyte> /2 A couple of weeks ago, I had a great discussion with the CEO of TDengine @jhtao about time-series databases. This sparked my interest in learning more about this topic. The diagram below shows the 𝐢𝐧𝐭𝐞𝐫𝐧𝐚𝐥 𝐝𝐚𝐭𝐚 𝐦𝐨𝐝𝐞𝐥 of a typical Time-Series DB.
1599801032061558784 2022-12-05 16:21:03 +0000 <alexxubyte> /1 𝐓𝐢𝐦𝐞-𝐒𝐞𝐫𝐢𝐞𝐬 𝐃𝐁 (TSDB) in 20 lines. What is 𝐓𝐢𝐦𝐞-𝐒𝐞𝐫𝐢𝐞𝐬 𝐃𝐁 (TSDB)? How is it 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 from Relational DB?  https://t.co/fz6n47Zy2c
1599669549515051008 2022-12-05 07:38:35 +0000 <alexxubyte> @Arnaud_Wanet It’s definitely an interesting topic. Will do some research.
1599081380771557377 2022-12-03 16:41:25 +0000 <alexxubyte> Next week, we will cover:  🔹 Time-series DB 🔹 ElasticSearch 🔹 Types of Databases with Use Cases 🔹 How HTTPS Works 🔹 Non-functional Requirements  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/0RYwcKv26q  https://t.co/vmtYh5kn8s
1598714121892962304 2022-12-02 16:22:03 +0000 <alexxubyte> /9 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1598714119393116168 2022-12-02 16:22:03 +0000 <alexxubyte> /8 👉 Over to you: Do you know why Kubernetes is called “k8s”?  Reference: [1]  https://t.co/AW8nRSfcms
1598714116893310988 2022-12-02 16:22:02 +0000 <alexxubyte> /7 3. Kube Proxy kube-proxy is a network proxy that runs on each node in your cluster. It routes traffic coming into a node from the service. It forwards requests for work to the correct containers.
1598714112573177869 2022-12-02 16:22:01 +0000 <alexxubyte> /6 🔹 Nodes  1. Pods A pod is a group of containers and is the smallest unit that k8s administers. Pods have a single IP address applied to every container within the pod.  2. Kubelet An agent that runs on each node in the cluster. It ensures containers are running in a Pod. [1]  https://t.co/E2suH0Vh3v
1598714103135993856 2022-12-02 16:21:59 +0000 <alexxubyte> /5 3. Controller Manager The controller manager runs the controllers, including Node Controller, Job Controller, EndpointSlice Controller, and ServiceAccount Controller.  4. etcd etcd is a key-value store used as Kubernetes' backing store for all cluster data.  https://t.co/3RAG2z49v1
1598714093182910464 2022-12-02 16:21:57 +0000 <alexxubyte> /4 🔹 Control Plane Components  1. API Server The API server talks to all the components in the k8s cluster. All the operations on pods are executed by talking to the API server.  2. Scheduler The scheduler watches the workloads on pods and assigns loads on newly created pods.  https://t.co/PIp2tTl9mF
1598714084437786635 2022-12-02 16:21:55 +0000 <alexxubyte> /3 The worker node(s) host the Pods that are the components of the application workload. The control plane manages the worker nodes and the Pods in the cluster. [1]
1598714081979924486 2022-12-02 16:21:54 +0000 <alexxubyte> /2 A k8s cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node. [1]
1598714077714317314 2022-12-02 16:21:53 +0000 <alexxubyte> /1 What is k8s (Kubernetes)?  k8s is a container orchestration system. It is used for container deployment and management. Its design is greatly impacted by Google’s internal system Borg.  https://t.co/pmHMr4ABvl
1598383587174203393 2022-12-01 18:28:38 +0000 <alexxubyte> @raowaqasakram Thank you for your kind words, Rao. I’m glad to hear my book is helpful.
1598376753537290240 2022-12-01 18:01:29 +0000 <alexxubyte> @themanojdesai Thanks. Adobe after effects and illustrator.
1598358394397552649 2022-12-01 16:48:31 +0000 <alexxubyte> RPC vs. gRPC  A remote procedure call (RPC) enables one machine to invoke some code on another machine as if it is a local function call  gRPC is an open-source RPC framework created by Google in 2016. What makes gRPC so popular?  Watch  here:  https://t.co/bcBHiVqPus  https://t.co/h4qLpDAwAL
1597995160725467136 2022-11-30 16:45:10 +0000 <alexxubyte> 9/ I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1597995158275964928 2022-11-30 16:45:09 +0000 <alexxubyte> 8/ 👉 Over to you: Software is about tradeoffs. If you have to choose between a monolithic and microservice architecture, how do you do it?
1597995155692220416 2022-11-30 16:45:09 +0000 <alexxubyte> 7/ Some of the most controversial definitions of microservices are the exclusive use of a database &amp; making 1000+ RPCs within a single client request.
1597995153142124544 2022-11-30 16:45:08 +0000 <alexxubyte> 6/ At one point, microservice architecture was the golden standard as almost every large tech company moved from monolithic to microservices. But now, companies started to rethink the pros and cons of microservices.
1597995150570987520 2022-11-30 16:45:07 +0000 <alexxubyte> 5/ This is suitable for scaling out the business when the business has substantial growth.  However, since there are many more instances to maintain, microservice architecture needs quite some investment in DevOps.
1597995148025032704 2022-11-30 16:45:07 +0000 <alexxubyte> 4/ In a microservice architecture, each component becomes a self-contained service, maintained by a specialized team. The boundaries between services are clearly defined. The user interface talks to multiple services to get a workflow done.
1597995145521045505 2022-11-30 16:45:06 +0000 <alexxubyte> 3/ In a monolithic architecture, all the components are deployed in one single instance. The service calls are within the same process, and no RPCs. The data tables relating to each component are usually deployed in the same database.
1597995141754540032 2022-11-30 16:45:05 +0000 <alexxubyte> 2/ Suppose we have an eCommerce website that needs to handle the functions below:  🔹 User Management 🔹 Procurement Management 🔹 Order Management 🔹 Inventory Management 🔹 Payments 🔹 Logistics  https://t.co/buelhivegg
1597995132770406400 2022-11-30 16:45:03 +0000 <alexxubyte> 1/ What are the differences between monolithic and microservice architecture?  The diagram compares monolithic and microservice architecture in the ideal world.  https://t.co/DGfDvO4f8E
1597980969700847617 2022-11-30 15:48:46 +0000 <alexxubyte> @surajraina @elonmusk  https://t.co/5tNV7rFv2g
1597635214565466112 2022-11-29 16:54:52 +0000 <alexxubyte> What is a CDN? Why should we developers all take advantage of it? In this video, we will talk about what CDN is and the benefits of CDN, including:  - Improving latency - Reducing bandwidth - Increasing content availability - DDoS protection  Watch it now: https://t.co/OzwSPmAnB2  https://t.co/w8BkuMgsIH
1597630380756324353 2022-11-29 16:35:39 +0000 <alexxubyte> @packyM @Polywork This is pretty cool!
1597268595683520512 2022-11-28 16:38:03 +0000 <alexxubyte> 📚 Cyber Monday Deal 📚  Last chance to get a 30% discount on our system design interview online course. Use code BF2022 at checkout.  Features content from our 𝐛𝐞𝐬𝐭𝐬𝐞𝐥𝐥𝐢𝐧𝐠 books: - Volume 1 - Volume 2 - Volume 3 (in 2023)  Get it here:  https://t.co/ac9KilIDsD  https://t.co/XRnjMoRtsB
1596898254679027712 2022-11-27 16:06:27 +0000 <alexxubyte> Next week, we will cover:  🔹 Cyber Monday 🔹 Monolithic vs. microservice architecture 🔹 What is k8s 🔹 Non-functional requirements 🔹 CDN  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt  https://t.co/shSnUyAn3m
1596545207326998529 2022-11-26 16:43:34 +0000 <alexxubyte> 🎁THANKSGIVING GIVEAWAY🎁 ⏰ Last 24 hours to enter   🔹10 signed books 🔹90 free passes to the online course (content of vol1 + vol2 + vol3 coming in 2023)   𝐇𝐨𝐰 𝐭𝐨 𝐩𝐚𝐫𝐭𝐢𝐜𝐢𝐩𝐚𝐭𝐞: ✅ Follow ✅ Like &amp; Retweet ✅ Subscribe to free newsletter:  https://t.co/l9vQPOVPU2  https://t.co/MdOODVjJ2X
1596309194784706561 2022-11-26 01:05:44 +0000 <alexxubyte> @louthedev Yes, it's available on Amazon:  https://t.co/Y17zAm2cWA
1596292422212157442 2022-11-25 23:59:05 +0000 <alexxubyte> @swissified Thank you, Selim!
1596206731205701632 2022-11-25 18:18:35 +0000 <alexxubyte> We took this course when we built bytebytego .com. This is an excellent way for non-frontend developers to learn CSS. Josh is an excellent teacher who explains things clearly and concisely.
1596179909181071360 2022-11-25 16:32:00 +0000 <alexxubyte> @eth_revolution Yes, we are going to add that.
1596179848363663361 2022-11-25 16:31:46 +0000 <alexxubyte> @Alvinloh8 Yes, it’s valid for 1 year.
1596169333985595392 2022-11-25 15:49:59 +0000 <alexxubyte> 📚 BLACK FRIDAY SALE 📚   The Black Friday sale is now up! Use code BF2022 at checkout for 30% off the system design interview online course. Ends Nov 28.   It features content from two system design books. In 2023, we will add volume 3.   Get it here:  https://t.co/ac9KilZGuD  https://t.co/U6rTmpofgc
1595931755222949889 2022-11-25 00:05:56 +0000 <alexxubyte> @amdev Thank you, Amro. Happy Thanksgiving!
1595817985381634049 2022-11-24 16:33:51 +0000 <alexxubyte> 🎁THANKSGIVING GIVEAWAY 🎁   🔹10 signed books vol1+vol2 🔹90 free passes to the online course (contains content of vol1 + vol2 + vol3 coming out in 2023)   𝐇𝐨𝐰 𝐭𝐨 𝐩𝐚𝐫𝐭𝐢𝐜𝐢𝐩𝐚𝐭𝐞: ✅ Follow ✅ Retweet ✅ Subscribe to our free newsletter:  https://t.co/0RYwcKdZ4q  https://t.co/1yGJUgG6fa
1595457980559814675 2022-11-23 16:43:19 +0000 <alexxubyte> Make sure you subscribe to our weekly newsletter to learn more about QR code login:   https://t.co/dkjDPxrTOt
1595455606743105536 2022-11-23 16:33:53 +0000 <alexxubyte> 10/10 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1595455604369129478 2022-11-23 16:33:52 +0000 <alexxubyte> 9/10 👉 Over to you: nowadays, some website allows you to log in by scanning the QR code using your phone. Do you know how it works?
1595455598320943114 2022-11-23 16:33:51 +0000 <alexxubyte> 8/10 🔹By using SSO (single sign-on), you can sign on only once and log in to multiple websites. It uses CAS (central authentication service) to maintain cross-site information  🔹By using OAuth 2.0, you can authorize one website to access your information on another website  https://t.co/9RsXXUNmgQ
1595455583683239938 2022-11-23 16:33:47 +0000 <alexxubyte> 7/10 🔹JWT is a standard way of representing tokens. This information can be verified and trusted because it is digitally signed. Since JWT contains the signature, there is no need to save session information on the server side.  https://t.co/8aTuXMLlWr
1595455568818278400 2022-11-23 16:33:44 +0000 <alexxubyte> 6/10 🔹To address the compatibility issue, the token can be used. The client sends the token to the server, and the server validates the token. The downside is the token needs to be encrypted and decrypted, which may be time-consuming.  https://t.co/hQ3KOX0g0f
1595455553261535232 2022-11-23 16:33:40 +0000 <alexxubyte> 5/10 🔹A finer control over the login life cycle is session-cookie. The server maintains session storage, and the browser keeps the ID of the session. A cookie usually only works with browsers and is not mobile app friendly.  https://t.co/aW4HjDdsVF
1595455538325618689 2022-11-23 16:33:37 +0000 <alexxubyte> 4/10 From simple to complex, here is my understanding of user identity management:  🔹WWW-Authenticate is the most basic method. You are asked for the username and password by the browser. As a result of the inability to control the login life cycle, it is seldom used today.  https://t.co/KPi2swAEyH
1595455526543839232 2022-11-23 16:33:34 +0000 <alexxubyte> 3/10 Many solutions have been proposed in the past, and the list keeps growing.
1595455524023062529 2022-11-23 16:33:33 +0000 <alexxubyte> 2/10 These terms are all related to user identity management. When you log into a website, you declare who you are (identification). Your identity is verified (authentication), and you are granted the necessary permissions (authorization).
1595455518583029764 2022-11-23 16:33:32 +0000 <alexxubyte> 1/10 Session, cookie, JWT, token, SSO, and OAuth 2.0 - what are they?  https://t.co/3hi8fKB8M3
1595262143800266758 2022-11-23 03:45:08 +0000 <alexxubyte> @Shubham13596 Because cross-border payment can be very slow.
1595258025912082432 2022-11-23 03:28:46 +0000 <alexxubyte> How to learn payment systems? The high-resolution picture can be viewed by subscribing to our newsletter:  https://t.co/0RYwcKv26q  https://t.co/b4WB4qzhAb
1595216223238701057 2022-11-23 00:42:39 +0000 <alexxubyte> I consider Alex to be the most knowledgeable person I know about DynamoDB. Take advantage of this great discount while it lasts.
1595098458293051392 2022-11-22 16:54:42 +0000 <alexxubyte> /10 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1595098455793229836 2022-11-22 16:54:42 +0000 <alexxubyte> /9 Subscribe to our weekly newsletter to learn something new every week:   https://t.co/dkjDPxrTOt
1595098453234704386 2022-11-22 16:54:41 +0000 <alexxubyte> /8 Note: the numbers are based on the back-of-the-envelope estimation we did (not official data).  👉 Over to you: Cyber Monday is coming. What can be done to ensure the shopping sites can handle the spike in traffic during sales?
1595098450755870726 2022-11-22 16:54:40 +0000 <alexxubyte> /7  2️⃣ 𝐋𝐞𝐯𝐞𝐫𝐚𝐠𝐞 𝐩𝐮𝐛𝐥𝐢𝐜 𝐜𝐥𝐨𝐮𝐝 𝐟𝐨𝐫 𝐞𝐥𝐚𝐬𝐭𝐢𝐜 𝐜𝐚𝐩𝐚𝐜𝐢𝐭𝐲 3️⃣ 𝐁𝐚𝐧 𝐛𝐨𝐭𝐬. It reduced the traffic by 95%. 4️⃣ 𝐈𝐧𝐜𝐫𝐞𝐚𝐬𝐞 𝐭𝐡𝐞 𝐛𝐚𝐧𝐝𝐰𝐢𝐝𝐭𝐡 of the system. 5️⃣ 𝐈𝐧𝐜𝐫𝐞𝐚𝐬𝐞 𝐬𝐲𝐬𝐭𝐞𝐦 𝐚𝐯𝐚𝐢𝐥𝐚𝐛𝐢𝐥𝐢𝐭𝐲
1595098446221828096 2022-11-22 16:54:39 +0000 <alexxubyte> /6 In addition, the order query component was moved to GemFire to reduce the load on the order database. Hadoop was used to store historical orders.  https://t.co/jSFlyvB6Q8
1595098434716852233 2022-11-22 16:54:36 +0000 <alexxubyte> /5 To handle the calculation and query in memory, the remaining ticket components were moved entirely to GemFire. It is possible to fit the entire country's train tickets into several Gigabytes of memory.  https://t.co/LeJQl1BcBc
1595098422746308615 2022-11-22 16:54:34 +0000 <alexxubyte> /4 𝐓𝐡𝐞 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧 1️⃣ 𝐒𝐞𝐩𝐚𝐫𝐚𝐭𝐞 𝐫𝐞𝐚𝐝 𝐚𝐧𝐝 𝐰𝐫𝐢𝐭𝐞 𝐫𝐞𝐪𝐮𝐞𝐬𝐭𝐬. Because anxious users kept refreshing the web page to check if there were tickets available, the system could under huge pressure.  https://t.co/Dn2Iy4XCdi
1595098410893205507 2022-11-22 16:54:31 +0000 <alexxubyte> /3 The China Train tickets booking system has 𝐬𝐢𝐦𝐢𝐥𝐚𝐫 𝐜𝐡𝐚𝐥𝐥𝐞𝐧𝐠𝐞𝐬 as the Ticketmaster system:  1️⃣ Very high concurrent visits during peak hours. 2️⃣ The QPS for checking remaining tickets and orders is very high 3️⃣ A lot of bots  https://t.co/nmWmdBR9xv
1595098400722018313 2022-11-22 16:54:28 +0000 <alexxubyte> /2 It’s an interesting problem, so we did some research on this topic. The diagram below shows the evolution of the online China Train ticket booking system.
1595098396221530118 2022-11-22 16:54:27 +0000 <alexxubyte> /1 Last week, Ticketmaster halted public ticket sales of Taylor Swift’s tour due to extraordinarily high demands on ticketing systems.  https://t.co/JYDL5lD5Hx
1594941624261677056 2022-11-22 06:31:30 +0000 <alexxubyte> This week, we will talk about the following:  🔹 Centralized vs. decentralized social network 🔹 Online ticketing platform 🔹 CDN 🔹 Token, Cookie, Session 🔹 Twitter architecture   Subscribe to our weekly newsletter to learn something new every week:   https://t.co/dkjDPxaQMt  https://t.co/xhNBIlo6Ll
1594882507300040704 2022-11-22 02:36:35 +0000 <alexxubyte> @amdev @Psychs Thank you, Amro!
1594874485932335104 2022-11-22 02:04:43 +0000 <alexxubyte> @Psychs Thank you Satoshi 🙏. You are the best!
1594727302281076736 2022-11-21 16:19:52 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1594727299777077261 2022-11-21 16:19:51 +0000 <alexxubyte> /6 👉 Over to you: Decentralized social networks can be controversial. What do you think the future of network networks will be?
1594727297126277122 2022-11-21 16:19:50 +0000 <alexxubyte> /5 Because the network is run by volunteers, the company has 𝐨𝐧𝐥𝐲 𝐨𝐧𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 - its founder Eugen Rochko. It is run by 𝐜𝐫𝐨𝐰𝐝𝐟𝐮𝐧𝐝𝐢𝐧𝐠 and is now supported by 3500 people.
1594727294374813702 2022-11-21 16:19:50 +0000 <alexxubyte> /4 When users register, they must choose a server to start with. Since the servers sync up with each other, users can still receive updates from other servers.
1594727291669487617 2022-11-21 16:19:49 +0000 <alexxubyte> /3 Unlike Twitter, whose servers belong to the Twitter company, Mastodon’s servers do not belong to any company. Its network is composed of servers (instances) from different organizations.
1594727287613665280 2022-11-21 16:19:48 +0000 <alexxubyte> /2 It is said that Trump's new social media platform Truth Social was using the Mastodon.  Mastodon runs 𝐬𝐞𝐥𝐟-𝐡𝐨𝐬𝐭𝐞𝐝 services. It is free and 𝐡𝐚𝐬 𝐧𝐨 𝐚𝐝𝐬. It's MAU increased from 500k in Oct to 1 million in Nov, after Elon Musk’s takeover of Twitter.  https://t.co/zykwHxLsYG
1594727276582576132 2022-11-21 16:19:45 +0000 <alexxubyte> /1 Do we have 𝐚𝐧 𝐚𝐥𝐭𝐞𝐫𝐧𝐚𝐭𝐢𝐯𝐞 for Twitter services?  What is 𝐝𝐞𝐜𝐞𝐧𝐭𝐫𝐚𝐥𝐢𝐳𝐞𝐝 𝐬𝐨𝐜𝐢𝐚𝐥 𝐧𝐞𝐭𝐰𝐨𝐫𝐤 service?  The diagram below shows a comparison between Twitter and Mastodon.  https://t.co/srxpbs1UBx
1594185765461712896 2022-11-20 04:27:59 +0000 <alexxubyte> @mtrainier2020 @thinkingfish Thank you!
1594161936869957634 2022-11-20 02:53:18 +0000 <alexxubyte> @thinkingfish Thank you.
1594146070539296768 2022-11-20 01:50:15 +0000 <alexxubyte> @thinkingfish I couldn’t find comparable info for the 2012 read path. If you are interested in helping to make it more accurate, let me know. I’d love to collaborate on this.
1594095500067631105 2022-11-19 22:29:18 +0000 <alexxubyte> @elonmusk I'd love to write a book about Twitter system architecture. This would make it a great case study for the tech industry. Let me work with your engineers. What do you think?
1594010631308705792 2022-11-19 16:52:04 +0000 <alexxubyte> I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:   https://t.co/jEcprc2891
1594008294976196608 2022-11-19 16:42:47 +0000 <alexxubyte> Twitter Architecture 2012  Source:  https://t.co/cMRgpGrK1y  {2/2}  https://t.co/7Cmu8yaoxj
1594008281340530688 2022-11-19 16:42:44 +0000 <alexxubyte> Twitter Architecture 2022 vs. 2012. What’s changed over the past 10 years?  Thank you, @elonmusk for the transparency.  {1/2}  https://t.co/Fvbn7EDoOS
1593824411437903872 2022-11-19 04:32:06 +0000 <alexxubyte> @jcmi Just sent you a message.
1593821789343600640 2022-11-19 04:21:41 +0000 <alexxubyte> @jcmi It has been a pleasure working with you. I wish you the best of luck on your next adventure.
1593821248328388608 2022-11-19 04:19:32 +0000 <alexxubyte> @m4nl5r Best of luck, Martin!
1593820803195248640 2022-11-19 04:17:45 +0000 <alexxubyte> @DalianaLiu Congratulations on being featured on a major news outlet!
1593639670331547648 2022-11-18 16:18:00 +0000 <alexxubyte> I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:   https://t.co/eexOMgggw9
1593637939027681280 2022-11-18 16:11:07 +0000 <alexxubyte> /11 Please keep in mind this is a highly simplified design. Hope it sparks your interest and curiosity:)
1593637936548876288 2022-11-18 16:11:07 +0000 <alexxubyte> /10 IMAP only downloads a message when you click it, and emails are not deleted from mail servers, meaning that you can access emails from multiple devices. IMAP is the most widely used protocol for individual email accounts.
1593637934053220353 2022-11-18 16:11:06 +0000 <alexxubyte> /9 IMAP is also a standard mail protocol for receiving emails for a local email client. When you read an email, you are connected to an external mail server, and data is transferred to your local device.
1593637931498905600 2022-11-18 16:11:05 +0000 <alexxubyte> /8 The details of POP are covered in RFC 1939. POP requires mail clients to download the entire email. This can take a long time if an email contains a large attachment.
1593637929011752960 2022-11-18 16:11:05 +0000 <alexxubyte> /7 POP is a standard mail protocol to receive and download emails from a remote mail server to a local email client. Once emails are downloaded to your computer or phone, they are deleted from the email server, which means you can only access emails on one computer or phone.
1593637926591598592 2022-11-18 16:11:04 +0000 <alexxubyte> /6 The most popular protocols for retrieving emails are known as Post Office Protocol (POP) and the Internet Mail Access Protocol (IMAP).
1593637924007837696 2022-11-18 16:11:04 +0000 <alexxubyte> /5 If you are unfamiliar with email protocols, here is a short summary:  SMTP: Simple Mail Transfer Protocol (SMTP) is the standard protocol for sending emails from one mail server to another.
1593637920266629122 2022-11-18 16:11:03 +0000 <alexxubyte> /4 3. The Gmail server stores the email and makes it available to Bob, the recipient.  4. Gmail client fetches new emails through the IMAP/POP server when Bob logs in to Gmail.  https://t.co/iBFl96Sn5K
1593637910359683072 2022-11-18 16:11:00 +0000 <alexxubyte> /3 2. Outlook mail server queries the DNS (not shown in the diagram) to find the address of the recipient’s SMTP server. In this case, it is Gmail’s SMTP server. Next, it transfers the email to the Gmail mail server. The communication protocol between the mail servers is SMTP.  https://t.co/uMbuOBUyFY
1593637899936837634 2022-11-18 16:10:58 +0000 <alexxubyte> /2 1. Alice logs in to her Outlook client, composes an email, and presses “send”. The email is sent to the Outlook mail server. The communication protocol between the Outlook client and mail server is SMTP.  https://t.co/qJaCfGHYCj
1593637888834473984 2022-11-18 16:10:55 +0000 <alexxubyte> /1 One picture is worth more than a thousand words. In this post, we will take a look at what happens when Alice sends an 𝐄𝐦𝐚𝐢𝐥 to Bob.  https://t.co/bJKQitkZpQ
1593514125534994432 2022-11-18 07:59:08 +0000 <alexxubyte> @shreyas Congratulations Shreyas! Miss the old days working together at Twitter product safety!
1593440354237177856 2022-11-18 03:05:59 +0000 <alexxubyte> 2/2 and my LinkedIn:  https://t.co/1UXoyavCAf
1593440352907644928 2022-11-18 03:05:59 +0000 <alexxubyte> 1/2 Not sure if Twitter is really going down, but just in case, this is my newsletter and LinkedIn:  https://t.co/urop0Y1Rpz  https://t.co/S9EqiCvvT6
1593366551729606656 2022-11-17 22:12:43 +0000 <alexxubyte> @GergelyOrosz @Pragmatic_Eng @lennysan Listened to it during lunch. Amazing podcast!
1593316068579082240 2022-11-17 18:52:07 +0000 <alexxubyte> @siddheshpg Thank you. We use adobe illustrator and after effects
1593290433341202432 2022-11-17 17:10:15 +0000 <alexxubyte> @jasonchenseeker  https://t.co/wOzzxNVAqk
1593282096692199424 2022-11-17 16:37:08 +0000 <alexxubyte> What is SSO, or Single Sign-On?  With SSO, users can access many apps without having to log in each time.  In this video, we will talk about:  - What is SSO - How it works - Common methods to implement SSO - SAML or OpenID  Watch the whole video here:  https://t.co/UaiMvihDoB  https://t.co/KfzhtvhNBY
1592921968562475008 2022-11-16 16:46:07 +0000 <alexxubyte> I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:  10 of 10
1592921965982928896 2022-11-16 16:46:06 +0000 <alexxubyte> Good read:  https://t.co/hxZb53n9ZQ  9 of 10
1592921963529326592 2022-11-16 16:46:05 +0000 <alexxubyte> 👉 Over to you: Do you use code-first or API-first development in your work?  8 of 10
1592921960966590464 2022-11-16 16:46:05 +0000 <alexxubyte> Because we have designed the API first, the tests can be designed while the code is being developed. In a way, we also have TDD (Test Driven Design) when using API first development.  7 of 10
1592921958366081024 2022-11-16 16:46:04 +0000 <alexxubyte> Developers are happy about the process as well because they can focus on functional development instead of negotiating sudden changes.  The possibility of having surprises toward the end of the project lifecycle is reduced.  6 of 10
1592921955874656256 2022-11-16 16:46:03 +0000 <alexxubyte> 🔹Improve software quality and developer productivity  Since we have ironed out most of the uncertainties when the project starts, the overall development process is smoother, and the software quality is greatly improved.  5 of 10
1592921953366511616 2022-11-16 16:46:03 +0000 <alexxubyte> 🔹Separate functional teams need to speak the same language  The dedicated functional teams are only responsible for their own components and services. It is recommended that the organization speak the same language via API design.  4 of 10
1592921950690557952 2022-11-16 16:46:02 +0000 <alexxubyte> It is better to think through the system's complexity before writing the code and carefully defining the boundaries of the services.  3 of 10
1592921948144574464 2022-11-16 16:46:02 +0000 <alexxubyte> 🔹Microservices increase system complexity  We have separate services to serve different functions of the system. While this kind of architecture facilitates decoupling and segregation of duty, we need to handle the various communications among services.  2 of 10
1592921944818491394 2022-11-16 16:46:01 +0000 <alexxubyte> Code First v.s. API First - A change of software development philosophy.  The diagram below shows the differences between code-first development and API-first development. Why do we want to consider API first design?  1 of 10  https://t.co/HKgSGYLOf9
1592722380694368256 2022-11-16 03:33:01 +0000 <alexxubyte> Twitter is turning down 80% of its microservices. Will this cause a massive outage? Microservices are built to be resilient, but with complex dependencies, it’s hard to say. What do you think?  If you are unfamiliar with microservice, watch here:  https://t.co/5tNV7rFv2g  https://t.co/E6zQ4IupT2
1592692766097936384 2022-11-16 01:35:20 +0000 <alexxubyte> @zaynyatyi I probably should.
1592555447562645506 2022-11-15 16:29:41 +0000 <alexxubyte> I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:  12 of 12
1592555444324573184 2022-11-15 16:29:40 +0000 <alexxubyte> Consistent Hashing | Algorithms You Should Know #1  https://t.co/dH7qeBmOSF  11 of 12  https://t.co/cMmMvRV9Pb
1592555436007227393 2022-11-15 16:29:38 +0000 <alexxubyte> What Is REST API? Examples And How To Use It  https://t.co/tDmb66Dbll  10 of 12  https://t.co/TnlC502SUk
1592555427937427456 2022-11-15 16:29:36 +0000 <alexxubyte> What happens when you type a URL into your browser?  https://t.co/4N0ZVZhz2r  9 of 12  https://t.co/tWJvZml8q4
1592555419280367616 2022-11-15 16:29:34 +0000 <alexxubyte> FAANG System Design Interview: Design A Location Based Service (Yelp, Google Places)  https://t.co/2mYAF4mxSr  8 of 12  https://t.co/Bo5mMWPoQ0
1592555411722227714 2022-11-15 16:29:33 +0000 <alexxubyte> How Does Apple/Google Pay Work?  https://t.co/nwkF1vjL29  7 of 12  https://t.co/CuoUR7gwEY
1592555403476246528 2022-11-15 16:29:31 +0000 <alexxubyte> System Design: Why is single-threaded Redis so fast?  https://t.co/EKqSfmf6a4  6 of 12  https://t.co/VgftMld2JE
1592555393196036097 2022-11-15 16:29:28 +0000 <alexxubyte> What Are Microservices Really All About?  https://t.co/5tNV7rWy4g  5 of 12  https://t.co/ydOLULF6va
1592555384555782144 2022-11-15 16:29:26 +0000 <alexxubyte> Latency Numbers Programmer Should Know  https://t.co/nDfMpKWhkX  4 of 12  https://t.co/PYVnjIB7vp
1592555375571521541 2022-11-15 16:29:24 +0000 <alexxubyte> HTTP/1 to HTTP/2 to HTTP/3  https://t.co/j9lbyDjmOU  3 of 12  https://t.co/RRQivfLa7I
1592555363546542080 2022-11-15 16:29:21 +0000 <alexxubyte> System Design: Why is Kafka fast?  https://t.co/Qz3Pa9PBBc  2 of 12  https://t.co/P7gedyduwf
1592555354688172034 2022-11-15 16:29:19 +0000 <alexxubyte> YouTube channel milestone: 200,000.  Here are the 10 most popular ones: 👇  Subscribe here:  https://t.co/tbxD2f7FLB  1 of 12  https://t.co/VKbZQRnF9u
1592368431432896512 2022-11-15 04:06:33 +0000 <alexxubyte> Since RPC has become a hot topic, let's briefly review its history.   The diagram below illustrates the API timeline and API style comparison.   Over time, different API styles are released. Each of them has its own patterns of standardizing data exchange.  https://t.co/GpdmIUufgY
1592223458716684291 2022-11-14 18:30:29 +0000 <alexxubyte> We will turn this into a YouTube video. Subscribe here so you won't miss it:  https://t.co/tbxD2fpOZJ
1592223306459283456 2022-11-14 18:29:52 +0000 <alexxubyte> @0xocdsec Yes, that's a good idea. Most likely we will turn it into a YT video:  https://t.co/tbxD2fpOZJ
1592193954103013376 2022-11-14 16:33:14 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week:   https://t.co/dkjDPxrTOt  9/9
1592193951603122177 2022-11-14 16:33:14 +0000 <alexxubyte> 👉 Over to you: Do you know which layer is responsible for resending lost data?  8/9
1592193947664687104 2022-11-14 16:33:13 +0000 <alexxubyte> We need layers in the network model because each layer focuses on its own responsibilities. Each layer can rely on the headers for processing instructions and does not need to know the meaning of the data from the last layer.  7/9  https://t.co/IsIxvCKLkG
1592193938974158854 2022-11-14 16:33:11 +0000 <alexxubyte> 🔹 Steps 6-10: When Device B receives the bits from the network, it performs the de-encapsulation process, which is a reverse processing of the encapsulation process. The headers are removed layer by layer, and eventually, Device B can read the data.  6/9  https://t.co/b7fDb54jMG
1592193929566294017 2022-11-14 16:33:08 +0000 <alexxubyte> 🔹 Step 4: The IP datagram is added a MAC header at the data link layer, with source/destination MAC addresses.  🔹 Step 5: The encapsulated frames are sent to the physical layer and sent over the network in binary bits.  5/9  https://t.co/jn7TfqEU9N
1592193920162635776 2022-11-14 16:33:06 +0000 <alexxubyte> 🔹 Step 3: The segments are then encapsulated with an IP header at the network layer. The IP header contains the source/destination IP addresses.  4/9  https://t.co/zbpdnXwvxu
1592193911404888064 2022-11-14 16:33:04 +0000 <alexxubyte> 🔹 Step 2: Then a TCP or a UDP header is added to the data. It is encapsulated into TCP segments at the transport layer. The header contains the source port, destination port, and sequence number.  3/9  https://t.co/aJtIygAvi0
1592193902429163522 2022-11-14 16:33:02 +0000 <alexxubyte> 🔹 Step 1: When Device A sends data to Device B over the network via the HTTP protocol, it is first added an HTTP header at the application layer.  2/9  https://t.co/e5YDkJ9sQv
1592193892530589696 2022-11-14 16:33:00 +0000 <alexxubyte> How is data sent over the network? Why do we need so many layers in the OSI model?  The diagram below shows how data is encapsulated and de-encapsulated when transmitting over the network.  1/9  https://t.co/KU2d2nlWRt
1591981763882254336 2022-11-14 02:30:04 +0000 <alexxubyte> Android users face a huge issue with latency. Why is it not fixed? 2 reasons: 1) CEOs don’t use Android. 2) Slow build-up. After 100 features, the payload is large. Rendering is slow. It's good to raise awareness.  Disclaimer: fig shows a general perf issue. Not real Twitter data  https://t.co/wp2jmvQIkI
1591468420498804736 2022-11-12 16:30:14 +0000 <alexxubyte> Next week, we will cover:  🔹 TCP/IP encapsulation 🔹 How does PING work 🔹 Non-functional requirements 🔹 SQL tips 🔹 SSO (YouTube video)  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt  https://t.co/A0ESVjlGQg
1591108894343933958 2022-11-11 16:41:36 +0000 <alexxubyte> /5 Unlike gRPC or Thrift, which statically generate schemas, Avro makes the data migration process easier.  👉 Over to you: There are so many file formats for big data. Avro vs Parquet vs JSON vs XML vs Protobuf vs ORC. Do you know the differences?
1591108891789602817 2022-11-11 16:41:35 +0000 <alexxubyte> /4 🔹When the exported files are loaded into another data storage (for example, teradata), anyone can read the schema and know how to read the data. The old data and new data can be successfully migrated to the new database.
1591108889226883078 2022-11-11 16:41:35 +0000 <alexxubyte> /3 Key points in the diagram:  🔹We can export the data to 𝐨𝐛𝐣𝐞𝐜𝐭 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐞𝐫 𝐟𝐢𝐥𝐞𝐬, where schema sits together with the data blocks. Avro 𝐝𝐲𝐧𝐚𝐦𝐢𝐜𝐚𝐥𝐥𝐲 generates the schemas based on the columns, so if the schema is changed, a new schema is generated.
1591108886685134850 2022-11-11 16:41:34 +0000 <alexxubyte> /2 Avro was started in 2009, initially as a subproject of Apache Hadoop to address Thrift’s limitation in Hadoop use cases. Avro is mainly used for two things: Data serialization and RPC.
1591108882318864384 2022-11-11 16:41:33 +0000 <alexxubyte> /1 How do we ensure 𝐜𝐨𝐦𝐩𝐚𝐭𝐢𝐛𝐢𝐥𝐢𝐭𝐲 when performing 𝐝𝐚𝐭𝐚 𝐦𝐢𝐠𝐫𝐚𝐭𝐢𝐨𝐧?  The diagram below shows how Apache Avro manages the schema evolution during data migration.  https://t.co/dTZY7QRx2W
1590744265667203077 2022-11-10 16:32:42 +0000 <alexxubyte> Many people love GraphQL, many people hate it. How about you?  In this video, we talk about: - What is GraphQL - When to use it - Trade-offs - GraphQL vs. REST  Watch the YouTube video now:  https://t.co/ZzSPnrwc5L  https://t.co/Vvz8nvd7c3
1590385029019947009 2022-11-09 16:45:13 +0000 <alexxubyte> /10 Subscribe to our weekly newsletter to learn something new every week:  https://t.co/PczMAd8Jdb
1590385026494910464 2022-11-09 16:45:12 +0000 <alexxubyte> /9 Over to you - Which deployment strategy have you used? Did you witness any deployment-related outages in production and why did they happen?
1590385024045436928 2022-11-09 16:45:12 +0000 <alexxubyte> /8 We need to control the deployment process in case some features are pushed to users by accident.
1590385020752887808 2022-11-09 16:45:11 +0000 <alexxubyte> /7 𝐀/𝐁 𝐓𝐞𝐬𝐭  In the A/B test, different versions of services run in production simultaneously. Each version runs an “experiment” for a subset of users. A/B test is a cheap method to test new features in production.  https://t.co/9NDDt3gasr
1590385014184648704 2022-11-09 16:45:09 +0000 <alexxubyte> /6 This process is more complicated because we need to monitor the canary while gradually migrating more and more users away from the old version.
1590385010925744128 2022-11-09 16:45:09 +0000 <alexxubyte> /5 𝐂𝐚𝐧𝐚𝐫𝐲 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭  A canary deployment upgrades services gradually, each time to a subset of users. It is cheaper than blue-green deployment and easy to perform rollback. However, since there is no staging environment, we have to test on production.  https://t.co/Q5mND4Bb4k
1590385003849863170 2022-11-09 16:45:07 +0000 <alexxubyte> /4 Once testing is done in the staging environment, user traffic is switched to the staging environment, and the staging becomes the production. This deployment strategy is simple to perform rollback, but having two identical production quality environments could be expensive.
1590385000637116416 2022-11-09 16:45:06 +0000 <alexxubyte> /3 𝐁𝐥𝐮𝐞-𝐆𝐫𝐞𝐞𝐧 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭  With blue-green deployment, we have two identical environments: one is staging (blue) and the other is production (green). The staging environment is one version ahead of production.  https://t.co/XfIRPbyCQM
1590384993498386432 2022-11-09 16:45:05 +0000 <alexxubyte> /2 𝐌𝐮𝐥𝐭𝐢-𝐒𝐞𝐫𝐯𝐢𝐜𝐞 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭  In this model, we deploy new changes to multiple services simultaneously. This approach is easy to implement. But since all the services are upgraded at the same time, it is hard to manage, test dependencies, and rollback.  https://t.co/Udit2FZADR
1590384986011549696 2022-11-09 16:45:03 +0000 <alexxubyte> /1 Deploying or upgrading services is risky. In this post, we explore risk mitigation strategies.  The diagram below illustrates the common ones.  https://t.co/PLDyBC7MhB
1590145275112611840 2022-11-09 00:52:31 +0000 <alexxubyte> @LBacaj Congratulations! I enjoyed your writing.
1590017660657356800 2022-11-08 16:25:26 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1590017658065276929 2022-11-08 16:25:25 +0000 <alexxubyte> /6 Congratulations on getting this far. Now you know the basics of DDD. If you want to learn more, I highly recommend the book. It might help to simplify the complexity of software modeling.
1590017654747602944 2022-11-08 16:25:24 +0000 <alexxubyte> /5 𝐁𝐞𝐡𝐚𝐯𝐢𝐨𝐫 𝐨𝐟 𝐝𝐨𝐦𝐚𝐢𝐧 𝐨𝐛𝐣𝐞𝐜𝐭𝐬:  🔹Domain Service: orchestrate multiple Aggregate. 🔹Domain Event: a description of what has happened to the Aggregate. The publication is made public so others could consume and reconstruct it.  https://t.co/PoHdeK4PXD
1590017646874963970 2022-11-08 16:25:22 +0000 <alexxubyte> /4 𝐓𝐡𝐞 𝐥𝐢𝐟𝐞 𝐜𝐲𝐜𝐥𝐞 𝐨𝐟 𝐝𝐨𝐦𝐚𝐢𝐧 𝐨𝐛𝐣𝐞𝐜𝐭𝐬:  🔹Repository: storing and loading the Aggregate. 🔹Factory: handling the creation of the Aggregate.  https://t.co/rR7fYSXTna
1590017639115390977 2022-11-08 16:25:20 +0000 <alexxubyte> /3 𝐓𝐡𝐞 𝐜𝐨𝐦𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝐨𝐟 𝐝𝐨𝐦𝐚𝐢𝐧 𝐨𝐛𝐣𝐞𝐜𝐭𝐬:  🔹Entity: a domain object that has ID and life cycle. 🔹Value Object: a domain object without ID. 🔹Aggregate: a collection of Entities that are bounded together by Aggregate Root (which is also an entity).  https://t.co/v4B78hLhEY
1590017631506997248 2022-11-08 16:25:19 +0000 <alexxubyte> /2 DDD was introduced in Eric Evans’ classic book “Domain-Driven Design: Tackling Complexity in the Heart of Software”. It explained a methodology to model a complex business. In this book, there is a lot of content, so I'll summarize the basics.
1590017628378046466 2022-11-08 16:25:18 +0000 <alexxubyte> /1 Have you heard of Domain-Driven Design (DDD), a major software design approach?  https://t.co/Q1G41JObh2
1589791073135915009 2022-11-08 01:25:03 +0000 <alexxubyte> @xufocoder @sahnlam Hey! Thank you very much for the invitation. Very honored. We don’t take podcasts or interviews right now due to a number of upcoming commitments. If things change in the future, I'll let you know. Thank you.
1589744264418037762 2022-11-07 22:19:03 +0000 <alexxubyte> Anyone hiring interns in the United States?   My friend is looking for an internship. He is attending the first year of a Master's program and has worked many years in Japan before moving to the US. He is proficient in C++, Java, and C#. If you are hiring, pm me. Thanks.
1589661287801184256 2022-11-07 16:49:20 +0000 <alexxubyte> /7 Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt
1589661283925643264 2022-11-07 16:49:19 +0000 <alexxubyte> /6 Steps 12 - 14: The order service receives the packets, decodes them, and sends the result to the client application.  👉 Over to you: Have you used gPRC in your project? What are some of its limitations?  https://t.co/qx9vvizlod
1589661272915648512 2022-11-07 16:49:16 +0000 <alexxubyte> /5 Steps 6 - 8: The payment service (gRPC server) receives the packets from the network, decodes them, and invokes the server application.  Steps 9 - 11: The result is returned from the server application, and gets encoded and sent to the transport layer.  https://t.co/XysIwBEUP3
1589661261997887489 2022-11-07 16:49:13 +0000 <alexxubyte> /4 Step 5: gRPC sends the packets over the network via HTTP2. Because of binary encoding and network optimizations, gRPC is said to be 5X faster than JSON.  https://t.co/Ujc59045G8
1589661251071713280 2022-11-07 16:49:11 +0000 <alexxubyte> /3 Steps 2 - 4: The order service (gRPC client) receives the REST call, transforms it, and makes an RPC call to the payment service. gPRC encodes the 𝐜𝐥𝐢𝐞𝐧𝐭 𝐬𝐭𝐮𝐛 into a binary format and sends it to the low-level transport layer.  https://t.co/Ab5mUHxemT
1589661239747129345 2022-11-07 16:49:08 +0000 <alexxubyte> /2 The diagram below illustrates the overall data flow for 𝐠𝐑𝐏𝐂.  Step 1: A REST call is made from the client. The request body is usually in JSON format.  https://t.co/1uTsJZqbns
1589661228502171649 2022-11-07 16:49:06 +0000 <alexxubyte> /1 How does 𝐠𝐑𝐏𝐂 work?  RPC (Remote Procedure Call) is called “𝐫𝐞𝐦𝐨𝐭𝐞” because it enables communications between remote services when services are deployed to different servers. From the user’s point of view, it acts like a local function call  https://t.co/W5FeftgpvE
1589483256399159296 2022-11-07 05:01:54 +0000 <alexxubyte> @bonde_sagar Thank you for your kind words. Glad to hear my posts are helpful 🙌
1589455352038576128 2022-11-07 03:11:01 +0000 <alexxubyte> @bonde_sagar Thank you for sharing, Sagar.
1589137004583071744 2022-11-06 06:06:01 +0000 <alexxubyte> @Gudimanchi YouTube:  https://t.co/HfZPqrRbdq course:  https://t.co/80EUzU8K4p
1588945356897021952 2022-11-05 17:24:28 +0000 <alexxubyte> @DevRodriguez The illustration was made by Semantix. I don't know the exact tools they used, but if we were to make it, we would use Adobe Illustrator and After Effects. Making animations is generally quite time consuming. It would take at least a few hours. Wish there are better tools.
1588917696258666496 2022-11-05 15:34:34 +0000 <alexxubyte> Next week, we will cover: 🔹 RPC - gRPC 🔹 RPC - Avro 🔹 Domain-driven design (DDD) 🔹 SQL optimization 🔹 API first design  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt  https://t.co/OqPRNA0ldI
1588915084847632384 2022-11-05 15:24:11 +0000 <alexxubyte> @championswimmer Thank you for your kind words, Arnav. Glad to hear ByteByteGo resources are helpful. Kind person like you kept us motived!
1588563675891187713 2022-11-04 16:07:49 +0000 <alexxubyte> /2 We are working to compile a list of interview resources and will share out soon.  We also have ByteByteGo's talent collective here (dozens of companies are hiring) and hope this can be helpful:   https://t.co/NLKb8Mo0CB
1588563673215168514 2022-11-04 16:07:48 +0000 <alexxubyte> /1 This week has been rough. Lots of layoffs and hiring freezes. My heart goes out to everyone who is going through this right now. This one event doesn’t define you, and over time you will look back at it as a temporary setback. It's time to reach out to your support network.
1588216140945272832 2022-11-03 17:06:50 +0000 <alexxubyte> @emaxerrno It's great to see the huge performance improvement and the innovation around the streaming platform. It could be very beneficial to the industry!
1588203807254622208 2022-11-03 16:17:49 +0000 <alexxubyte> /11 References: [1] Seastar [2] Redpanda blog [3] ScyllaDB university
1588203804721221632 2022-11-03 16:17:49 +0000 <alexxubyte> /10 Having their own co-operative scheduler means taking full responsibility for managing long-running tasks. It is challenging to ensure that every task takes as short as possible to complete. Any latency impact from errant tasks could be felt throughout the entire stack.
1588203802280095744 2022-11-03 16:17:48 +0000 <alexxubyte> /9 The asynchronous programming model enforced by Seastar makes it even harder to reason about.
1588203799729958914 2022-11-03 16:17:47 +0000 <alexxubyte> /8 💡 Final words  What is the drawback of this new class of software? Performance does not come for free. The level of complexity of this class of software is higher than the ones from the previous generation. C++ is already difficult to program in.
1588203796382949376 2022-11-03 16:17:47 +0000 <alexxubyte> /7 🔹𝐙𝐞𝐫𝐨-𝐜𝐨𝐩𝐲 𝐍𝐞𝐭𝐰𝐨𝐫𝐤𝐢𝐧𝐠 Using SeaStar framework, both products can access network devices directly in user mode, and the kernel is not involved. Zero-copy, zero-lock, and zero-context-switch.  https://t.co/uU7mqYKM9o
1588203787734249472 2022-11-03 16:17:45 +0000 <alexxubyte> /6 🔹𝐒𝐡𝐚𝐫𝐞-𝐧𝐨𝐭𝐡𝐢𝐧𝐠 𝐚𝐫𝐜𝐡𝐢𝐭𝐞𝐜𝐭𝐮𝐫𝐞 Every request is pinned to a CPU core. There is no memory contention between cores. This is also friendly to NUMA (Non-Uniform Memory Access) architecture, so that thread can access the memory closer to the CPU core.  https://t.co/F6QfOZDd3O
1588203779391774720 2022-11-03 16:17:43 +0000 <alexxubyte> /5 Redpanda and ScyllaDB are rewritten from scratch using C++ and leverages some new frameworks (For example, SeaStar). They are hard to code, but can achieve much higher performance .
1588203775797260288 2022-11-03 16:17:42 +0000 <alexxubyte> /4 🔹𝐍𝐨 𝐉𝐕𝐌, 𝐍𝐨 𝐆𝐂 Kafka and Cassandra are written in JVM compatible languages, and usually suffer from high tail latency, where the average latency performs good but 99% latency is not so good due to GC (Garbage Collection).  https://t.co/MOlktZc7aH
1588203766615924736 2022-11-03 16:17:40 +0000 <alexxubyte> /3 Redpanda and ScyllaDB are used as examples in the diagram below. Redpanda can be compared to Kafka, while ScyllaDB is like NoSQL Cassandra.
1588203762945884160 2022-11-03 16:17:39 +0000 <alexxubyte> /2 There is an exciting class of storage software like 𝐑𝐞𝐝𝐩𝐚𝐧𝐝𝐚 and 𝐒𝐜𝐲𝐥𝐥𝐚𝐃𝐁 that boasts at least an order of magnitude improvement in performance.  https://t.co/1Go7XT3iYt
1588203747259260928 2022-11-03 16:17:35 +0000 <alexxubyte> /1 Is it possible to achieve at least a 10x performance boost compared to the original Kafka and Cassandra? How to achieve that? What are the trade-offs?
1587833190365872129 2022-11-02 15:45:07 +0000 <alexxubyte> Very nice illustration of the Data Pipeline by @Semantixai. It may provide some insights into understanding data pipelines.  Join a growing community of more than 150,000 readers who love System Design. Subscribe here:  https://t.co/dkjDPxrTOt  https://t.co/6S7eb86fKx
1587621971763699712 2022-11-02 01:45:49 +0000 <alexxubyte> @kane Google pay has the same issue. We were working on a video about Google pay, and found google kept changing the names and logos over the years, making it extremely difficult to understand its history.  https://t.co/gNMLcmCczp
1587573449240690690 2022-11-01 22:33:00 +0000 <alexxubyte> @GergelyOrosz @Pragmatic_Eng Congratulations 🚀
1587468271917203460 2022-11-01 15:35:04 +0000 <alexxubyte> An API gateway typically provides several important functions.  - authentication and security policy enforcement - load balancing - protocol translation and service discovery - monitoring, logging - caching  Watch the whole video here:  https://t.co/FqFo6CfxiZ  https://t.co/CwkYfXsJbs
1587322094659829760 2022-11-01 05:54:13 +0000 <alexxubyte> @VikasAgr1984 @SheCodeAfrica Thanks. Getting a blue check seems to be difficult. It needs either a Wikipedia page or 3 featured references from “notable” media.
1587168654248259584 2022-10-31 19:44:29 +0000 <alexxubyte> @sarah_edo @SheCodeAfrica Congratulations, Sarah. Just preordered. I'm looking forward to reading it.
1587136574256340993 2022-10-31 17:37:01 +0000 <alexxubyte> @mjackson @ShopifyDevs Congratulations MJ! We tried Remix a while ago. I’m a big fan.
1587121820838215680 2022-10-31 16:38:24 +0000 <alexxubyte> 6/ 𝐋𝐨𝐠𝐠𝐢𝐧𝐠, 𝐦𝐞𝐭𝐫𝐢𝐜𝐬, 𝐚𝐮𝐭𝐨𝐦𝐚𝐭𝐢𝐨𝐧 When working with a small website that runs on a few servers, logging and automation support are good practices but not a necessity. However, now that your site has grown, investing in those tools is essential.  https://t.co/wB4lcPUkPF
1587121811124146177 2022-10-31 16:38:21 +0000 <alexxubyte> 5/ 𝐌𝐞𝐬𝐬𝐚𝐠𝐞 𝐪𝐮𝐞𝐮𝐞 A message queue is a durable component, stored in memory, that supports asynchronous communication.  https://t.co/f2VgaXMkwQ
1587121801313722368 2022-10-31 16:38:19 +0000 <alexxubyte> 4/ 𝐂𝐨𝐧𝐭𝐞𝐧𝐭 𝐝𝐞𝐥𝐢𝐯𝐞𝐫𝐲 𝐧𝐞𝐭𝐰𝐨𝐫𝐤 (𝐂𝐃𝐍) A CDN is a network of geographically dispersed servers used to deliver static content. CDN servers cache static content like images, videos, CSS, JavaScript files, etc.  https://t.co/9SDZCUFYWL
1587121791608053761 2022-10-31 16:38:17 +0000 <alexxubyte> 3/ 𝐂𝐚𝐜𝐡𝐞 A cache is a temporary storage area that stores the result of expensive responses or frequently accessed data in memory so that subsequent requests are served more quickly.  https://t.co/kw4tmfX5eP
1587121780962959360 2022-10-31 16:38:14 +0000 <alexxubyte> 2/ 𝐋𝐨𝐚𝐝 𝐛𝐚𝐥𝐚𝐧𝐜𝐞𝐫 A load balancer evenly distributes incoming traffic among web servers that are defined in a load-balanced set  𝐖𝐞𝐛 𝐬𝐞𝐫𝐯𝐞𝐫𝐬 Web server returns HTML pages or JSON response for rendering  𝐃𝐚𝐭𝐚𝐛𝐚𝐬𝐞𝐬: vertical and horizontal scaling  https://t.co/DW4CEUQ1wv
1587121770506559488 2022-10-31 16:38:12 +0000 <alexxubyte> 1/ How to scale from 0 to millions of users - spooky edition 2  Designing a system that supports millions of users is challenging, and it is a journey that requires continuous refinement and endless improvement. Let’s take a quick look at what are some of the key components.  https://t.co/3Tenk5ccSn
1587103762149040128 2022-10-31 15:26:38 +0000 <alexxubyte> Tell me you are a software engineer without telling me you are an engineer - spooky edition.  Subscribe for candy 👻👻:  https://t.co/dkjDPxrTOt  https://t.co/vVDfcjUsiR
1587074369049632768 2022-10-31 13:29:50 +0000 <alexxubyte> @Chad_R_Stewart @TechIsHiring Feel free to add it. Thanks for the effort!
1586486956451516418 2022-10-29 22:35:40 +0000 <alexxubyte> @khushbooverma_ Congratulations. All the best!
1586383622763732992 2022-10-29 15:45:03 +0000 <alexxubyte> Next week, we will cover:  🔹Super high-performance NoSQL and Message queue 🔹Visualize non-functional requirement 🔹API first design 🔹What is API gateway (YouTube video) 🔹What is a data platform?  Subscribe here:  https://t.co/PczMAd8Jdb  https://t.co/1zcTAl6kXS
1586060756155449344 2022-10-28 18:22:06 +0000 <alexxubyte> Twitter architecture in 2012. Old but might still be relevant.  Note: This post is based on the tech talk given by a Twitter engineer. I redrew the diagram as the original diagram is difficult to read.  Reference:  https://t.co/cMRgpGrK1y  https://t.co/RZ6mdV631N
1586012457234857984 2022-10-28 15:10:11 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1586012454798077952 2022-10-28 15:10:10 +0000 <alexxubyte> /6 👉 Over to you: Do you think PassKey is safer than a password?
1586012452105248768 2022-10-28 15:10:09 +0000 <alexxubyte> /5 Consequently, there is no risk of password leakage since no passwords are stored in the database.  Passkeys are built on 𝐢𝐧𝐝𝐮𝐬𝐭𝐫𝐲 𝐬𝐭𝐚𝐧𝐝𝐚𝐫𝐝𝐬, and it works across different platforms and browsers with a 𝐮𝐧𝐢𝐟𝐨𝐫𝐦 𝐮𝐬𝐞𝐫 𝐞𝐱𝐩𝐞𝐫𝐢𝐞𝐧𝐜𝐞.
1586012448745668608 2022-10-28 15:10:09 +0000 <alexxubyte> /4 🔹Step 2 - sign in with PassKeys on devices  When the user tries to sign in to a website, they use the generated private key. Just select the account information and present the credentials to unlock the private key.  https://t.co/e2nIzhJWvi
1586012440029843456 2022-10-28 15:10:07 +0000 <alexxubyte> /3 🔹Step 1 - create PassKeys  The end-user needs to confirm the account information and present their credentials (face ID, touch ID, etc.).  A private key is generated based on the public key provided by the website. The private key is stored on the device.  https://t.co/Z9qhVSPrmx
1586012431800680449 2022-10-28 15:10:05 +0000 <alexxubyte> /2 Passkeys, also backed by Apple and Microsoft, is claimed to be a significantly 𝐬𝐚𝐟𝐞𝐫 𝐫𝐞𝐩𝐥𝐚𝐜𝐞𝐦𝐞𝐧𝐭 for passwords.  The diagram below shows how PassKeys work.
1586012428122267648 2022-10-28 15:10:04 +0000 <alexxubyte> /1 Is PassKey shaping a 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝𝐥𝐞𝐬𝐬 future?  Google announced PassKey support for both Android and Chrome on 12/10/2022. Paypal announced PassKey support on 25/10/2022.  https://t.co/fGUnywoelY
1585655949309530112 2022-10-27 15:33:33 +0000 <alexxubyte> I would like to thank @Pallet_HQ  for setting up the infrastructure to make this possible! And thanks to @juurutz for guiding me through the process.
1585654906412625920 2022-10-27 15:29:24 +0000 <alexxubyte> The job market is competitive. I see a lot of layoffs. It has been on my mind how we can help people find jobs.  We are creating the ByteByteGo talent collective.  For Candidates: Entirely free. Create a public or anonymous profile. Apply here   https://t.co/M7jvvWD6hs  https://t.co/gcJHWziINJ
1585296537688584193 2022-10-26 15:45:22 +0000 <alexxubyte> /10 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1585296535234891776 2022-10-26 15:45:22 +0000 <alexxubyte> /9 👉 Over to you: Which database do you like the most?
1585296531631972352 2022-10-26 15:45:21 +0000 <alexxubyte> /8 🔹Distributed Tables  CitusData scales Postgres by distributing data &amp; queries.  https://t.co/e0HWBxSGT1
1585296520919670784 2022-10-26 15:45:18 +0000 <alexxubyte> /7 🔹Time Series  Timescale extends PostgreSQL for time series and analytics. For example, developers can combine relentless streams of financial and tick data with other business data to build new apps and uncover unique insights.  https://t.co/KRc8LnuUFA
1585296510727573504 2022-10-26 15:45:16 +0000 <alexxubyte> /6 🔹Geospatial  PostGIS is a spatial database extender for PostgreSQL object-relational database. It adds support for geographic objects, allowing location queries to be run in SQL.  https://t.co/xjNPo2cHx8
1585296501302910976 2022-10-26 15:45:13 +0000 <alexxubyte> /5 🔹Streaming  PipelineDB is a PostgreSQL extension for high-performance time-series aggregation, designed to power real-time reporting and analytics applications.  https://t.co/K3fuTOBGWT
1585296490934640641 2022-10-26 15:45:11 +0000 <alexxubyte> /4 🔹FDW (Foreign Data Wrapper)  A FDW is an extension available in PostgreSQL that allows us to access a table or schema in one database from another.  https://t.co/kg82RPI8y2
1585296480729911296 2022-10-26 15:45:09 +0000 <alexxubyte> /3 🔹OLAP (Online Analytical Processing)  We can use PostgreSQL for analytical processing. PostgreSQL is based on 𝐇𝐓𝐀𝐏 (Hybrid transactional/analytical processing) architecture, so it can handle both OLTP and OLAP well.  https://t.co/hsVnFKFYSY
1585296470537752577 2022-10-26 15:45:06 +0000 <alexxubyte> /2 🔹OLTP (Online Transaction Processing)  We can use PostgreSQL for CRUD (Create-Read-Update-Delete) operations.  https://t.co/j7OH2EUuWO
1585296460072919040 2022-10-26 15:45:04 +0000 <alexxubyte> /1 Why is PostgreSQL voted the 𝐦𝐨𝐬𝐭 𝐥𝐨𝐯𝐞𝐝 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞 by Stackoverflow 2022 Developer Survey?  The diagram shows the many use cases by PostgreSQL - one database that includes almost 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐮𝐬𝐞 𝐜𝐚𝐬𝐞𝐬 developers need.  https://t.co/n1CR2io34b
1585010308359553026 2022-10-25 20:48:00 +0000 <alexxubyte> @KevinNaughtonJr Congratulations, Kevin!
1584933043176755206 2022-10-25 15:40:58 +0000 <alexxubyte> What is a proxy? Why is nginx called a reverse proxy?  In this YouTube video, we will explain the following: 🔹Differences between forward proxy and reverse proxy 🔹Real-world examples 🔹Multi-layer reverse proxies  Watch the whole video here:  https://t.co/dC28RKf8Ce  https://t.co/h6W3i5ELNq
1584769365710614528 2022-10-25 04:50:35 +0000 <alexxubyte> @M_Altarriba MindNode app
1584571191771090944 2022-10-24 15:43:06 +0000 <alexxubyte> Special thanks to @madawei2699. The diagram is based on his post "time in distributed systems" (written in Chinese):  https://t.co/6m8PSHVsUj  https://t.co/STImrM39Mb
1584571183688650753 2022-10-24 15:43:04 +0000 <alexxubyte>  https://t.co/1LWnuOR5ac
1584571175262334976 2022-10-24 15:43:02 +0000 <alexxubyte> You probably think you know what TIME is, but do you know everything about it?  Commonly used time representations include UTC, GMT, TAI, Unix Timestamp, Epoc time, TrueTime, GPS time, etc.  The diagram below illustrates everything you need to know about time/clock.  https://t.co/CFePgFxdvT
1584548030232920066 2022-10-24 14:11:04 +0000 <alexxubyte> @NikkiSiapno Thank you, Nikki!
1584333977678028800 2022-10-24 00:00:30 +0000 <alexxubyte> @KevinNaughtonJr Thank you, Kevin!
1584333890394603520 2022-10-24 00:00:09 +0000 <alexxubyte> @Franc0Fernand0 Thank you, Fernando!
1584333782328320000 2022-10-23 23:59:43 +0000 <alexxubyte> @LBacaj Thank you, Louie!
1584207928600317952 2022-10-23 15:39:37 +0000 <alexxubyte> Congratulations on the #1 spot, @thejustinwelsh Your LinkedIn course is incredible. I learned a lot!  Source:   https://t.co/8Yu4G8R9lt
1584206635295072256 2022-10-23 15:34:29 +0000 <alexxubyte> I got ranked #27 on the top 200 LinkedIn creators List. Thank you, everyone! . Follow me to learn more about system design.  Weekly newsletter:  https://t.co/cL9Q6tUTac Youtube channel:  https://t.co/qi9B0rFpo7  https://t.co/S6FhTq9wYh
1583848006821941248 2022-10-22 15:49:25 +0000 <alexxubyte> Next week, we will cover:  🔹 Why is PostgreSQL loved 🔹 NFR 🔹 Super high-performance DB and MQ 🔹 Proxy vs. reverse proxy (YouTube video) 🔹 Visualization tools  I just sent a weekly system design newsletter to 150,000 readers. Subscribe here:  https://t.co/PczMAd8Jdb  https://t.co/GlqwZTNLbg
1583466394322030592 2022-10-21 14:33:02 +0000 <alexxubyte> markmap link:  https://t.co/fZu49TTIcg
1583466192060104706 2022-10-21 14:32:14 +0000 <alexxubyte> If you use markdown and mindmap, you'll probably like this tool 👇  𝐦𝐚𝐫𝐤𝐦𝐚𝐩 is a free web tool that converts markdown to a beautiful mindmap.  Subscribe to our weekly system design newsletter for updates (5 other visualization tools):  https://t.co/dkjDPxrTOt  https://t.co/SuJv0fFnOY
1583187322610151424 2022-10-20 20:04:06 +0000 <alexxubyte> Rahul is a great teacher and have an incredible career. If you are looking for mentors, check out his startup.
1583119522206142465 2022-10-20 15:34:41 +0000 <alexxubyte> /6 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1583119519811129344 2022-10-20 15:34:41 +0000 <alexxubyte> /5 Over to you: 1). do you know why? 2) Which database system have you used and does it use B-Tree or LSM-Tree?
1583119517323972610 2022-10-20 15:34:40 +0000 <alexxubyte> /4 Level 0 segments are periodically merged into Level 1 segments. This process is called 𝐜𝐨𝐦𝐩𝐚𝐜𝐭𝐢𝐨𝐧.  The biggest difference is probably this:  🔹B-Tree enables faster reads 🔹LSM-Tree enables fast writes
1583119513490366464 2022-10-20 15:34:39 +0000 <alexxubyte> /3 𝐋𝐒𝐌-𝐓𝐫𝐞𝐞  LSM-Tree (Log-Structured Merge Tree) is widely used by many NoSQL databases, such as Cassandra, LevelDB, and RocksDB.  LSM-trees maintain key-value pairs and are persisted to disk using a Sorted Strings Table (SSTable), in which the keys are sorted.  https://t.co/KCquNDipre
1583119501687541761 2022-10-20 15:34:36 +0000 <alexxubyte> /2 𝐁-𝐓𝐫𝐞𝐞  B-Tree is the most widely used indexing data structure in almost all relational databases.  The basic unit of information storage in B-Tree is usually called a “page”. To look up a key, it traces down the range of keys until the actual value is found.  https://t.co/t5SGlMc3AK
1583119489318518786 2022-10-20 15:34:33 +0000 <alexxubyte> /1 What are the differences between B-Tree and LSM-Tree?  https://t.co/uAZyd76kW4
1582952982907211777 2022-10-20 04:32:55 +0000 <alexxubyte> @b0rk Saw this a while ago. People's favorite is "Talk to a rubber duck"  https://t.co/hwJXxRaHfG
1582883721522225153 2022-10-19 23:57:42 +0000 <alexxubyte> @AvieDev Thank you for your kind words, Avie. Glad to hear you find it helpful.
1582759782112296960 2022-10-19 15:45:12 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1582759778182262784 2022-10-19 15:45:12 +0000 <alexxubyte> /7 References:  https://t.co/UB3L7gCoev  https://t.co/3pHQp59Laf  https://t.co/aaJHp8KsE8
1582759770498289664 2022-10-19 15:45:10 +0000 <alexxubyte> /6 👉 Over to you: Is E2EE secure? How do you know your data is not accessible by the government? What chat apps support E2EE?
1582759766728007680 2022-10-19 15:45:09 +0000 <alexxubyte> /5 𝐒𝐞𝐜𝐫𝐞𝐭 𝐜𝐡𝐚𝐭𝐬 𝐚𝐫𝐞 𝐞𝐧𝐝-𝐭𝐨-𝐞𝐧𝐝 𝐞𝐧𝐜𝐫𝐲𝐩𝐭𝐞𝐝  If you choose the “secret chat” option, it is end-to-end encrypted. It has several limitations:  🔸It doesn’t support group chat or normal one-to-one chat. 🔸It is only enabled for mobile devices.  https://t.co/Szt46qmsKx
1582759759215661056 2022-10-19 15:45:07 +0000 <alexxubyte> /4 This means the hacker needs to get message chunks and keys from all places. It is possible but extremely difficult.
1582759756644507648 2022-10-19 15:45:06 +0000 <alexxubyte> /3 🔸The encrypted message is stored in Telegram servers, but split into several pieces and stored in different countries.  🔸The decryption keys are also split and saved in different countries.
1582759752790028288 2022-10-19 15:45:05 +0000 <alexxubyte> /2 𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦'𝐬 𝐮𝐬𝐮𝐚𝐥 𝐩𝐫𝐢𝐯𝐚𝐭𝐞 𝐚𝐧𝐝 𝐠𝐫𝐨𝐮𝐩 𝐜𝐡𝐚𝐭𝐬 𝐚𝐫𝐞𝐧'𝐭 𝐞𝐧𝐝-𝐭𝐨-𝐞𝐧𝐝 𝐞𝐧𝐜𝐫𝐲𝐩𝐭𝐞𝐝  It generally means third parties can intercept and read your messages. Telegram uses the following approach for security:  https://t.co/kgTpvBWHgg
1582759743273070599 2022-10-19 15:45:03 +0000 <alexxubyte> /1 Is Telegram secure?  Let’s first define what “secure” means. A “secure” chat in a messaging App generally means the message is encrypted at the sender side and is only decryptable at the receiver side. It is also called “E2EE” (end-to-end encryption).  https://t.co/6CyB2EH7WP
1582617879551217664 2022-10-19 06:21:20 +0000 <alexxubyte> @NikkiSiapno Great explanation. Love the way you visualize and explain things 👏👏
1582397329297969152 2022-10-18 15:44:57 +0000 <alexxubyte> Apple pay vs. Google pay: which is more secure?  The diagram below shows the differences. To make it easier to understand, we break down the process into two flows.  1. Registering your credit card flow 2. Basic payment flow  Watch the whole video here:  https://t.co/o9bReyHG6o  https://t.co/NTfh41IZ1q
1582035004984418309 2022-10-17 15:45:12 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1582035002375606273 2022-10-17 15:45:12 +0000 <alexxubyte> /7 The client then acks the server for the reception of packet 1. No packets are buffered at this point.  👉 Over to you: Can you think of another use case where RUDP can help?
1582034998852362240 2022-10-17 15:45:11 +0000 <alexxubyte> /6 🔹Steps 6 and 7 - The server doesn’t receive the ack for packet 1 for a while, so it resends packet 1. When the client receives packet 1, all the subsequent packets become effective, so packets 1 and 2 become “𝐝𝐞𝐥𝐢𝐯𝐞𝐫𝐞𝐝”.  https://t.co/HAWyak8nXm
1582034989440376833 2022-10-17 15:45:08 +0000 <alexxubyte> /5 🔹Steps 4 and 5 - Character C opens fire. Packet 2 is sent to the client. Since the last delivered packet is packet 0, the client knows that packet 1 is lost, so packet 2 is 𝐛𝐮𝐟𝐟𝐞𝐫𝐞𝐝 on the client side. The client acks the server for the reception of packet 2  https://t.co/NLUhEGa6C8
1582034980770750465 2022-10-17 15:45:06 +0000 <alexxubyte> /4 🔹Steps 1 and 2 - Character A opens fires. The packet (packet 0) is sent to the client. The client acknowledges the server.  🔹Step 3 - Character B opens fire. The packet is lost during transmission.  https://t.co/ZGjMJ91h0m
1582034973011255296 2022-10-17 15:45:05 +0000 <alexxubyte> /3 Suppose there is a big fight in a simulation shooter game. Characters A, B, and C open fires in sequence. How does the game server transmit the states from the game server to the game client?
1582034970498912256 2022-10-17 15:45:04 +0000 <alexxubyte> /2 The diagram below shows how reliable data delivery is implemented in online gaming to get eventually-synchronized states.
1582034967210573826 2022-10-17 15:45:03 +0000 <alexxubyte> /1 What protocol does 𝐨𝐧𝐥𝐢𝐧𝐞 𝐠𝐚𝐦𝐢𝐧𝐠 use to transmit data? TCP or UDP?  A common practice is to use RUDP (Reliable UDP). It adds a 𝐫𝐞𝐥𝐢𝐚𝐛𝐥𝐞 mechanism on top of UDP so that it provides 𝐦𝐮𝐜𝐡 𝐥𝐨𝐰𝐞𝐫 𝐥𝐚𝐭𝐞𝐧𝐜𝐲 than TCP and guarantees accuracy.  https://t.co/pC7lCownni
1581841641110835200 2022-10-17 02:56:51 +0000 <alexxubyte> @thomasborgers Thank you for sharing. Glad to hear you liked my newsletter.
1581440154467586048 2022-10-16 00:21:29 +0000 <alexxubyte> Re: what tools I use: draw. io and omnigraffle
1581337006059048960 2022-10-15 17:31:36 +0000 <alexxubyte> @lennysan Congratulations! 1 million 🔜!
1581302122716401664 2022-10-15 15:12:59 +0000 <alexxubyte> Next week, we will cover: 🔹 Is Telegram secure? 🔹 Reliable UDP 🔹 B tree v.s. LSM 🔹 Clock in distributed systems 🔹 Google pay vs. Apple pay  Subscribe here:  https://t.co/PczMAd8Jdb  https://t.co/j1WdQU0Flz
1580942840741302273 2022-10-14 15:25:20 +0000 <alexxubyte> This is the flowchart of how slack decides to send a notification.  It is an excellent example of why a simple feature may take much longer.  This might also explain why people don’t get notifications or clear the red dots sometimes.  Img source: slack eng blog  https://t.co/rYGKbM36Xa
1580684430741413891 2022-10-13 22:18:30 +0000 <alexxubyte> @amabdelhamid @Marqeta @Chase Great writeup. Thank you for sharing.
1580649933249515520 2022-10-13 20:01:25 +0000 <alexxubyte> I’ve been a subscriber to Lenny's free newsletter for a while and finally became a paid subscriber. Really enjoyed the content. @lennysan thank you for your incredible effort.   Pretty excited to start improving my product sense!  https://t.co/ApVXtIRpo4
1580585458240585728 2022-10-13 15:45:13 +0000 <alexxubyte> /6 Subscribe to our weekly System Design newsletter to learn something new every week:  https://t.co/dkjDPxrTOt
1580585455677939712 2022-10-13 15:45:13 +0000 <alexxubyte> /5 I’ve listed some companies in different verticals in the diagram. Notice payment companies usually start from one vertical, but later expand to multiple verticals.  👉 Quite a few payment companies offer digital wallets. Can you find a place for wallets in the ecosystem?
1580585451366195202 2022-10-13 15:45:12 +0000 <alexxubyte> /4 🔸Steps 6-8: The issuing process.  The issuing processor talks to the card network on the issuing bank’s behalf. It validates and operates the customer’s account.  https://t.co/9nIZzP4MHH
1580585439722815488 2022-10-13 15:45:09 +0000 <alexxubyte> /3 🔸Steps 2-5: The acquiring process.  The payment gateway accepts the transaction and collects payment info. It is then sent to a payment processor, which uses customer information to collect payments. The acquiring processor sends the transaction to the card network.  https://t.co/x0tKGeH1nA
1580585428075151360 2022-10-13 15:45:06 +0000 <alexxubyte> /2 🔸Steps 0-1: The cardholder opens an account in the issuing bank and gets the debit/credit card. The merchant registers with ISO or MSP (Member Service Provider) for in-store sales. ISO/MSP partners with payment processors to open merchant accounts.  https://t.co/4YTZVCoTfO
1580585416335294469 2022-10-13 15:45:03 +0000 <alexxubyte> /1 How do fintech startups find new opportunities among so many payment companies? What do PayPal, Stripe, and Square do exactly? 👇  https://t.co/ORraFXWZ7w
1580331343656861696 2022-10-12 22:55:28 +0000 <alexxubyte> @etezme This is the only one I can find:  https://t.co/zk3zBLHaXa
1580223030814384129 2022-10-12 15:45:04 +0000 <alexxubyte> No-code tools such as Zapier, IFTTT, etc., allow anyone to build apps and automate workflows using a visual interface.  The flowchart below shows how it works.  Image source: Paper: IFTTT vs. Zapier: A Comparative Study of Trigger-Action Programming Frameworks  https://t.co/xOQtibjWrs
1579862320959737856 2022-10-11 15:51:44 +0000 <alexxubyte> What does a typical microservices architecture look like? And when should we use it? Let’s take a look.  Microservices are loosely coupled. Each service handles a dedicated function inside a large-scale application.  Watch the whole video here:  https://t.co/qrF6q3MuDR  https://t.co/NjyiccGexV
1579497390905516034 2022-10-10 15:41:38 +0000 <alexxubyte> /9 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1579497388493795329 2022-10-10 15:41:37 +0000 <alexxubyte> /8 Over to you: Web 3.0 is controversial. What do you think of it? Is it the future, a scam, or a little bit of both?
1579497385989877761 2022-10-10 15:41:37 +0000 <alexxubyte> /7 If apps want to access the data, they need to get 𝐚𝐮𝐭𝐡𝐨𝐫𝐢𝐳𝐚𝐭𝐢𝐨𝐧 from the users and 𝐩𝐚𝐲 for it.  In Web 3.0, the ownership change may lead to some major innovations.
1579497382252666880 2022-10-10 15:41:36 +0000 <alexxubyte> /6 🔹Web 3.0 - Read Write Own  The idea has been discussed a lot recently due to the development of blockchain and decentralized apps. The creators’ content is stored on IPFS (InterPlanetary File System) and 𝐨𝐰𝐧𝐞𝐝 𝐛𝐲 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫𝐬.  https://t.co/uVTQkleEzp
1579497374723977217 2022-10-10 15:41:34 +0000 <alexxubyte> /5 That’s why people say the apps know you better than your friends, family, or even yourself.
1579497372190576640 2022-10-10 15:41:33 +0000 <alexxubyte> /4 Because the apps digitalize human behaviors and persist user data when users interact with these apps, big companies leverage user data for advertisements, which becomes 𝐨𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐦𝐚𝐢𝐧 𝐛𝐮𝐬𝐢𝐧𝐞𝐬𝐬 𝐦𝐨𝐝𝐞𝐥𝐬 in Web 2.0.
1579497368487022592 2022-10-10 15:41:32 +0000 <alexxubyte> /3 🔹Web 2.0 - Read Write  From 2004 to now, the internet has evolved to have search engines, social media apps, and recommendation algorithms backed apps.  https://t.co/df2446iVC9
1579497358890409986 2022-10-10 15:41:30 +0000 <alexxubyte> /2 🔹Web 1.0 - Read Only  Between 1991 and 2004, the internet is like a 𝐜𝐚𝐭𝐚𝐥𝐨𝐠 of 𝐬𝐭𝐚𝐭𝐢𝐜 𝐩𝐚𝐠𝐞𝐬. We can browse the content by jumping from one hyperlink to another. It doesn’t provide any interactions with the content.  https://t.co/1AhjEtAJ7j
1579497349490954240 2022-10-10 15:41:28 +0000 <alexxubyte> /1 𝐖𝐡𝐚𝐭 𝐢𝐬 𝐖𝐞𝐛 3.0? Why doesn’t it have 𝐚𝐝𝐬?  The diagram below shows Web 1.0/Web 2.0/Web 3.0 from a bird's-eye view.  https://t.co/0D0kn9fdfQ
1579130076188139520 2022-10-09 15:22:03 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1579130071373123584 2022-10-09 15:22:02 +0000 <alexxubyte> /6 Algorithms you should know for System Design:  https://t.co/Nx42T5wROu  https://t.co/pPLDsSfHnz
1579130055959068674 2022-10-09 15:21:58 +0000 <alexxubyte> /5 What happens when you swipe a credit card? https://t.co/5uyIeA7KKS  https://t.co/MzDN9YZqRB
1579130046790320129 2022-10-09 15:21:56 +0000 <alexxubyte> /4 Latency numbers you should know:  https://t.co/k9JbC6TIxf  https://t.co/qKsLGCHDJR
1579130038661705729 2022-10-09 15:21:54 +0000 <alexxubyte> /3 Design patterns cheat sheet:  https://t.co/ihwA9EBcl6  https://t.co/gkc9UmVAzy
1579130028092030977 2022-10-09 15:21:52 +0000 <alexxubyte> /2 Proxy vs reverse proxy:  https://t.co/Bej79OVpom  https://t.co/P2TZiLLSeu
1579130017455300608 2022-10-09 15:21:49 +0000 <alexxubyte> /1 I’ve been writing the system design newsletter for 6 months. Here are the 5 most popular ones:  👇  Link:  https://t.co/0RYwcKv26q  https://t.co/VNjSq7DLaE
1578764985911545859 2022-10-08 15:11:19 +0000 <alexxubyte> Next week, we will cover:  🔹Is encrypted messenger really secure? 🔹API's API - Zapier 🔹web1 - web2 - web3 🔹SQL 🔹What are microservices really all about?  Join a growing community of more than 150,000 readers who love System Design. Subscribe here:   https://t.co/PczMAd8Jdb  https://t.co/Aro3DC4naS
1578485551535005696 2022-10-07 20:40:56 +0000 <alexxubyte> @MudiHussein Definitely an interesting topic to cover. Will do some research and hope to write something about it soon!
1578436258233085953 2022-10-07 17:25:04 +0000 <alexxubyte> Should we take counteroffers? Interesting thread by Louie, from the manager’s standpoint.
1578409013665927168 2022-10-07 15:36:48 +0000 <alexxubyte> Incredible Digital Art Painting! When arts meet technology. By @Vaskange   Over to you: How to design infinite stories like this?  https://t.co/EZIasACPD1
1578025946367467520 2022-10-06 14:14:38 +0000 <alexxubyte> /5 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1578025943888646147 2022-10-06 14:14:37 +0000 <alexxubyte> /4 👉 Over to you: Can you name one column-based DB that you have used? What do you use it for?
1578025941313331204 2022-10-06 14:14:37 +0000 <alexxubyte> /3 𝐁𝐞𝐧𝐞𝐟𝐢𝐭𝐬 𝐨𝐟 𝐜𝐨𝐥𝐮𝐦𝐧-𝐛𝐚𝐬𝐞𝐝 𝐃𝐁  1️⃣ Higher data compression rates. 2️⃣ Higher performance on OLAP functions. 3️⃣ No need for additional indexes
1578025938654154753 2022-10-06 14:14:36 +0000 <alexxubyte> /2 𝐖𝐡𝐞𝐧 𝐭𝐨 𝐮𝐬𝐞  1️⃣ The table is a wide table with many columns. 2️⃣ The queries and calculations are on a small number of columns. 3️⃣ A lot of the columns contain a few distinct values.
1578025934652743680 2022-10-06 14:14:35 +0000 <alexxubyte> /1 Why do we use 𝐜𝐨𝐥𝐮𝐦𝐧-𝐛𝐚𝐬𝐞𝐝 𝐃𝐁? Does column-based DB provide better performance?  The diagram below shows how data is stored in column-based DB.  https://t.co/78xIBU09Qq
1577748044333780992 2022-10-05 19:50:21 +0000 <alexxubyte> @espanicon Yes, reverse proxy would be more accurate.
1577690438173044737 2022-10-05 16:01:27 +0000 <alexxubyte> Also drew a version like this. Which one do you like?  https://t.co/uvcEEpuwr6
1577688810246537216 2022-10-05 15:54:59 +0000 <alexxubyte> @shanselman Great podcast!  https://t.co/cdGaAYYfNx
1577684787661131776 2022-10-05 15:39:00 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1577684785157136384 2022-10-05 15:38:59 +0000 <alexxubyte> /6 Reference: [1] Podcast by @rla4 and@shanselman:  https://t.co/cdGaAZfiPx [2]  https://t.co/tG9ExnyX3c
1577684782678351872 2022-10-05 15:38:58 +0000 <alexxubyte> /5 👉 Over to you: what is good architecture, the one that looks fancy during the interview or the one that works in reality?
1577684778932793345 2022-10-05 15:38:57 +0000 <alexxubyte> /4 𝐖𝐡𝐚𝐭 𝐢𝐭 𝐚𝐜𝐭𝐮𝐚𝐥𝐥𝐲 𝐢𝐬 Stack Overflow serves all the traffic with only 9 on-premise web servers, and it’s on monolith! It has its own servers and does not run on the cloud.  This is contrary to all our popular beliefs these days.  https://t.co/326qYYsmEG
1577684771479511040 2022-10-05 15:38:56 +0000 <alexxubyte> /3 3. The service is sharded. 4. The services talk to each other asynchronously through message queues. 5. The service is implemented using Event Sourcing with CQRS. 6. Showing off knowledge in distributed systems such as eventual consistency, CAP theorem, etc.
1577684767536881665 2022-10-05 15:38:55 +0000 <alexxubyte> /2 𝐖𝐡𝐚𝐭 𝐩𝐞𝐨𝐩𝐥𝐞 𝐭𝐡𝐢𝐧𝐤 𝐢𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐥𝐨𝐨𝐤 𝐥𝐢𝐤𝐞  The interviewer is probably expecting something at the top.  1. Microservice is used to decompose the system into small components. 2. Each service has its own database. Use cache heavily.  https://t.co/EK2FCK9T60
1577684758779203584 2022-10-05 15:38:53 +0000 <alexxubyte> /1 How will you design the Stack Overflow website? If your answer is on-premise servers and monolith (bottom), you would likely fail the interview, but that's how it is built in reality!  https://t.co/gygb1HbzxN
1577464785473396737 2022-10-05 01:04:47 +0000 <alexxubyte> @SeattleDataGuy @SubstackInc @GergelyOrosz @Pragmatic_Eng Congratulations 🎉
1577315917666451456 2022-10-04 15:13:14 +0000 <alexxubyte> Latency Numbers Every Programmer Should Know for the 2020s  We updated some of these numbers to more closely reflect reality in the 2020s. Absolute accuracy is not the goal. Developing an intuition of the relative differences is.  Watch here:  https://t.co/njJwgBm4XA  https://t.co/yuNGH3oiGg
1577151648001970176 2022-10-04 04:20:29 +0000 <alexxubyte> New YouTube video coming out tomorrow. Subscribe now so you won't miss it :)  Link:  https://t.co/sJLcS1WYxa  https://t.co/TaVrrXmLfK
1576961101941481472 2022-10-03 15:43:19 +0000 <alexxubyte> /6 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1576961099361943553 2022-10-03 15:43:19 +0000 <alexxubyte> /5 Disclaimer: This post is based on an article from PingCAP (a ByteByteGo newsletter sponsor). If you are interested in learning more, please check out their in-person HTAP database summit (free) in Mountain View, California:  https://t.co/dQjDowMSTM
1576961096908275712 2022-10-03 15:43:18 +0000 <alexxubyte> /4 Over to you: choosing the database is hard. The view might be controversial. How do you usually pick the right DB?
1576961092688879616 2022-10-03 15:43:17 +0000 <alexxubyte> /3 - Big data analytical systems, like Hive and Impala - Other databases, like MongoDB, HiGraph, and TiKV  The database selection trees below explain how they choose a database.  https://t.co/yhNJdREWy3
1576961084451192832 2022-10-03 15:43:15 +0000 <alexxubyte> /2 The following databases are used at iQIYI: - MySQL - Redis - TiDB: a hybrid transactional/analytical processing (HTAP) distributed database - Couchbase: distributed multi-model NoSQL document-oriented database - TokuDB: open-source storage engine for MySQL and MariaDB.
1576961080454021121 2022-10-03 15:43:14 +0000 <alexxubyte> /1 One picture is worth a thousand words. Interesting database selection trees.  iQIYI is one of the largest online video sites in the world, with over 500 million monthly active users. Let's look at how they choose relational and NoSQL databases.  https://t.co/Qg0sTgAkr4
1576275190564036609 2022-10-01 18:17:45 +0000 <alexxubyte> @sagarjvora @dxhuang @ifesdjeen @therealdatabass I like those two books as well.  https://t.co/qvXU4ekx6E
1576236914604064768 2022-10-01 15:45:40 +0000 <alexxubyte> We are so grateful for the continued support of @getpostman. Learn about their service by visiting  https://t.co/u4A0FabinA  @kinlane, it’s been a pleasure working with you. Would love to co-collaborate some content in the API space.  Check out this awesome infographic by Postman.  https://t.co/LuiRX6D1tG
1576236887278178304 2022-10-01 15:45:33 +0000 <alexxubyte> Next week, we will cover: 🔹Column-based DB 🔹Typical data-intensive architecture 🔹Stack Overflow: The Architecture 🔹SQL optimization tips 🔹Latency numbers you should know (video)  Subscribe to the newsletter here:  https://t.co/0RYwcKv26q  https://t.co/GqlSl6EzGI
1576216581591310338 2022-10-01 14:24:52 +0000 <alexxubyte> @NechitaGabriel Already did this in the welcome email, but I guess we can occasionally mention this in the newsletter itself as well. Thank you!
1576216091365232640 2022-10-01 14:22:55 +0000 <alexxubyte> @Franc0Fernand0 Yes, reading from the substack app can work. Good luck with your newsletter!
1576092381841018882 2022-10-01 06:11:20 +0000 <alexxubyte> Spent 2 hours editing tomorrow's newsletter text so it won’t end up in the promotional folder. Findings. Gmail doesn’t like:   - Amazon links - “Also”, “And” in the title - Images that contain YouTube -  Word “payment” - Too many headings   If you have any tips, please share :)  https://t.co/c3NyZTrRIQ
1576083905756598273 2022-10-01 05:37:40 +0000 <alexxubyte> If you like gaming, infra, or creator innovation, you might like this podcast as well. Highly recommend it!
1576018025634926592 2022-10-01 01:15:52 +0000 <alexxubyte> @dxhuang @ifesdjeen @therealdatabass I’m a big fan of @ifesdjeen book. Read it a couple of times.  https://t.co/VSGTxVXpHr
1575874940443643904 2022-09-30 15:47:18 +0000 <alexxubyte> /9 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1575874937964748802 2022-09-30 15:47:18 +0000 <alexxubyte> /8 👉 Over to you: I’ve marked one of the scan-to-pay scenarios with a red alert symbol to indicate that a risk is present. Do you know why it is high risk?
1575874935456530432 2022-09-30 15:47:17 +0000 <alexxubyte> /7 So there are 2*2=4 ways to scan a QR code, which are:  1. Consumer-presented mode + static QR code 2. Consumer-presented mode + dynamic QR code 3. Merchant-presented mode + static QR code 4. Merchant-presented mode + dynamic QR code
1575874931627204610 2022-09-30 15:47:16 +0000 <alexxubyte> /6 2. A static QR code is generated once and used everywhere. Usually, it only contains the account information.  https://t.co/9qmqcWpLr2
1575874923733536770 2022-09-30 15:47:14 +0000 <alexxubyte> /5 1. A dynamic QR code means the QR code will be generated when you present it, or it will automatically regenerate every few seconds. Because it is dynamically generated, it may contain rich information, such as the amount due, transaction type, etc.  https://t.co/zYENQ5M2TC
1575874916779368450 2022-09-30 15:47:13 +0000 <alexxubyte> /4 The second question is whether the QR code is dynamic or static:
1575874913344245760 2022-09-30 15:47:12 +0000 <alexxubyte> /3 2. Obviously, the other way is that the merchant presents the QR code for you to scan to pay the due amount. This is called ‘merchant-presented mode’ and you grant the direct credit from your account.  https://t.co/DCKVN12NVY
1575874898043338752 2022-09-30 15:47:08 +0000 <alexxubyte> /1 Payment through scanning QR code is very common but do you know how many ways there are to do it?  There are 4 ways, no matter whether you’re using PayPal, Stripe, Paytm, WeChat, or Alipay. Is this surprising to you? To understand this, we will answer to questions.  https://t.co/eecwFLZHKU
1575512019842740224 2022-09-29 15:45:11 +0000 <alexxubyte> /6 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1575512017347018753 2022-09-29 15:45:11 +0000 <alexxubyte> /5 Over to you: What’s the difference between reverse proxy and load balancer? What are some of the most popular proxy servers?
1575512012859113473 2022-09-29 15:45:10 +0000 <alexxubyte> /4 A reverse proxy is good for: 1️⃣ Protect servers 2️⃣ Load balancing 3️⃣ Cache static contents 4️⃣ Encrypt and decrypt SSL communications  Good read:  https://t.co/bNbDjTmain  https://t.co/NHDla6sFi5
1575512000326615040 2022-09-29 15:45:07 +0000 <alexxubyte> /3 🔹 A reverse proxy is a server that accepts a request from the client, forwards the request to web servers, and returns the results to the client as if the proxy server had processed the request.
1575511997772283904 2022-09-29 15:45:06 +0000 <alexxubyte> /2 🔹 A forward proxy is a server that sits between user devices and the internet.  A forward proxy is good for:  1️⃣ Protect clients 2️⃣ Avoid browsing restrictions 3️⃣ Block access to certain content
1575511993414389762 2022-09-29 15:45:05 +0000 <alexxubyte> /1 Why is Nginx called a “𝐫𝐞𝐯𝐞𝐫𝐬𝐞” proxy?  The diagram below shows the differences between a 𝐟𝐨𝐫𝐰𝐚𝐫𝐝 𝐩𝐫𝐨𝐱𝐲 and a 𝐫𝐞𝐯𝐞𝐫𝐬𝐞 𝐩𝐫𝐨𝐱𝐲.  https://t.co/k8xQwBVgW2
1575358863775178752 2022-09-29 05:36:36 +0000 <alexxubyte> @jaberwaki You are right. BigTable shouldn’t be there. Thank you.
1575194532173426689 2022-09-28 18:43:36 +0000 <alexxubyte> @ayo_the_elite Great question. I think that's an open question since the CAP theorem doesn't define the behaviors in single server mode. We can say CA system doesn't exist because a node can go down. We can also argue CA system exists because there won't be a network partition for single server
1575150658071601153 2022-09-28 15:49:16 +0000 <alexxubyte> /10 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1575150655525687296 2022-09-28 15:49:15 +0000 <alexxubyte> /9 𝐈𝐬 𝐭𝐡𝐞 𝐂𝐀𝐏 𝐭𝐡𝐞𝐨𝐫𝐞𝐦 𝐚𝐜𝐭𝐮𝐚𝐥𝐥𝐲 𝐮𝐬𝐞𝐟𝐮𝐥?  I think it is still useful as it opens our minds to a set of tradeoff discussion, but it is only part of the story. We need to dig deeper when picking the right database  Over to you: do you think CAP is useful?
1575150652266663937 2022-09-28 15:49:15 +0000 <alexxubyte> /8 3. The theorem is about 100% availability and consistency. A more realistic discussion would be the trade-offs between latency and consistency when there is no network partition. See PACELC theorem for more details.
1575150649783615488 2022-09-28 15:49:14 +0000 <alexxubyte> /7 2. “CAP prohibits only a tiny part of the design space: perfect availability and consistency in the presence of partitions, which are rare”. Quoted from the paper: CAP Twelve Years Later: How the “Rules” Have Changed.
1575150647325794304 2022-09-28 15:49:13 +0000 <alexxubyte> /6 1. Picking a database is not easy. Justifying our choice purely based on the CAP theorem is not enough. e.g., companies don't choose Cassandra for chat applications simply because it is an AP system. There is a list of good characteristics that make it a desirable option.
1575150644905668608 2022-09-28 15:49:13 +0000 <alexxubyte> /5 The “2 of 3” formulation can be useful, 𝐛𝐮𝐭 𝐭𝐡𝐢𝐬 𝐬𝐢𝐦𝐩𝐥𝐢𝐟𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐜𝐨𝐮𝐥𝐝 𝐛𝐞 𝐦𝐢𝐬𝐥𝐞𝐚𝐝𝐢𝐧𝐠.
1575150642305171456 2022-09-28 15:49:12 +0000 <alexxubyte> /4 𝐏𝐚𝐫𝐭𝐢𝐭𝐢𝐨𝐧 𝐓𝐨𝐥𝐞𝐫𝐚𝐧𝐜𝐞: a partition indicates a communication break between two nodes. Partition tolerance means the system continues to operate despite network partitions.
1575150639763443712 2022-09-28 15:49:12 +0000 <alexxubyte> /3 𝐀𝐯𝐚𝐢𝐥𝐚𝐛𝐢𝐥𝐢𝐭𝐲: availability means any client which requests data gets a response even if some of the nodes are down.
1575150637184012288 2022-09-28 15:49:11 +0000 <alexxubyte> /2 CAP theorem states that a distributed system can't provide more than two of these three guarantees simultaneously.  𝐂𝐨𝐧𝐬𝐢𝐬𝐭𝐞𝐧𝐜𝐲: consistency means all clients see the same data at the same time no matter which node they connect to.
1575150633358802944 2022-09-28 15:49:10 +0000 <alexxubyte> /1 The CAP theorem is one of the most famous terms in computer science, but I bet different developers have different understandings. Let’s examine what it is and why it can be confusing.  https://t.co/nFg7w9GPuf
1574785445052891136 2022-09-27 15:38:02 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1574785441512927233 2022-09-27 15:38:02 +0000 <alexxubyte> /7 Step 6: Finally, the video starts to arrive at the viewer’s video player.  Step 7-8: To support replay, videos can be optionally stored in storage such as Amazon S3.  YouTube video link:  https://t.co/sDfRbPJNc6  @nick_zimmerman, greatly appreciate your comments on the script!  https://t.co/Ayo858hUNf
1574785433606959104 2022-09-27 15:38:00 +0000 <alexxubyte> /6 Step 4: The video segments are packaged into different live streaming formats that video players can understand. The most common live-streaming format is HLS, or HTTP Live Streaming  Step 5: The resulting HLS manifest and chunks from the packaging step are cached by the CDN  https://t.co/d8zH8uHBts
1574785425352273920 2022-09-27 15:37:58 +0000 <alexxubyte> /5 Step 3: The incoming video stream is transcoded to different resolutions, and divided into smaller video segments a few seconds in length.  https://t.co/wNtvOWWAxr
1574785417596977152 2022-09-27 15:37:56 +0000 <alexxubyte> /4 Step 2: To provide the best upload condition for the streamer, most live streaming platforms provide point-of-presence servers worldwide. The streamer connects to a point-of-presence server closest to them.  https://t.co/cKuoVak2OR
1574785409711603712 2022-09-27 15:37:54 +0000 <alexxubyte> /3 The diagram below explains what happens behind the scenes to make this possible.  Step 1: The streamer starts their stream. The source could be any video and audio source wired up to an encoder  https://t.co/Q0DvDtY88p
1574785402048679937 2022-09-27 15:37:52 +0000 <alexxubyte> /2 Live streaming is challenging because the video content is sent over the internet in near real-time. Video processing is compute-intensive. Sending a large volume of video content over the internet takes time. These factors make live streaming challenging.
1574785398730985472 2022-09-27 15:37:51 +0000 <alexxubyte> /1 How live streaming works (YouTube live, TikTok live, Twitch streaming)  You can watch and subscribe here:  https://t.co/sDfRbPJNc6  If you prefer text, keep reading:  https://t.co/Ep4VWvyuMY
1574426113463373824 2022-09-26 15:50:11 +0000 <alexxubyte> /5 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1574426110976176128 2022-09-26 15:50:10 +0000 <alexxubyte> /4 👉 Over to you: Should we cache content frequently changed at the CDN node?
1574426108417626112 2022-09-26 15:50:10 +0000 <alexxubyte> /3 The benefits of CDN are:  1. Improving latency 2. Reducing bandwidth 3. Improving website security, especially protecting against DDoS (Distributed Denial-of-Service) attack 4. Increasing content availability
1574426105892569090 2022-09-26 15:50:09 +0000 <alexxubyte> /2 With CDN, users don’t need to retrieve content (music, video, files, pictures, etc.) from the origin server. Instead, the content is cached at CDN nodes around the globe, and users can retrieve the content from nearby CDN nodes.
1574426102256218112 2022-09-26 15:50:08 +0000 <alexxubyte> /1 What is 𝐂𝐃𝐍 (Content Delivery Network)? How does CDN make content delivery 𝐟𝐚𝐬𝐭𝐞𝐫?  The diagram below shows why  A CDN refers to geographically distributed servers (edge servers) that provide fast delivery of 𝐬𝐭𝐚𝐭𝐢𝐜 𝐚𝐧𝐝 𝐝𝐲𝐧𝐚𝐦𝐢𝐜 𝐜𝐨𝐧𝐭𝐞𝐧𝐭  https://t.co/S9lJStMMD7
1573691270794313728 2022-09-24 15:10:11 +0000 <alexxubyte> Next week, we will cover:  ► QR code payment ► Reverse proxy ► How CDN works ► CAP Theorem ► Live streaming system (YouTube video)  Subscribe to our weekly newsletter (100,000) at:  https://t.co/dkjDPxrTOt  https://t.co/B03Sq36YVK
1573332234613846017 2022-09-23 15:23:30 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1573332232055332865 2022-09-23 15:23:29 +0000 <alexxubyte> /6 3️⃣ Serving pipeline Step 11: The blurred images can now be retrieved by users.  Over to you: Can you think of other objects (maybe houses) that should be blurred in street view images?
1573332228196532225 2022-09-23 15:23:28 +0000 <alexxubyte> /5 2️⃣ Blurring pipeline Steps 7-10: The street view images go through preprocessing, and object boundaries are detected in the images. Then sensitive objects are blurred, and the images are stored in an object store.  https://t.co/MBOtCrpQKX
1573332215810822144 2022-09-23 15:23:26 +0000 <alexxubyte> /4 Steps 5-6: The annotated dataset is then used to train the machine learning model, a 2-stage network.
1573332211574579200 2022-09-23 15:23:24 +0000 <alexxubyte> /3 1️⃣ Data pipeline Step 1: We get the annotated dataset for training. The objects are marked in bounding boxes.  Steps 2-4: The dataset goes through preprocessing and augmentation to be normalized and scaled.  https://t.co/XCZN9zm43w
1573332198748344320 2022-09-23 15:23:21 +0000 <alexxubyte> /2 The high-level architecture is broken down into three stages: 1. Data pipeline - prepare training data set  2. Blurring pipeline - extract and classify objects and blur relevant objects (license plates, faces)  3. Serving pipeline - serve blurred street view images to users.  https://t.co/mw2Lg2afUx
1573332186144514048 2022-09-23 15:23:18 +0000 <alexxubyte> /1 How do Google/Apple maps blur license plates and human faces on Street View?  The diagram below presents a possible solution that might work in an interview setting.  https://t.co/LrFjkkKMN3
1573324053254922240 2022-09-23 14:50:59 +0000 <alexxubyte> @engineering_bae I’m so glad you liked my book, Taylor! Thank you for the shout-out. Been following you for a while &amp; I really enjoyed reading your tweets :)
1573180325962059776 2022-09-23 05:19:52 +0000 <alexxubyte> @nickjshearer Well, Apple document explicitly says DAN is sent to the store’s point of sale terminal:  https://t.co/FkeWeKFoSu  https://t.co/xxvOidr8vy
1573176337044590592 2022-09-23 05:04:01 +0000 <alexxubyte> Clarification:  Apple pay: the apple server looks at the card info and determines how to route. Since the card data is not stored on the apple server, apple server is not in the illustration. More detail:  https://t.co/FkeWeKER2W  Google pay, more details:  https://t.co/uHFaZzTkBB
1572966611627438082 2022-09-22 15:10:39 +0000 <alexxubyte> 9/ I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1572966607550550017 2022-09-22 15:10:38 +0000 <alexxubyte> 8/ 5. NPCI sends an instruction to SBI bank and add INR 100 to Bob’s account in SBI bank.  6. Upon success, NPCI notifies the payment apps via acquiring banks.  https://t.co/P3vGOA0RCo
1572966585987641344 2022-09-22 15:10:33 +0000 <alexxubyte> 7/ 𝐃𝐢𝐫𝐞𝐜𝐭 𝐩𝐚𝐲𝐦𝐞𝐧𝐭  1. Alice enters Bob’s UPI ID bob and the amount INR 100  2. PhonePe verifies and forwards the request to NPCI via ICICI bank  3. NPCI requests Axis Bank to resolve detail for bob at axis  4. NPCI deducts Alice’s HDFC bank account by INR 100  https://t.co/MdXZvLBtp4
1572966567197159425 2022-09-22 15:10:28 +0000 <alexxubyte> 6/ 8. NPCI acts as a switch between acquiring banks and issuing banks. It resolves the account detail from VPA with different issuing banks.  9. Bob authenticates with account details and sets the PIN, which is used for 2FA. This goes all the way to the issuing bank.  https://t.co/9fJBBbIsKF
1572966547358126084 2022-09-22 15:10:23 +0000 <alexxubyte> 5/ 𝐋𝐢𝐧𝐤 𝐭𝐨 𝐁𝐚𝐧𝐤 𝐀𝐜𝐜𝐨𝐮𝐧𝐭  7. Bob wants to link his SBI bank account with VPA bob at the axis. The request is forwarded to NPCI (National Payments Corporation of India).  https://t.co/6vTrfLC9RC
1572966527577755649 2022-09-22 15:10:19 +0000 <alexxubyte> 4/ 4. Bob’s payment app creates VPA with the acquiring bank  5. The acquiring bank returns with VPA  6. The payment app returns VPA to Bob  https://t.co/IpvsEXJaS3
1572966508216872961 2022-09-22 15:10:14 +0000 <alexxubyte> 3/ Let's take a look at how it works.  𝐑𝐞𝐠𝐢𝐬𝐭𝐫𝐚𝐭𝐢𝐨𝐧  1. Bob wants to open an account and provides his phone number +91 12345678  2. Bob performs OTP (One-Time Password) phone verification  3. Bob sets up VPA (Virtual Payment Address) bobaxis  https://t.co/0jWqujOgHS
1572966488461709313 2022-09-22 15:10:09 +0000 <alexxubyte> 2/ What’s UPI? UPI is an instant real-time payment system developed by the National Payments Corporation of India.  It accounts for 60% of digital retail transactions in India today and still growing.  UPI = payment markup language + standard for interoperable payments  https://t.co/tLtjIySG6t
1572966478756085761 2022-09-22 15:10:07 +0000 <alexxubyte> 1/ The Unified Payments Interface (UPI) for real-time transactions in India is a good case study for other nations in the payment space.  https://t.co/ivrdfcf17g
1572646896820441088 2022-09-21 18:00:13 +0000 <alexxubyte> Enjoy this thread?  You might like this thread "Why is the credit card called 𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐩𝐫𝐨𝐟𝐢𝐭𝐚𝐛𝐥𝐞 product in banks” as well?   https://t.co/0yKY9632ks
1572614995279753218 2022-09-21 15:53:27 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1572614992507314176 2022-09-21 15:53:26 +0000 <alexxubyte> /7 👉 Over to you: Apple needs to discuss the DAN details with banks. It takes time and effort, but the benefit is that the credit card info is on the public network only once. If you are an architect and have to choose between security and cost, which solution do you prefer?
1572614988585668610 2022-09-21 15:53:25 +0000 <alexxubyte> /6 𝐆𝐨𝐨𝐠𝐥𝐞 𝐏𝐚𝐲: The e-commerce server passes the payment token to the Google server. Google server looks up the card info and passes it to the bank.  In the diagram, the red arrow means the credit card info is available on the public network, although it is encrypted.  https://t.co/dwbs1lJy7L
1572614978334785541 2022-09-21 15:53:23 +0000 <alexxubyte> /5 2️⃣ When you click the “Pay” button on your phone, the basic payment flow starts. Here are the differences:  𝐀𝐩𝐩𝐥𝐞 𝐏𝐚𝐲: For iPhone, the e-commerce server passes the DAN to the bank.  https://t.co/yKVGsx5FUY
1572614967303741440 2022-09-21 15:53:20 +0000 <alexxubyte> /4 𝐆𝐨𝐨𝐠𝐥𝐞 𝐏𝐚𝐲: When you register the credit card with Google Pay, the card info is stored in the Google server. Google returns a payment token to the phone.  https://t.co/cZjpaIkS2J
1572614956989960192 2022-09-21 15:53:18 +0000 <alexxubyte> /3 1️⃣ The registration flow is represented by steps 1~3 for both cases.  𝐀𝐩𝐩𝐥𝐞 𝐏𝐚𝐲: It doesn’t store any card info. It passes the card info to the bank. Bank returns a token called DAN (device account number). iPhone then stores DAN into a special hardware chip.  https://t.co/phPJ0s9GvJ
1572614947930247168 2022-09-21 15:53:16 +0000 <alexxubyte> /2 1. Registering your credit card flow 2. Basic payment flow
1572614943811440642 2022-09-21 15:53:15 +0000 <alexxubyte> /1 How do Apple Pay and Google Pay handle sensitive card info?  The diagram below shows the differences. Both approaches are very secure, but the implementations are different. To understand the difference, we break down the process into two flows.  https://t.co/3jWwXmALBA
1572400732040724481 2022-09-21 01:42:02 +0000 <alexxubyte> I just published a post on Hacker News: “How To Choose The Right Database?”.  Feel free to upvote :) Thank you.   https://t.co/p2oMqYN9tb  https://t.co/HolWswe0UY
1572254796450770944 2022-09-20 16:02:09 +0000 <alexxubyte> This is now available:  https://t.co/G4Mt26tj3c
1572241007923859462 2022-09-20 15:07:21 +0000 <alexxubyte> /2 Link to the tool:  https://t.co/JNTqaRDcXT  Join a growing community of more than 100,000 readers who love System Design. Subscribe here:  https://t.co/PczMAdqSrj
1572241003964420097 2022-09-20 15:07:20 +0000 <alexxubyte> /1 If you use JSON files, you'll probably like this tool 👇  Nested JSON files are hard to read.  𝐉𝐬𝐨𝐧𝐂𝐫𝐚𝐜𝐤 generates graph diagrams from JSON files and makes them easy to read.  Additionally, the generated diagrams can be downloaded as images.  See the link below.  https://t.co/sm9YAqs8HE
1572074815724597248 2022-09-20 04:06:58 +0000 <alexxubyte> New video dropping tomorrow.  Subscribe now so you won't miss it 😆  https://t.co/tbxD2fpOZJ  https://t.co/RNCssRwgzR
1571880302578110470 2022-09-19 15:14:02 +0000 <alexxubyte> /8 Over to you: How to avoid big keys?
1571880298887122944 2022-09-19 15:14:02 +0000 <alexxubyte> /7 “No” mode never calls fsync(). It is up to the operating system. Big keys have no impact on the main thread.  https://t.co/DbzXWRGAeV
1571880288472694784 2022-09-19 15:13:59 +0000 <alexxubyte> /6 “EveySec” starts a background timer task to call fsync() every second, so big keys have no impact on the Redis main thread.  https://t.co/Xs9HLDIoGC
1571880278129508352 2022-09-19 15:13:57 +0000 <alexxubyte> /5 In “Always” mode, it calls fsync() synchronously. If we need to update a big key, the main thread will be blocked because it has to wait for the write to complete.  https://t.co/rl46GVVZwg
1571880269283758080 2022-09-19 15:13:54 +0000 <alexxubyte> /4 Redis writes keys into memory first, then calls write() to write the data into the kernel buffer cache. Then fsync() flushes all modified in-core data of the file to the disk device There are 3 modes.
1571880266511294464 2022-09-19 15:13:54 +0000 <alexxubyte> /3 3️⃣ No - Redis doesn’t control when the data is written to the dis. Instead, the operating system decides when the data is written to the disk.  👉 How do we analyze the impact of big keys?
1571880263818555394 2022-09-19 15:13:53 +0000 <alexxubyte> /2 There are three modes when we turn on AOF persistence:  1️⃣ Always - synchronously write data to the disk whenever there is a data update in memory.  2️⃣ EverySec - write to the disk every second.
1571880260177907713 2022-09-19 15:13:52 +0000 <alexxubyte> /1 How do big keys impact Redis persistence? We call a key that contains a large size of data a big key. For example, the size of the key is 5 MB.  The diagram shows how big keys impact Redis AOF (Append-Only-File) persistence.  https://t.co/hyM03OII9I
1571517386356043776 2022-09-18 15:11:56 +0000 <alexxubyte> made by @sahnlam
1571517384829317122 2022-09-18 15:11:56 +0000 <alexxubyte> How to store passwords in the database?  Subscribe to our YouTube channel for more videos like this:  https://t.co/e2OOkYBH7h  https://t.co/gXtFmFhqGX
1571154702452260864 2022-09-17 15:10:46 +0000 <alexxubyte> Next week, we will cover:  🔹Apple/Google pay 🔹Design Google-like street view blurring system 🔹Large key in Redis 🔹Misconceptions about CAP 🔹Live streaming  Join a community of more than 100,000 readers who love System Design. Subscribe here:   https://t.co/PczMAdqSrj  https://t.co/AjsEJZFJTd
1570778557957439489 2022-09-16 14:16:06 +0000 <alexxubyte> "Org charts" comic by Manu Cornet. The drawing was published in 2011.  According to Wikipedia, Microsoft CEO Satya Nadella cited that it was what persuaded him to change Microsoft's culture.  Source:  https://t.co/vcza9HdoVT  How accurate is the drawing?  https://t.co/p646bIvOWb
1570430649953296387 2022-09-15 15:13:38 +0000 <alexxubyte> /4 Over to you: 1) Could you think of any use cases that unique IDs are useful?  2）There are variations in the snowflake implementation. For example, data center ID can be added to the “MachineID” section to guarantee global uniqueness. Do you know other variations?
1570430647281537024 2022-09-15 15:13:38 +0000 <alexxubyte> /3 4. Distributed. The ID generator doesn’t rely on a centralized service.  5. Security. Depending on the use case, some IDs cannot be incremental integers, which might expose sensitive info. For example, people might guess the total user number correctly by looking at the IDs.
1570430644639137792 2022-09-15 15:13:37 +0000 <alexxubyte> /2 Assume the design requirements of distributed unique ID are:  1. Globally unique.  2. Availability. The ID generator must be available under high concurrency.  3. Ordered. The IDs are sorted by certain rules. For example, sorted by time.
1570430639836639239 2022-09-15 15:13:36 +0000 <alexxubyte> /1 How do we generate unique IDs in distributed systems? How do we avoid ID conflicts?  The diagram below shows 5 ways. 👇  https://t.co/heA5cXZPcy
1570077298929577984 2022-09-14 15:49:33 +0000 <alexxubyte> 8/ I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1570077296123580417 2022-09-14 15:49:32 +0000 <alexxubyte> 7/ Over to you: Which type of permission systems have you used?  Join a growing community of more than 100,000 readers who love System Design. Subscribe here:   https://t.co/PczMAdqSrj
1570077293472784384 2022-09-14 15:49:32 +0000 <alexxubyte> 6/ 5. RBAC (Role-based Access Control)  Evaluate permissions based on roles  Pros - flexible in assigning roles.
1570077290796843008 2022-09-14 15:49:31 +0000 <alexxubyte> 5/ 4. ABAC (Attribute-based access control)  Evaluate permissions based on attributes of the Resource owner, Action, Resource, and Environment.  Pros - flexible  Cons - the rules can be complicated, and the implementation is hard. It is not commonly used.
1570077288032796672 2022-09-14 15:49:30 +0000 <alexxubyte> 4/ 3. MAC (Mandatory Access Control)  Both resource owners and resources have classification labels. Different labels are granted with different permissions.  Pros - strict and straightforward.  Cons - not flexible.
1570077285201616897 2022-09-14 15:49:30 +0000 <alexxubyte> 3/ 2. DAC (Discretionary Access Control)  It grants or restricts object access via an access policy determined by an object's owner group.  Pros - Easy and flexible. Linux file system supports DAC.  Cons - Scattered permission control, too much power for the object’s owner group
1570077282479505410 2022-09-14 15:49:29 +0000 <alexxubyte> 2/ 1. ACL (Access Control List)  ACL is a list of rules that specifies which users are granted or denied access to a particular resource.  Pros - Easy to understand.  Cons - error-prone, maintenance cost is high
1570077278104875008 2022-09-14 15:49:28 +0000 <alexxubyte> 1/ How do we design a permission system? The diagram below lists 5 common ways. 👇  https://t.co/qQpQ7xQAmP
1570068620604223488 2022-09-14 15:15:04 +0000 <alexxubyte> @DanHollick Really cool thread. Thank you for sharing. I love QR code too. Posted this a while ago about “scan to pay”.  https://t.co/iMl2GaP0Qr
1569867673550606339 2022-09-14 01:56:34 +0000 <alexxubyte> By @sahnlam
1569867123085946881 2022-09-14 01:54:23 +0000 <alexxubyte> How to do back of the envelope estimation?   Full video:  https://t.co/mODJPpjKMB  https://t.co/XOp0h2V3D7
1569711877848203274 2022-09-13 15:37:30 +0000 <alexxubyte> /6 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1569711875105112064 2022-09-13 15:37:29 +0000 <alexxubyte> /5 This is part 1 of the cloud design pattern series. Subscribe to our weekly newsletter for future updates:  https://t.co/dkjDPxaQMt
1569711872420757510 2022-09-13 15:37:28 +0000 <alexxubyte> /4 Over to you:  1). Which pattern do you think is important but not on the list?  2). Do you have any experience dealing with failures/outages? If so, please share so we can all learn from it.
1569711869677686785 2022-09-13 15:37:28 +0000 <alexxubyte> /3 These patterns are usually not used alone. To apply them effectively, we need to understand why we need them, how they work, and their limitations.
1569711866112528385 2022-09-13 15:37:27 +0000 <alexxubyte> /2 Here are 8 cloud design patterns to reduce the damage done by failures.  - Timeout - Retry - Circuit breaker - Rate limiting - Load shedding - Bulkhead - Back pressure - Let it crash  https://t.co/vynFt08jak
1569711854611763202 2022-09-13 15:37:24 +0000 <alexxubyte> /1 Have you noticed that the largest incidents are usually caused by something very small?  A minor error starts the snowball effect that keeps building up. Suddenly, everything is down.  https://t.co/hagBi6LaH1
1569372996401504262 2022-09-12 17:10:54 +0000 <alexxubyte> Enjoy this thread?  You might like our System Design newsletter as well:   https://t.co/xGSJj1XzJd
1569348418908356608 2022-09-12 15:33:14 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1569348416215592962 2022-09-12 15:33:14 +0000 <alexxubyte> /7 Over to you: What do you think of the accuracy of this analysis?
1569348413443178497 2022-09-12 15:33:13 +0000 <alexxubyte> /6 [1]  https://t.co/RWV7GbysuK  [2]  https://t.co/NZZaJca5CE
1569348409890578435 2022-09-12 15:33:12 +0000 <alexxubyte> /5 𝐌𝐨𝐬𝐭 𝐞𝐧𝐯𝐢𝐫𝐨𝐧𝐦𝐞𝐧𝐭𝐚𝐥𝐥𝐲 𝐟𝐫𝐢𝐞𝐧𝐝𝐥𝐲 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞𝐬: 𝐂, 𝐑𝐮𝐬𝐭, 𝐚𝐧𝐝 𝐂++  𝐋𝐞𝐚𝐬𝐭 𝐞𝐧𝐯𝐢𝐫𝐨𝐧𝐦𝐞𝐧𝐭𝐚𝐥𝐥𝐲-𝐟𝐫𝐢𝐞𝐧𝐝𝐥𝐲 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞𝐬: 𝐑𝐮𝐛𝐲, 𝐏𝐲𝐭𝐡𝐨𝐧, 𝐏𝐞𝐫𝐥  https://t.co/g3doCT6JGh
1569348400277241857 2022-09-12 15:33:10 +0000 <alexxubyte> /4 We show how to use our results to provide software engineers support to decide which language to use when energy efficiency is a concern”. [2]
1569348397458681858 2022-09-12 15:33:09 +0000 <alexxubyte> /3 Our results show interesting findings, such as, slower/faster languages consuming less/more energy, and how memory usage influences energy consumption.
1569348394761728002 2022-09-12 15:33:09 +0000 <alexxubyte> /2 “This paper presents a study of the runtime, memory usage and energy consumption of twenty seven well-known software languages. We monitor the performance of such languages using ten different programming problems, expressed in each of the languages.
1569348391167197185 2022-09-12 15:33:08 +0000 <alexxubyte> /1 𝐖𝐡𝐚𝐭 𝐀𝐫𝐞 𝐭𝐡𝐞 𝐆𝐫𝐞𝐞𝐧𝐞𝐬𝐭 𝐏𝐫𝐨𝐠𝐫𝐚𝐦𝐦𝐢𝐧𝐠 𝐋𝐚𝐧𝐠𝐮𝐚𝐠𝐞𝐬 [1]?  The study below runs 10 benchmark problems in 28 languages. It measures the runtime, memory usage, and energy consumption of each language. The abstract of the paper is shown below.  https://t.co/NyQ8ZpowJI
1568970815055732736 2022-09-11 14:32:47 +0000 <alexxubyte> 1/ This video was made by @sahnlam. Follow our YouTube channel for more videos like this:  https://t.co/tbxD2fpOZJ  https://t.co/PRNVQRn2nr
1568970813516423187 2022-09-11 14:32:46 +0000 <alexxubyte> 0/ The Secret Sauce Behind NoSQL: Log-structured merge-tree (LSM Tree)  https://t.co/TZv6q7G0sc
1568732055521079296 2022-09-10 22:44:02 +0000 <alexxubyte> @JauhariBill Thank you for the feedback! We will keep that in mind.
1568731571926233088 2022-09-10 22:42:07 +0000 <alexxubyte> @championswimmer @GergelyOrosz @bytebytego Thanks! I mainly help with marketing and some background work. My teammate @sahnlam is the YouTuber!
1568728453477974017 2022-09-10 22:29:43 +0000 <alexxubyte> @GergelyOrosz @bytebytego YouTube is interesting. When our youtube channel was first launched, having an audience on other social platforms helped get it started. But after the first week, 90% of the traffic is generated by youtube recommendations.
1568623979770028033 2022-09-10 15:34:35 +0000 <alexxubyte> Next week, we will cover:  🔹Permission system 🔹Distributed ID 🔹Cloud patterns 🔹SQL tips 🔹Live streaming 🔹Learn 8 Data Modeling Patterns in Redis (sponsored by @Redisinc). Download at:  https://t.co/ORlXmiwW4c  Subscribe to our weekly newsletter at:   https://t.co/dkjDPxaQMt  https://t.co/shRTKDlko1
1568266403815501825 2022-09-09 15:53:42 +0000 <alexxubyte> The videos are also available as Instagram Reels:  https://t.co/voQk73PIik
1568257647727767552 2022-09-09 15:18:54 +0000 <alexxubyte> We created a TikTok account. If you want to see system design videos popping out in your feed from time to time, follow us there:  https://t.co/7PYYOKgX8j  https://t.co/zBJJVIrCUa
1568056785881415680 2022-09-09 02:00:45 +0000 <alexxubyte> Enjoy this thread?  You might like our System Design newsletter as well:   https://t.co/xGSJj1XzJd
1567901882827554818 2022-09-08 15:45:13 +0000 <alexxubyte> /14 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1567901880130613248 2022-09-08 15:45:13 +0000 <alexxubyte> /13 Picking the right database is not glamorous, and there is a lot of hard work involved. Migrating to a new database in the real world could take years at a high scale.  Good luck.
1567901877484007430 2022-09-08 15:45:12 +0000 <alexxubyte> /12 During benchmarking, pay attention to the outliers. Measure P99 of everything. The average is not meaningful.  After everything checks out, plan the migration carefully. Write out a detailed step-by-step migration plan.
1567901874736758787 2022-09-08 15:45:11 +0000 <alexxubyte> /11 𝐎𝐧𝐜𝐞 𝐰𝐞 𝐧𝐚𝐫𝐫𝐨𝐰 𝐝𝐨𝐰𝐧 𝐭𝐡𝐞 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞 𝐨𝐩𝐭𝐢𝐨𝐧𝐬, 𝐰𝐡𝐚𝐭’𝐬 𝐧𝐞𝐱𝐭?  Create a realistic test bench for the candidates using our data, with our real-world access patterns.
1567901871947534338 2022-09-08 15:45:11 +0000 <alexxubyte> /10 Instead of reading the shiny brochures, go read the manual. There is usually a page called “Limits”. That page is a gem.  Learn as much as possible about the candidate now. The investment is relatively small at this juncture.
1567901869183479808 2022-09-08 15:45:10 +0000 <alexxubyte> /9 𝐒𝐨𝐟𝐭𝐰𝐚𝐫𝐞 𝐞𝐧𝐠𝐢𝐧𝐞𝐞𝐫𝐢𝐧𝐠 𝐚𝐭 𝐬𝐜𝐚𝐥𝐞 𝐢𝐬 𝐚𝐛𝐨𝐮𝐭 𝐭𝐫𝐚𝐝𝐞𝐨𝐟𝐟𝐬. 𝐖𝐡𝐞𝐧 𝐢𝐭 𝐜𝐨𝐦𝐞𝐬 𝐭𝐨 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞𝐬, 𝐢𝐭 𝐢𝐬 𝐞𝐯𝐞𝐧 𝐦𝐨𝐫𝐞 𝐭𝐫𝐮𝐞.
1567901866473979904 2022-09-08 15:45:09 +0000 <alexxubyte> /8 We should prefer the ones that have been around for a long time, and have been battle tested.
1567901863739281408 2022-09-08 15:45:09 +0000 <alexxubyte> /7 𝐇𝐨𝐰 𝐝𝐨 𝐰𝐞 𝐠𝐨 𝐚𝐛𝐨𝐮𝐭 𝐜𝐡𝐨𝐨𝐬𝐢𝐧𝐠 𝐭𝐡𝐞 𝐧𝐞𝐱𝐭 𝐨𝐧𝐞?  We developers are naturally drawn to the new and shiny, like moths to flame. When it comes to databases, though, boring is good.
1567901861054939136 2022-09-08 15:45:08 +0000 <alexxubyte> /6 The bottom line is this: Migrating live production data is risky and costly. We better be damn sure that there is no way to keep using the current database.  We have exhausted all avenues for the current database.
1567901858370551808 2022-09-08 15:45:07 +0000 <alexxubyte> /5 Can we put a cache in front of it, and give us a few more months of runway?  Can we add read replicas to shed some read load?  Can we shard the database, or partition the data in some way?
1567901855614902274 2022-09-08 15:45:07 +0000 <alexxubyte> /4 𝐖𝐡𝐚𝐭𝐞𝐯𝐞𝐫 𝐭𝐡𝐞 𝐢𝐬𝐬𝐮𝐞𝐬 𝐚𝐫𝐞, 𝐦𝐚𝐤𝐞 𝐬𝐮𝐫𝐞 𝐭𝐡𝐞𝐲 𝐚𝐫𝐞 𝐧𝐨𝐭 𝐞𝐚𝐬𝐢𝐥𝐲 𝐬𝐨𝐥𝐯𝐚𝐛𝐥𝐞.  Let’s read the database manual of our current database system. There could be configuration knobs that we can tweak to give us a bit more breathing room.
1567901852938956800 2022-09-08 15:45:06 +0000 <alexxubyte> /3 𝐅𝐢𝐫𝐬𝐭, 𝐚𝐫𝐞 𝐰𝐞 𝐩𝐨𝐬𝐢𝐭𝐢𝐯𝐞 𝐭𝐡𝐚𝐭 𝐰𝐞 𝐧𝐞𝐞𝐝 𝐚 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞? Is the existing database breaking at the seams? Maybe the p95 latency is through the roof. Maybe the working set is overflowing the available memory.
1567901850271383552 2022-09-08 15:45:05 +0000 <alexxubyte> /2 The thread was written by  @sahnlam and illustrated by me.
1567901844994928641 2022-09-08 15:45:04 +0000 <alexxubyte> /1 Choosing the right database is often the most important decision we'll ever make.  We are talking about a database for a real growing business, where a bad choice would lead to extended downtime, customer impact, and even data loss.  This take is probably a bit controversial.  https://t.co/BN3XKKjhIG
1567539476729311236 2022-09-07 15:45:09 +0000 <alexxubyte> /5 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1567539471322861568 2022-09-07 15:45:08 +0000 <alexxubyte> /3 🔹GraphQL can aggregate multiple REST requests into one query. GraphQL server organizes the resources in a graph.  🔹GraphQL supports queries, mutations (applying data modifications to resources), and subscriptions (receiving notifications on schema modifications).
1567539468600770560 2022-09-07 15:45:07 +0000 <alexxubyte> /2 🔹GraphQL is a query language for APIs developed by Meta. It provides a complete description of the data in the API and gives clients the power to ask for exactly what they need.  🔹GraphQL servers sit in between the client and the backend services.
1567539463072673792 2022-09-07 15:45:06 +0000 <alexxubyte> /1 What is GraphQL? Is it a replacement for the REST API?  The diagram below shows the quick comparison between REST and GraphQL.  https://t.co/fGyd8FDejM
1567202499962245120 2022-09-06 17:26:07 +0000 <alexxubyte> @minyakonga Authentication verifies who you are, and authorization validates what operations you could perform based on who you are.
1567198459434012679 2022-09-06 17:10:04 +0000 <alexxubyte> Enjoy this thread?  You might like our System Design newsletter as well:   https://t.co/xGSJj1XzJd
1567195582565089286 2022-09-06 16:58:38 +0000 <alexxubyte> Edit: update whitelist/blacklist to the modern equivalents allow-list/deny-list  https://t.co/dpyGupo9Z5
1567177125744230402 2022-09-06 15:45:18 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1567177123001147394 2022-09-06 15:45:17 +0000 <alexxubyte> /6 Over to you: 1) What’s the difference between a load balancer and an API gateway?  2) Do we need to use different API gateways for PC, mobile and browser separately?
1567177118936887297 2022-09-06 15:45:16 +0000 <alexxubyte> /5 Steps 9-12: The API gateway can handle errors properly, and deals with faults if the error takes a longer time to recover (circuit break). It can also leverage ELK (Elastic-Logstash-Kibana) stack for logging and monitoring. We sometimes cache data in the API gateway.  https://t.co/OlMPStVF36
1567177106941186049 2022-09-06 15:45:13 +0000 <alexxubyte> /4 Steps 6 and 7 - Now that the request has passed basic checks, the API gateway finds the relevant service to route to by path matching.  Step 8 - The API gateway transforms the request into the appropriate protocol and sends it to backend microservices.  https://t.co/Whs7ncXLVY
1567177095281004545 2022-09-06 15:45:10 +0000 <alexxubyte> /3 Step 4 - The API gateway talks to an identity provider for authentication and authorization.  Step 5 - The rate limiting rules are applied to the request. If it is over the limit, the request is rejected.  https://t.co/o6yzZ91irl
1567177082551271432 2022-09-06 15:45:07 +0000 <alexxubyte> /2 Step 1 - The client sends an HTTP request to the API gateway.  Step 2 - The API gateway parses and validates the attributes in the HTTP request.  Step 3 - The API gateway performs whitelist or blacklist checks.  https://t.co/QU5cbqXneK
1567177071725793283 2022-09-06 15:45:05 +0000 <alexxubyte> /1 What does API gateway do?  The diagram below shows the detail.  https://t.co/VyWtC99Knw
1566945135400628224 2022-09-06 00:23:27 +0000 <alexxubyte> Louie is great at teaching. If you are interested in starting a newsletter, this is a good learning opportunity.
1566878879075033088 2022-09-05 20:00:10 +0000 <alexxubyte> Enjoy this thread?  You might like our System Design newsletter as well:   https://t.co/xGSJj1Fqv5
1566814679720022016 2022-09-05 15:45:04 +0000 <alexxubyte> A visual guide on troubleshooting Kubernetes deployments by @learnk8s   Kubernetes is really complex. What steps can be automated?  Join a growing community of more than 100,000 readers who love the System Design newsletter. Subscribe here:   https://t.co/PczMAd8Jdb  https://t.co/9J5EjEUPWz
1566085985615523841 2022-09-03 15:29:30 +0000 <alexxubyte> @rt3me Here is the correct link:  https://t.co/dkjDPxrTOt
1566085903105134594 2022-09-03 15:29:10 +0000 <alexxubyte> Next week, we will cover:  ► GraphQL ► API gateway ► Microservice patterns ► SQL optimization tips ► Kubernetes  Join a growing community of more than 100,000 readers who love System Design. Subscribe here:   https://t.co/dkjDPxrTOt  https://t.co/qtokMokibR
1565727767299104770 2022-09-02 15:46:04 +0000 <alexxubyte> @TakeChaotic @sahnlam That’s not legit. I have reported a few sellers but unfortunately they are still there. Not sure what I can do. The digital edition at  https://t.co/80EUzTQAQh is legit. At least, I can control our own site.
1565725616862744576 2022-09-02 15:37:31 +0000 <alexxubyte> /2 cc my co-author @sahnlam   The books are available at: Digital (vol1 + vol2 in one place):  https://t.co/80EUzTQAQh Physical Vol1:  https://t.co/JVYVsATTpo Physical Vol2:  https://t.co/x2gclGbiRp  Note: Only the Digital Version of Vol2 is available in India at the moment.
1565725611531718656 2022-09-02 15:37:30 +0000 <alexxubyte> /1 My system design interview book was translated into different languages. I’m just happy to see them in one place, physically!  https://t.co/ps46BZ8ghA
1565707362844827649 2022-09-02 14:24:59 +0000 <alexxubyte> @sriv_priyank It’s not legit. The physical book is not available in India yet. Could you help to report the seller (not the product itself) by clicking the seller? Thanks! The digital version is available at  https://t.co/80EUzTQAQh
1565365080849412096 2022-09-01 15:44:53 +0000 <alexxubyte> /10 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1565365078353817600 2022-09-01 15:44:52 +0000 <alexxubyte> /9 Over to you: If a user buys many products, their big order might be divided into several small orders based on warehouse locations, product types, etc. Where would you place the “order splitting” system in the process outlined below?
1565365074587369472 2022-09-01 15:44:51 +0000 <alexxubyte> /8 4️⃣ Transportation Steps 14,15 - The inventory system sends the outbound order to the transportation system, which manages the physical delivery of the goods.  Step 16 - Sign for item delivery (optional)  https://t.co/QCUFNjDvH0
1565365067553447937 2022-09-01 15:44:49 +0000 <alexxubyte> /7 Steps 12,13 - The order management system reserves stock in the inventory management system. Then the users pay for the product.
1565365063933837313 2022-09-01 15:44:48 +0000 <alexxubyte> /6 Step 8-11 - Consumers can now purchase products on the e-commerce APP. First, users register or log in to the APP. Next, users browse the product list and details, adding products to the shopping cart. They then place purchasing orders.  https://t.co/Wjm53kL4G2
1565365055901691904 2022-09-01 15:44:47 +0000 <alexxubyte> /5 3️⃣ eComm platform Steps 4-7 - The “eComm platform - Product Management” system creates the product info. The pricing system prices the products. Then products are ready to be listed for sale. The promotion system defines big sale activities, coupons, etc.  https://t.co/4Lt1vJjB8y
1565365048079314944 2022-09-01 15:44:45 +0000 <alexxubyte> /4 2️⃣ Inventory Step 3 - The products or goods from suppliers are delivered to a storage facility. All products/goods are managed by inventory management systems.  https://t.co/Tt0hHm3IEI
1565365039653015552 2022-09-01 15:44:43 +0000 <alexxubyte> /3 Step 2 - The procurement department places orders with suppliers, manages the return of goods, and settles invoices with suppliers.  https://t.co/gTEsDbRGlA
1565365031188869121 2022-09-01 15:44:41 +0000 <alexxubyte> /2 The diagram below shows the 4 key business areas in a typical e-commerce company: procurement, inventory, eComm platform, and transportation.  1️⃣ Procurement  Step 1 - The procurement department selects suppliers and manages contracts with them.  https://t.co/MuhLOjCfLQ
1565365023114813440 2022-09-01 15:44:39 +0000 <alexxubyte> /1 What happens behind the scenes when we 𝐬𝐡𝐨𝐩 𝐨𝐧𝐥𝐢𝐧𝐞?  Disclaimer: I have limited knowledge of the eCommerce system. The diagram below is based on my research. Please suggest better names for the components or let me know if you spot an error.  https://t.co/xWObNKoxsl
1565230042765856769 2022-09-01 06:48:17 +0000 <alexxubyte> @kdhrubo You are right. The description is not accurate. The LB provides high availability and there should be multiple API gateways.
1565037031394123776 2022-08-31 18:01:19 +0000 <alexxubyte> Enjoyed this post? Join a growing community of more than 100,000 readers who loves System Design. Subscribe here:   https://t.co/dkjDPxrTOt
1565012651427606528 2022-08-31 16:24:27 +0000 <alexxubyte> @FranckPachot @Yugabyte My data point was mainly based on discussions with folks working on payment. It didn’t take the network latency into consideration. Factors like the data model and data page split could play a role. In your opinion, what would be a good number for SQL commit?
1565007862752890881 2022-08-31 16:05:25 +0000 <alexxubyte> @RamsesCoraspe It depends on the setup. Either way can work.
1565007758469898240 2022-08-31 16:05:00 +0000 <alexxubyte> @PavitraGolchha Frontend usually goes to the CDN directly. Most companies use 3rd party CDN services such as Akamai, Cloudflare, etc.
1565003294384144384 2022-08-31 15:47:16 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1565003291821387776 2022-08-31 15:47:15 +0000 <alexxubyte> /7 Over to you: 1). What are the drawbacks of the microservice architecture?  2). Have you seen a monolithic system be transformed into microservice architecture? How long does it take?
1565003289317412864 2022-08-31 15:47:15 +0000 <alexxubyte> /6 Benefits of microservices:  - They can be quickly designed, deployed, and horizontally scaled.  - Each domain can be independently maintained by a dedicated team.  - Business requirements can be customized in each domain and better supported, as a result.
1565003285756424192 2022-08-31 15:47:14 +0000 <alexxubyte> /5 🔹Microservices: Microservices are designed and deployed in different domains. Each domain has its database.  The API gateway talks to the microservices via REST API or other protocols, and the microservices within the same domain talk to each other using RPC  https://t.co/UJdnZCc0N5
1565003276742844416 2022-08-31 15:47:12 +0000 <alexxubyte> /4 🔹Service Registry &amp; Discovery: Microservice registration and discovery happen in this component, and the API gateway looks for relevant services in this component to talk to.  🔹Management: This component is responsible for monitoring the services.  https://t.co/ns8RteRo9w
1565003267523784704 2022-08-31 15:47:09 +0000 <alexxubyte> /3 🔹API Gateway: This handles incoming requests and routes them to the relevant services. It talks to the identity provider and service discovery.  🔹Identity Provider: This handles authentication and authorization for users.  https://t.co/LV8b7vRnQy
1565003258854195210 2022-08-31 15:47:07 +0000 <alexxubyte> /2 🔹CDN (Content Delivery Network): CDN is a group of geographically distributed servers that hold static content for faster delivery. The clients look for content in CDN first, then progress to backend services.  https://t.co/jMLEh8dS7l
1565003249341435904 2022-08-31 15:47:05 +0000 <alexxubyte> /1 What does a typical microservice architecture look like? 👇  The diagram below shows a typical microservice architecture.  🔹Load Balancer: This distributes incoming traffic across multiple backend services.  https://t.co/cTIsNqMQVH
1564821084804853761 2022-08-31 03:43:14 +0000 <alexxubyte> @FranckPachot Good point. I meant to say the latency for committing a transaction + updating various data structures.
1564658926355853312 2022-08-30 16:58:52 +0000 <alexxubyte> The goal of the diagram is not to get the numbers accurate, but to get a general sense of what is slow and fast, in relative terms. We hope the numbers are within the 1 order of magnitude error range. Let me know if you spot an error! I'll correct it. Thank you.
1564640417651404801 2022-08-30 15:45:19 +0000 <alexxubyte> /8 Over to you - 1). Do you know all 😊?  2). Nowadays, disk and tape are used as data backup. Do you know which one has a higher write speed?  👉 Enjoyed this post? You might like our weekly System Design Newsletter as well. Subscribe here:   https://t.co/dkjDPxrTOt  https://t.co/Ib4dG2Y93D
1564640407107026948 2022-08-30 15:45:17 +0000 <alexxubyte> /7 🔹Retry/refresh internal: 1-10s  E.g: In a monitoring system, the refresh interval is usually set to 5~10 seconds (default value on Grafana).  Notes  -----  1 ns = 10^-9 seconds  1 us = 10^-6 seconds = 1,000 ns  1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns  https://t.co/OWiSrVGJol
1564640398055682050 2022-08-30 15:45:15 +0000 <alexxubyte> /6 🔹Send packet CA-&gt;Netherlands-&gt;CA: 100 ms  E.g.: If we have a long-distance Zoom call, the latency might be around 100 ms.  https://t.co/PLdmJ7wGZN
1564640389788667904 2022-08-30 15:45:13 +0000 <alexxubyte> /5 🔹Database insert operation: 1 ms. E.g.: Postgresql insertion might take 1ms. The database needs to store the data, create the index, and flush logs. All these actions take time.  https://t.co/6ZvC88qBtD
1564640380791840768 2022-08-30 15:45:11 +0000 <alexxubyte> /4 🔹Read from SSD: 100 us  E.g.: RocksDB is a disk-based K/V store, so the read latency is around 100 us on SSD.  https://t.co/KxrhqLPyrz
1564640371904090113 2022-08-30 15:45:08 +0000 <alexxubyte> /3 🔹RAM access: 100 ns E.g.: It takes 100 ns to read data from memory. Redis is an in-memory store, so it takes about 100 ns to read data from Redis  🔹Send 1K bytes over 1 Gbps network: 10 us E.g.: It takes around 10 us to send 1KB of data from Memcached through the network  https://t.co/YcE3hgiQkT
1564640363268042752 2022-08-30 15:45:06 +0000 <alexxubyte> /2 🔹L1 and L2 caches: 1 ns, 10 ns E.g.: They are usually built onto the microprocessor chip. Unless you work with hardware directly, you probably don’t need to worry about them.  https://t.co/WKpaP6oHqg
1564640354690670592 2022-08-30 15:45:04 +0000 <alexxubyte> /1 Which latency numbers we should know?  Please note those are not accurate numbers. They are based on some online benchmarks (Jeff Dean’s latency numbers + some other sources).  https://t.co/P85VE5o3ln
1564468027088744448 2022-08-30 04:20:18 +0000 <alexxubyte> Enjoyed this thread?   You might like our weekly System Design Newsletter as well. Subscribe here:   https://t.co/0RYwcKv26q
1564311222631014400 2022-08-29 17:57:13 +0000 <alexxubyte> @thejustinwelsh This is extremely helpful. Very actionable tips. Thank you so much for sharing. I’m a fan of your LinkedIn course as well! Took it a while ago but I go to check the slides from time to time.
1564279792651812864 2022-08-29 15:52:20 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1564279790143561728 2022-08-29 15:52:19 +0000 <alexxubyte> /7 Over to you: We can also put the requests into a message queue so the requests can be processed at the service’s own pace. Can you think of the limitations of this approach?
1564279785999593472 2022-08-29 15:52:18 +0000 <alexxubyte> /6 🔹Use cache to update balance first We can set up a caching layer to update the merchant’s balance. The detailed statements and balances are updated in the database later asynchronously. The in-memory cache can deal with much higher throughput than the database.  https://t.co/PG1Ue7II6l
1564279774746275840 2022-08-29 15:52:15 +0000 <alexxubyte> /5 🔹Split the balance account into sub-accounts We can set up sub-accounts for the merchant’s account. In this way, one update request only locks one sub-account, and the rest sub-accounts are still available.  https://t.co/RyTlQ4uZab
1564279758875025408 2022-08-29 15:52:12 +0000 <alexxubyte> /4 🔹Rate limit We can limit the number of requests within a certain period. The remaining requests will be rejected or retried at a later time. It is a simple way to increase the system’s responsiveness for some users, but this can lead to a bad user experience.  https://t.co/ijNAgHHnzn
1564279746946428928 2022-08-29 15:52:09 +0000 <alexxubyte> /3 In normal operations, we put a row lock on the merchant’s balance when it gets updated. However, this locking mechanism leads to low throughput and becomes a system bottleneck.  The diagram below shows several optimizations.
1564279744413110272 2022-08-29 15:52:08 +0000 <alexxubyte> /2 For example, when merchant A starts a promotion on Amazon Prime day, it receives many concurrent purchasing orders. In this case, the merchant’s account in the database becomes a hotspot account due to frequent updates.
1564279740390772736 2022-08-29 15:52:07 +0000 <alexxubyte> /1 Big accounts, such as Nike, Procter &amp; Gamble &amp; Nintendo, often cause hotspot issues for the payment system.  A hotspot payment account is an account that has a large number of concurrent operations on it.  https://t.co/Le1TgrL6xB
1564099591833673734 2022-08-29 03:56:16 +0000 <alexxubyte> The silver play button arrived! Thank you to all 100K+ of you! Here are the top 3 most watched videos:   1. Why is Kafka fast 2. Why is single-threaded Redis so fast 3. HTTP/1 to HTTP/2 to HTTP/3  Thank you, @sahnlam, for making the great videos   YouTube:  https://t.co/tbxD2f7FLB  https://t.co/MF1eE5TfSj
1563550491451109382 2022-08-27 15:34:21 +0000 <alexxubyte> Next week, we will cover:  ► Microservice architecture ► eCommerce end-to-end workflow ► Hotspot account ► Latency numbers ► SQL tips  Subscribe now to our weekly newsletter to learn something new every week:   https://t.co/dkjDPxrTOt  https://t.co/aIQGfNgi1L
1563170643780067331 2022-08-26 14:24:58 +0000 <alexxubyte> @dappdavid99 @sahnlam @amazonIN Wow. That’s really bad. Thank you so much for letting me know. I’ll file a report.
1563046523872559105 2022-08-26 06:11:45 +0000 <alexxubyte> @swiss_quant Yes, we made a video about it:  https://t.co/tDmb66Dbll
1563046047257047040 2022-08-26 06:09:52 +0000 <alexxubyte> A picture is worth a thousand words. Cron cheatsheet by @LinuxHandbook 👇  Subscribe to our weekly newsletter (100,000+ subscribers) to learn something new every week:   https://t.co/dkjDPxrTOt  https://t.co/VKuYPmmP5F
1562840142456377345 2022-08-25 16:31:40 +0000 <alexxubyte> /15 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1562840139214114817 2022-08-25 16:31:40 +0000 <alexxubyte> /14 Other API options  https://t.co/t34sR9vagB
1562840131941240832 2022-08-25 16:31:38 +0000 <alexxubyte> /13 API versioning  https://t.co/UD8RvTDPbS
1562840123791667206 2022-08-25 16:31:36 +0000 <alexxubyte> /12 Pagination  https://t.co/O84XPnh0DL
1562840116153839618 2022-08-25 16:31:34 +0000 <alexxubyte> /11 Idempotency  https://t.co/4FsK9vVK8x
1562840108654481416 2022-08-25 16:31:32 +0000 <alexxubyte> /10 Retry  https://t.co/zG9PtzTyvH
1562840100765020160 2022-08-25 16:31:30 +0000 <alexxubyte> /9 Status Code  https://t.co/mhe9hq8el9
1562840093194199042 2022-08-25 16:31:29 +0000 <alexxubyte> /8 JSON  https://t.co/vE9cRwhSi3
1562840085984202752 2022-08-25 16:31:27 +0000 <alexxubyte> /7 CRUD  https://t.co/DIQaUDzrNH
1562840078111481857 2022-08-25 16:31:25 +0000 <alexxubyte> /6 Verb  https://t.co/2c7vYGozsf
1562840070255550464 2022-08-25 16:31:23 +0000 <alexxubyte> /5 Resource  https://t.co/aXz4YwMCzx
1562840062231949315 2022-08-25 16:31:21 +0000 <alexxubyte> /4 Organize resources  https://t.co/BiCxXkTPS2
1562840054946402313 2022-08-25 16:31:19 +0000 <alexxubyte> /3 Real-life examples  https://t.co/Ht2Xx69QlE
1562840047010717697 2022-08-25 16:31:18 +0000 <alexxubyte> /2 REST API Rules  https://t.co/bIFgM55tyq
1562840039142281216 2022-08-25 16:31:16 +0000 <alexxubyte> /1 REST is the most common communication standard between computers over the internet. What is it? Why is it so popular? Let's take a look at this thread.  https://t.co/GBdBcC56aF
1562462340452270083 2022-08-24 15:30:25 +0000 <alexxubyte> /4 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1562462337902137349 2022-08-24 15:30:25 +0000 <alexxubyte> /3 🔹ISO 14443: defines contactless card  Over to you: 1). credit card details are sensitive data. How to store the card data safely in the backend? What are some of the regulations?  2). The smart card has an integrated EMV chip. Is this chip read-only or writable?
1562462335255531520 2022-08-24 15:30:24 +0000 <alexxubyte> /2 🔹ISO 7813: defines the card size and shape  🔹ISO 7816: defines smart card integrated chips, such as the EMV (Europay, Mastercard, and Visa) chip  🔹ISO 7812: defines the PAN (permanent account number) structure  🔹ISO 7811: defines the magnetic stripe details
1562462331572957184 2022-08-24 15:30:23 +0000 <alexxubyte> /1 How to explain to a 10-year-old what all the symbols/numbers on the smart credit card mean?  Do you know that smart credit cards have ISO standards? Let’s take a look:  https://t.co/TT0JEoeZGK
1562247891451666432 2022-08-24 01:18:17 +0000 <alexxubyte> Update to this thread.  Prerequisite: root certificate of the intermediate server is present in the local trust-store.
1562170318436724736 2022-08-23 20:10:02 +0000 <alexxubyte> Enjoy this thread?  You might like this thread: What is SSO (Single Sign-On)?   https://t.co/5V8VmiqkaW
1562103703997255680 2022-08-23 15:45:20 +0000 <alexxubyte> /10 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1562103701447196672 2022-08-23 15:45:19 +0000 <alexxubyte> /9 Over to you: why does HTTPS use symmetric encryption for data transmission? Is it safe?
1562103698796425217 2022-08-23 15:45:18 +0000 <alexxubyte> /8 Now let’s answer the questions we started with:  1. HTTPS is reliable, but the client should not accept a malicious certificate from an untrusted third-party server.  2. Fiddler can decrypt the data because its certificate is accepted and trusted by the browser.
1562103694425874434 2022-08-23 15:45:17 +0000 <alexxubyte> /7 Steps 7 and 8 - Now, the client and the server can communicate using the session key (symmetric encryption.) The encrypted data is transmitted in a secure bi-directional channel. The intermediate server can always decrypt the data.  https://t.co/ifTy3foSDE
1562103685571702784 2022-08-23 15:45:15 +0000 <alexxubyte> /6 Step 6 - The intermediate server encrypts the session key using the public key from the actual server and then sends it there. The legitimate server decrypts the session key with the private key.  https://t.co/DiKqusphqi
1562103676218404866 2022-08-23 15:45:13 +0000 <alexxubyte> /5 Step 5 - The client generates a session key and encrypts it using the public key from the intermediate server. The intermediate server receives the encrypted session key and decrypts it with the private key.  https://t.co/P6cGwvpxla
1562103667364225024 2022-08-23 15:45:11 +0000 <alexxubyte> /4 Step 4 - The legitimate server sends its certificate to the intermediate server. The intermediate server validates the certificate.  https://t.co/nooJZeSKrI
1562103658812059649 2022-08-23 15:45:09 +0000 <alexxubyte> /3 Step 2 - The intermediate server establishes a TCP connection with the actual server.  Step 3 - The intermediate server sends the SSL certificate to the client. The certificate contains the public key, hostname, expiry dates, etc. The client validates the certificate.  https://t.co/ZKsht2ZV5m
1562103650511507456 2022-08-23 15:45:07 +0000 <alexxubyte> /2 Step 1 - The client requests to establish a TCP connection with the server. The request is maliciously routed to an intermediate server, instead of the real backend server. Then, a TCP connection is established between the client and the intermediate server.  https://t.co/9s99s5twW7
1562103641057607685 2022-08-23 15:45:05 +0000 <alexxubyte> /1 Is HTTPS reliable?  If HTTPS is safe, how can tools like Fiddler capture network packets sent via HTTPS?  The diagram below shows a scenario where a malicious intermediate hijacks the packets.  https://t.co/O6LjsW5e9Y
1561782450161823744 2022-08-22 18:28:47 +0000 <alexxubyte> @lennysan Wow. Insane growth. Congratulations 🎉
1561734278936899585 2022-08-22 15:17:22 +0000 <alexxubyte> /9 Greatly appreciate all the helpful advice and tips from @lennysan  @packyM @GergelyOrosz, and @Kantrowitz.
1561734275690418176 2022-08-22 15:17:21 +0000 <alexxubyte> /8 Questions? Contact us at hi@bytebytego.com  https://t.co/ilGMOxu9sk
1561734267570229248 2022-08-22 15:17:19 +0000 <alexxubyte> /7 One ad slot is available each week. 90k-120k views per email.  https://t.co/fccRMvMhOt
1561734258665721856 2022-08-22 15:17:17 +0000 <alexxubyte> /6 Engineering: 94% Bachelor's degree: &gt;90%  https://t.co/mQ46MNrNpZ
1561734248620388353 2022-08-22 15:17:15 +0000 <alexxubyte> /5 Demographics:  https://t.co/icqyyEeIEJ
1561734239581663232 2022-08-22 15:17:12 +0000 <alexxubyte> /4 Subscribers from companies like:  https://t.co/YBKtltAPI3
1561734228701696002 2022-08-22 15:17:10 +0000 <alexxubyte> /3 Reach: 100k+ subscribers 90k - 120k views 49.2% open rate  https://t.co/rdyF6icB7H
1561734218299846656 2022-08-22 15:17:07 +0000 <alexxubyte> /2 ByteByteGo ( https://t.co/l9vQPOVPU2) is a popular weekly newsletter, covering topics and trends in large-scale system design.  https://t.co/oLKSSH7FHp
1561734208422178816 2022-08-22 15:17:05 +0000 <alexxubyte> /1 I’ve been writing for over 3 years with two System Design books and recently a newsletter. To make it a sustainable business, I'd like to explore monetizing options for the newsletter (100k subs)  I made a Sponsor Kit and would love to get:  1. Potential sponsors  2. Feedback  https://t.co/8BCB0r9zbQ
1561013567377121281 2022-08-20 15:33:31 +0000 <alexxubyte> Next week, we will cover:  🔹Is HTTPS safe? 🔹eCommerce end-to-end workflow 🔹Latency numbers 🔹Understand your credit card 🔹SQL tips  Subscribe here:  https://t.co/PczMAd8Jdb  https://t.co/2CtUEYJK61
1560642328259219457 2022-08-19 14:58:21 +0000 <alexxubyte> What is an API. By @Rapid_API    We are working on a video about RESTful API: 🔹 What is it 🔹 Why is it so popular 🔹 What are the best practices   Subscribe to our channels so you won’t miss it  Newsletter:  https://t.co/dkjDPxrTOt   YouTube channel:  https://t.co/oPIDCncw3Y  https://t.co/n5CxaSjkW4
1560293181333184512 2022-08-18 15:50:57 +0000 <alexxubyte> Evolution of HTTP protocols. HTTP/1 -&gt; HTTP/2 -&gt; HTTP/3.   If you enjoyed this video, you might like our System Design YouTube channel as well. Subscribe here:   https://t.co/oPIDCncw3Y  https://t.co/EV2toM2whM
1560040085080264704 2022-08-17 23:05:15 +0000 <alexxubyte> Link:  https://t.co/mPdxCVdhJE
1559929362324996096 2022-08-17 15:45:16 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week ⇩:   https://t.co/PczMAd8Jdb  #systemdesign #coding #interviewtips
1559929359909019648 2022-08-17 15:45:16 +0000 <alexxubyte> Over to you: if you wanted to support every kind of device, which delivery model would work better, push or pull-based notifications?
1559929355869925376 2022-08-17 15:45:15 +0000 <alexxubyte> 7. For Android, FCM is used to send push notifications. For Apple devices, APNs are used. For web, TV, and other streaming devices, Netflix’s homegrown solution called ‘Zuul Push’ is used.  https://t.co/ans9mwG3Jk
1559929345879052290 2022-08-17 15:45:12 +0000 <alexxubyte> 5. A Cassandra database is used to store the notification data.  6. A push notification is sent to outbound messaging systems.  https://t.co/emPrEznblm
1559929335787573253 2022-08-17 15:45:10 +0000 <alexxubyte> 3. The event management engine listens to specific events and forward events to different queues. The queues are populated by priority-based event forwarding rules  4. The “event priority-based processing cluster” processes events and generates push notifications data for devices  https://t.co/ZKHufe2ITN
1559929325322788864 2022-08-17 15:45:07 +0000 <alexxubyte> 𝐓𝐡𝐞 𝐥𝐢𝐟𝐞 𝐨𝐟 𝐚 𝐩𝐮𝐬𝐡 𝐧𝐨𝐭𝐢𝐟𝐢𝐜𝐚𝐭𝐢𝐨𝐧 1. Push notification events are triggered by the clock, user actions, or by systems.  2. Events are sent to the event management engine.  https://t.co/Nsf3tKuXos
1559929316468613121 2022-08-17 15:45:05 +0000 <alexxubyte> 𝐑𝐞𝐪𝐮𝐢𝐫𝐞𝐦𝐞𝐧𝐭𝐬 &amp; 𝐬𝐜𝐚𝐥𝐞 - 220 million users - Near real-time - Backend systems need to send notifications to various clients - Supported clients: iOS, Android, smart TVs, Roku, Amazon FireStick, web browser
1559929312828043265 2022-08-17 15:45:04 +0000 <alexxubyte> How does Netflix scale push messaging for millions of devices?  This post draws from an article published on Netflix’s engineering blog. Here’s my understanding of how the online streaming giant’s system works.  https://t.co/NMa4QofifR
1559745822102679552 2022-08-17 03:35:57 +0000 <alexxubyte> Just created an Instagram account. If you want to see technical posts popping out on your feed, follow me there 😃 :  https://t.co/voQk746Lkk  https://t.co/gCw9VBSe4R
1559598329922670597 2022-08-16 17:49:52 +0000 <alexxubyte> @AbbasBadran7 Please send an email to hi@bytebytego.com
1559596193088278528 2022-08-16 17:41:22 +0000 <alexxubyte> @vivien_adnot Thanks. Yes,  https://t.co/J4UVks6Huv
1559566956658692098 2022-08-16 15:45:12 +0000 <alexxubyte> I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1559566953894649856 2022-08-16 15:45:11 +0000 <alexxubyte> 👉 Over to you - Which component manages the actual data files? Are there anything important components missing from the diagram?
1559566950505672704 2022-08-16 15:45:11 +0000 <alexxubyte> Step 7 - If the statement is an UPDATE or INSERT, it is passed to the transaction manager for further processing.  Step 8 - During a transaction, the data is in lock mode. This is guaranteed by the lock manager. It also ensures the transaction’s ACID properties.  https://t.co/XIFrOniYnA
1559566943044063232 2022-08-16 15:45:09 +0000 <alexxubyte> Step 6 - Access methods decide whether the SQL statement is read-only. If the query is read-only (SELECT statement), it is passed to the buffer manager for further processing. The buffer manager looks for the data in the cache or data files.  https://t.co/utC1o5AApg
1559566935586525184 2022-08-16 15:45:07 +0000 <alexxubyte> Step 3 - The query tree is sent to the optimizer. The optimizer creates an execution plan.  Step 4 - The execution plan is sent to the executor. The executor retrieves data from the execution.  Step 5 - Access methods provide the data fetching logic required for execution  https://t.co/ulEqCVnMec
1559566927818723328 2022-08-16 15:45:05 +0000 <alexxubyte> Step 1 - A SQL statement is sent to the database via a transport layer protocol (e.g.TCP).  Step 2 - The SQL statement is sent to the command parser, where it goes through syntactic and semantic analysis, and a query tree is generated afterward.  https://t.co/uX8MHJQAMn
1559566919585259520 2022-08-16 15:45:03 +0000 <alexxubyte> How is a SQL statement executed in the database?  The diagram below shows the process. Note that the architectures for different databases are different, the diagram demonstrates some common designs.  https://t.co/mflvuS0ZQX
1559278787979685890 2022-08-15 20:40:07 +0000 <alexxubyte> Enjoy this thread?  You might like our weekly system design newsletter as well.   Subscribe here:  https://t.co/ikUSzBLPZd
1559204568541454336 2022-08-15 15:45:12 +0000 <alexxubyte> /7 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1559204565873860609 2022-08-15 15:45:11 +0000 <alexxubyte> /6 Other good reads: DynamoDB 2022 paper:  https://t.co/VNEAretAzk  Key Takeaways from the DynamoDB Paper by @alexbdebrie:  https://t.co/CVoNN8HhBz  Some notes on DynamoDB 2022 paper by @dxhuang:  http://_.0xffff.me/dynamodb2022.html
1559204562610688000 2022-08-15 15:45:11 +0000 <alexxubyte> /5 Dependencies on external service  https://t.co/hjdHx9qYDf
1559204555182616578 2022-08-15 15:45:09 +0000 <alexxubyte> /4 Periodic archive  https://t.co/3OQ8X89dIm
1559204547850936320 2022-08-15 15:45:07 +0000 <alexxubyte> /3 Write-ahead log &amp; B-tree  https://t.co/qakA4iFAYH
1559204540343209985 2022-08-15 15:45:05 +0000 <alexxubyte> /2 Multi-Paxos group  https://t.co/KkFj8UeyXB
1559204532545921024 2022-08-15 15:45:03 +0000 <alexxubyte> /1 Amazon DynamoDB powered 89 million requests per second during prime days. How does it do that?   The diagrams below are my attempt to draw the latest architecture of DynamoDB based on the 2022 paper. Please leave a comment if you spot any mistakes.   A thread.👇  https://t.co/NgEg0ZKWBq
1558476977262104576 2022-08-13 15:34:01 +0000 <alexxubyte> Newsletter-only bonus content is out: VISA vs American Express  Subscribe now to read it:  https://t.co/PczMAd8Jdb  Next week:  › DynamoDB paper › The life of an SQL statement › How to diagnose slow SQLs › HTTP/1-&gt;HTTP/2-&gt;HTTP/3 (YouTube video) › System Design Interview Tips  https://t.co/TjlNub43jO
1558199662565138434 2022-08-12 21:12:04 +0000 <alexxubyte> @packyM @damccormick13 Congrats Packy!
1558112813024833536 2022-08-12 15:26:57 +0000 <alexxubyte> A picture is worth a thousand words. 𝐃𝐞𝐛𝐮𝐠𝐠𝐢𝐧𝐠 𝐭𝐚𝐜𝐭𝐢𝐜𝐬!  What’s your favorite debugging tactic? Anything missing?  Subscribe to our weekly newsletter to read 100+ 𝐭𝐞𝐜𝐡𝐧𝐢𝐜𝐚𝐥 𝐩𝐨𝐬𝐭𝐬 in one place:  https://t.co/PczMAd8Jdb  https://t.co/we8CjbDXJ9
1557988951041794050 2022-08-12 07:14:46 +0000 <alexxubyte> @OPoncz Dragonfly is great. @sahnlam did mention it in the video 3:13'   https://t.co/EKqSfmf6a4  https://t.co/xtOy2KhD5z
1557913788967292928 2022-08-12 02:16:06 +0000 <alexxubyte> Not sure why it is no longer there but here is the post:  https://t.co/hXAqAXaLQP
1557906330274258944 2022-08-12 01:46:28 +0000 <alexxubyte> My hacker news post titled "Algorithms you should know before you take system design interviews" showed up on the front page of hacker news.   Thank you to those who helped on Twitter!  Link:  https://t.co/lrzRJuc0GO  https://t.co/r3MndCSjoG
1557794043152633856 2022-08-11 18:20:16 +0000 <alexxubyte> Enjoy this thread?  You might like our weekly system design newsletter as well.   Subscribe here:  https://t.co/0RYwcKv26q
1557793530772303872 2022-08-11 18:18:14 +0000 <alexxubyte> @IurySza The only thing I knew about HN was that I shouldn't post a link directly. Otherwise, my account might get flagged. The post is under the "new" tab.  https://t.co/oJhkZMo2hn   Titled: Algorithms you should know before you take system design interviews
1557791365592805377 2022-08-11 18:09:38 +0000 <alexxubyte> Just posted something named "Algorithms you should know before you take system design interviews" on hacker news:  https://t.co/mo4bNHgwU8  I've new to the platform. Can anyone share some tips? Thank you.
1557758686709223424 2022-08-11 15:59:47 +0000 <alexxubyte> /8 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1557758684033216512 2022-08-11 15:59:46 +0000 <alexxubyte> /7 🔹The issuer has other operating costs, including managing customer accounts, providing statements, fraud detection, risk management, clearing &amp; settlement, etc.  Over to you: Does the card network charge the same interchange fee for big merchants as for small merchants?
1557758679952134145 2022-08-11 15:59:45 +0000 <alexxubyte> /6 6. The cardholder pays the issuing bank for its services.  Why should the issuing bank be compensated?  🔹The issuer pays the merchant even if the cardholder fails to pay the issuer.  🔹The issuer pays the merchant before the cardholder pays the issuer.  https://t.co/jhH4eG8euV
1557758670376615937 2022-08-11 15:59:43 +0000 <alexxubyte> /5 5. The card network sets up the 𝐧𝐞𝐭𝐰𝐨𝐫𝐤 𝐚𝐬𝐬𝐞𝐬𝐬𝐦𝐞𝐧𝐭𝐬 𝐚𝐧𝐝 𝐟𝐞𝐞𝐬 with each bank, which pays the card network for its services every month. For example, VISA charges a 0.11% assessment, plus a $0.0195 usage fee, for every swipe.  https://t.co/pwbL9kpqBn
1557758662856216576 2022-08-11 15:59:41 +0000 <alexxubyte> /4 The interchange fee is set by the card network because it is less efficient for each issuing bank to negotiate fees with each merchant.
1557758659165270017 2022-08-11 15:59:40 +0000 <alexxubyte> /3 3 - 4. The acquiring bank keeps $0.25 as the 𝐚𝐜𝐪𝐮𝐢𝐫𝐢𝐧𝐠 𝐦𝐚𝐫𝐤𝐮𝐩, and $1.75 is paid to the issuing bank as the 𝐢𝐧𝐭𝐞𝐫𝐜𝐡𝐚𝐧𝐠𝐞 𝐟𝐞𝐞. The merchant discount fee should cover the interchange fee.  https://t.co/4ZbkdNpxR5
1557758649434456064 2022-08-11 15:59:38 +0000 <alexxubyte> /2 2. The merchant benefits from the use of the credit card with higher sales volume and needs to compensate the issuer and the card network for providing the payment service. The acquiring bank sets a fee with the merchant, called the “𝐦𝐞𝐫𝐜𝐡𝐚𝐧𝐭 𝐝𝐢𝐬𝐜𝐨𝐮𝐧𝐭 𝐟𝐞𝐞.”  https://t.co/GW73tIJkcB
1557758639946887170 2022-08-11 15:59:36 +0000 <alexxubyte> /1 Why is the credit card called “𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐩𝐫𝐨𝐟𝐢𝐭𝐚𝐛𝐥𝐞 product in banks”? How does VISA/Mastercard make money?  The diagram below shows the economics of the credit card payment flow.  1. The cardholder pays a merchant $100 to buy a product.  https://t.co/RjFKhoV7P6
1557514131044831232 2022-08-10 23:48:00 +0000 <alexxubyte> Do you prefer video-based or text-based technical content?   Why is single-threaded Redis (@Redisinc) fast explained in 3 minutes (by @sahnlam).   If you enjoyed this video, you might like our System Design YouTube channel as well. Subscribe here:  https://t.co/tbxD2f7FLB  https://t.co/cqXCbukw9S
1557477171626532864 2022-08-10 21:21:08 +0000 <alexxubyte> Enjoy this thread?  You might like our "Algorithms You Should Know Video Series For System Design":   https://t.co/4fRz617p3u
1557392606836846598 2022-08-10 15:45:07 +0000 <alexxubyte> /4 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1557392604337016834 2022-08-10 15:45:06 +0000 <alexxubyte> /3 Over to you: Another popular in-memory store is Memcached. Do you know the differences between Redis and Memcached?
1557392601703018496 2022-08-10 15:45:05 +0000 <alexxubyte> /2 1. Redis is a RAM-based database. RAM access is at least 1,000 times faster than random disk access.  2. Redis leverages IO multiplexing and single-threaded execution loop for execution efficiency.  3. Redis leverages several efficient lower-level data structures.
1557392597395443712 2022-08-10 15:45:04 +0000 <alexxubyte> /1 Why is single-threaded Redis so fast?  There are 3 main reasons, as shown in the diagram below.  If you prefer video, you can watch our YouTube video here ⇩   https://t.co/7znVk7kHLw  If you prefer text, keep reading:  https://t.co/Mbxe0p1SMC
1557123790252822528 2022-08-09 21:56:56 +0000 <alexxubyte> @nick_zimmerman Thank you. Updated the diagram based on the feedback.    https://t.co/ZwhUdJZfda
1557123285560635392 2022-08-09 21:54:55 +0000 <alexxubyte> Updated design diagram based on feedback.  https://t.co/fpfKGSvbgW
1557059136273072128 2022-08-09 17:40:01 +0000 <alexxubyte> Enjoy this thread?  You might like our "Algorithms You Should Know Video Series For System Design":   https://t.co/4fRz617p3u
1557026511944704000 2022-08-09 15:30:23 +0000 <alexxubyte> 11. I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1557026509356875777 2022-08-09 15:30:22 +0000 <alexxubyte> 10. Both HLS and DASH support adaptive bitrate streaming.  Over to you: What are some of the optimizations that can be done in this process? Which type of storage is suitable for video persistence in step 7?
1557026506743824384 2022-08-09 15:30:22 +0000 <alexxubyte> 9. Note that video conferencing applications like Skype use RTC protocol for low latency  🔹HLS (HTTP Live Streaming): It requires the H.264 or H.265 encoding. Apple devices accept only HLS format  🔹DASH (Dynamic Adaptive Streaming over HTTP): DASH does not support Apple devices
1557026504080384001 2022-08-09 15:30:21 +0000 <alexxubyte> 8. Common protocols for live streaming include:  🔹RTMP (Real-Time Messaging Protocol): This was originally developed by Macromedia to transmit data between a Flash player and a server. Now it is used for streaming video data over the internet.
1557026500120944640 2022-08-09 15:30:20 +0000 <alexxubyte> 7. Step 6: The viewers’ devices decode and decompress the video data and play the video in a video player.  Steps 7 and 8: If the video needs to be stored for replay, the encoded data is sent to a storage server, and viewers can request a replay from it later.  https://t.co/8JIs58mB8H
1557026490885124096 2022-08-09 15:30:18 +0000 <alexxubyte> 6. Step 5: The livestreaming data is pushed to edge servers supported by CDN (Content Delivery Network.) Millions of viewers can watch the video from an edge server nearby. CDN significantly lowers data transmission latency.  https://t.co/CHLeuzoqjD
1557026481322147841 2022-08-09 15:30:15 +0000 <alexxubyte> 5. Step 4: The segmented data is sent to the streaming server. The streaming server needs to support different devices and network conditions. This is called ‘Adaptive Bitrate Streaming.’ This means we need to produce multiple files at different bitrates in steps 2 and 3.  https://t.co/dfEPmJbRW0
1557026471733907456 2022-08-09 15:30:13 +0000 <alexxubyte> 4. Step 3: The encoded data is divided into smaller segments, usually seconds in length, so it takes much less time to download or stream.  https://t.co/RbZeiG3hJ8
1557026462451912704 2022-08-09 15:30:11 +0000 <alexxubyte> 3. Step 2: The video data is compressed and encoded. For example, the compressing algorithm separates the background and other video elements. After compression, the video is encoded to standards such as H.264.   The size of the video data is much smaller after this step.  https://t.co/DN5d15C76e
1557026453178306560 2022-08-09 15:30:09 +0000 <alexxubyte> 2. The diagram below explains what happens behind the scenes to make this possible.  Step 1: The raw video data is captured by a microphone and camera. The data is sent to the server side.  https://t.co/HhCRqW2MVJ
1557026443435003904 2022-08-09 15:30:06 +0000 <alexxubyte> 1. How do video live streamings work on YouTube, TikTok live, or Twitch? The technique is called live streaming.  Livestreaming differs from regular streaming because the video content is sent via the internet in real-time, usually with a latency of just a few seconds.  https://t.co/KYdXpInFF9
1556834262468284416 2022-08-09 02:46:27 +0000 <alexxubyte> 12. I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1556834259922325504 2022-08-09 02:46:26 +0000 <alexxubyte> 11. Also, profile images become tradable assets or part of your personal identity.  Over to you: In content addressing, the generated CID (content identifier) is based on the file content. Do you know which algorithms are used to generate CID?
1556834255258324992 2022-08-09 02:46:25 +0000 <alexxubyte> 10. So, finally, we can see the cool avatar picture.  You might notice that an NFT profile is more complex than a regular solution. But due to the use of smart contracts, blockchains, and IPFS content addressing, we can guarantee the integrity of the intellectual property.  https://t.co/Rh0qwbnVdP
1556834241953943553 2022-08-09 02:46:22 +0000 <alexxubyte> 9. 🔹Step 4: We can now authorize the Twitter page to have read-only access to the wallet. The service goes firstly to the smart contract and retrieves the metadata URI based on token ID. Then, it can load up the picture file from IPFS using the image URI in the metadata.  https://t.co/CplzZdJ9KJ
1556834227991113728 2022-08-09 02:46:19 +0000 <alexxubyte> 8. 🔹Steps 2 and 3: Once the NFT is minted, we need to transfer it to the owner’s address. In blockchains, the address acts as a bank account number. We control the permissions via the private key stored in wallets like Metamask.  https://t.co/VpigkAFeLN
1556834214435098625 2022-08-09 02:46:15 +0000 <alexxubyte> 7. IPFS leverages 𝐂𝐨𝐧𝐭𝐞𝐧𝐭 𝐀𝐝𝐝𝐫𝐞𝐬𝐬𝐢𝐧𝐠 to ensure the generated URI is linked to the file content. No one can replace or alter the file content without breaking the link.  The generated metadata URIs are stored in another dictionary in the smart contract.  https://t.co/A4eTXG5lUw
1556834200208171008 2022-08-09 02:46:12 +0000 <alexxubyte> 6. Metadata and the profile pictures are stored on IPFS, a peer-to-peer network for storing and sharing data in a distributed filesystem. It’s an important extension for blockchains because it’s not possible to store all the data on blockchains.  https://t.co/WZAiT06xih
1556834186656247808 2022-08-09 02:46:09 +0000 <alexxubyte> 5. Token ID is a unique ID for the NFT image. There is a dictionary in the smart contract that stores each token’s ID and its owner’s address. That’s why NFT is called “Non-Fungible Token.” Each image is assigned a unique ID.  https://t.co/qAMNiM4Rlw
1556834172831862786 2022-08-09 02:46:06 +0000 <alexxubyte> 4. The inputs include the image file, name, and description. The mint function returns with the new token ID, metadata URI, and the NFT URI on IPFS (InterPlanetary File System). Let’s go through the outputs one by one.  https://t.co/iFsbM9Us9U
1556834159179378688 2022-08-09 02:46:02 +0000 <alexxubyte> 3. 𝐍𝐅𝐓 𝐩𝐫𝐨𝐟𝐢𝐥𝐞 image  🔹Step 1: To understand the process, we should know what smart contracts are. Smart contracts are programs deployed and stored on blockchains. They are self-executing when predetermined conditions are met. This is when an NFT is “minted.”  https://t.co/NyQzKG5wsL
1556834145363300353 2022-08-09 02:45:59 +0000 <alexxubyte> 2. 𝐑𝐞𝐠𝐮𝐥𝐚𝐫 𝐩𝐫𝐨𝐟𝐢𝐥𝐞 pic 🔹Step 1: The user uploads a profile picture, and this request goes to the user service  🔹Step 2: The picture is stored in an object store, like Amazon S3. A URL is generated to visit the file  🔹Step 3: The picture’s metadata is stored in DB  https://t.co/N9Csxaqq5V
1556834131459264512 2022-08-09 02:45:56 +0000 <alexxubyte> 1. Twitter and Reddit support NFT (Non-Fungible Token) profile pictures. Do you know what the differences between NFT profile pictures and regular profile pictures are?  The diagram below shows how NFT and regular images differ.  https://t.co/iIlILfwBEh
1556668354634682370 2022-08-08 15:47:11 +0000 <alexxubyte> Subscribe to our system design newsletter and YouTube channel here ⇩:  Newsletter:  https://t.co/dkjDPxaiWV YouTube:  https://t.co/I6Q566hsbH
1556668351778197504 2022-08-08 15:47:11 +0000 <alexxubyte> Last Saturday was a special day.   We reached 100,000 Newsletter subscribers. We also reached 100,000 YouTube subscribers on the same day.   Teaching is the one thing that has always made me happy. I’m very grateful that I get to do what I love. For that, thank you ❤️  https://t.co/Vx76td1Vab
1556406565925576705 2022-08-07 22:26:56 +0000 <alexxubyte> @javarevisited Thanks.  https://t.co/Tzxh2isk75
1556405948851167232 2022-08-07 22:24:29 +0000 <alexxubyte> @jitterted  https://t.co/Tzxh2isk75
1556303892152872961 2022-08-07 15:38:57 +0000 <alexxubyte> This video is made by my teammate @sahnlam. Follow him for more videos like this.
1556302457340276736 2022-08-07 15:33:15 +0000 <alexxubyte> QR code payment explained in 2 mins.   Other videos made by us: - Consistent Hashing - Location Based Service - Why is Kafka fast? - What happens when you type a URL into your browser? - How does HTTPS work? - More  Subscribe to Our YouTube channel here:  https://t.co/9qgBqw7QZ9  https://t.co/Br95EwDcA4
1555990814001487872 2022-08-06 18:54:53 +0000 <alexxubyte> @alexbdebrie Thank you, Alex. I haven’t read the paper yet. Will try to read it this weekend and take a close look at your notes too :)
1555940295325274113 2022-08-06 15:34:09 +0000 <alexxubyte> Next week, we will cover:  🔹How credit card companies make money 🔹How live-streaming works 🔹Why is single-threaded Redis fast (video) 🔹Amazon DynamoDB paper 2022 🔹Debugging tactics  Help me reach 100k newsletter (currently at 99,900!). Subscribe here:  https://t.co/dkjDPxrTOt  https://t.co/SBaJY13bR4
1555654909608964096 2022-08-05 20:40:07 +0000 <alexxubyte> Enjoy this thread?  You might like our "Algorithms You Should Know Video Series For System Design":   https://t.co/4fRz617p3u
1555570981246504960 2022-08-05 15:06:37 +0000 <alexxubyte> 10. I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1555570978469449728 2022-08-05 15:06:37 +0000 <alexxubyte> 9. All transfers are confirmed on blockchains in pseudo real-time, saving us from waiting until end-of-day reconciliations.  With blockchains, we can merge wallet services from different banks into one global service.  👉 Over to you: What is blockchain being used for today?
1555570974505938944 2022-08-05 15:06:36 +0000 <alexxubyte> 8. 👉 Can you spot the differences? Blockchain is distributed ledger. It provides a unified interface to handle the common operations on wallets. Instead of opening multiple accounts with different banks, we just need to open a single account on blockchains, which is the address.  https://t.co/ZhZt0QbuiM
1555570963952984064 2022-08-05 15:06:33 +0000 <alexxubyte> 7. 🔹Transfer: Bob opens Metamask and enters Alice’s address, and sends it 2 ETHs. Then Bob signs the transaction to authorize the transfer with the private key. When this transaction is confirmed on blockchains, Bob’s address has 8 ETHs and Alice’s address has 101 ETHs.  https://t.co/dUG0KbhnL9
1555570953467207680 2022-08-05 15:06:31 +0000 <alexxubyte> 6. 𝐖𝐢𝐭𝐡 𝐁𝐥𝐨𝐜𝐤𝐜𝐡𝐚𝐢𝐧𝐬 🔹Deposit &amp; Withdraw: Blockchains support cryptocurrencies, with no cash involved. Bob needs to generate an address as the transfer recipient and store the private key in a crypto wallet like Metamask. Then Bob can receive cryptocurrencies.  https://t.co/XmHR1vK3wk
1555570942637514754 2022-08-05 15:06:28 +0000 <alexxubyte> 5. It happens after BoA and Citi settle all transactions at end-of-day.  🔹Withdrawal process: Bob withdraws his remaining $50 from account B1234. The amount is deducted from B1234, and Bob gets the cash.  https://t.co/NA8jukhtS6
1555570932529315840 2022-08-05 15:06:26 +0000 <alexxubyte> 4. 🔹Transfer process: Bob opens BoA’s App and transfers $50 to Alice’s account at Citi. The amount is deducted from Bob’s account B1234 and credited to Alice’s account C512. The actual movement of cash doesn’t happen instantly.  https://t.co/bWPdy7xtgf
1555570923750641666 2022-08-05 15:06:23 +0000 <alexxubyte> 3. If Bob wants to use the banking services of Citibank (Citi,) he needs to go through the same process all over again.
1555570919564664833 2022-08-05 15:06:22 +0000 <alexxubyte> 2. 𝐈𝐧 𝐛𝐚𝐧𝐤𝐢𝐧𝐠 𝐬𝐲𝐬𝐭𝐞𝐦𝐬 🔹Deposit process: Bob goes to Bank of America (BoA) to open an account and deposit $100. A new account B1234 is created in the wallet system for Bob. The cash goes to the bank’s vault and Bob’s wallet now has $100.  https://t.co/HHRHFEGRk3
1555570908621787136 2022-08-05 15:06:20 +0000 <alexxubyte> 1. Digital wallet in 𝐭𝐫𝐚𝐝𝐢𝐭𝐢𝐨𝐧𝐚𝐥 𝐛𝐚𝐧𝐤𝐬 vs wallet in 𝐛𝐥𝐨𝐜𝐤𝐜𝐡𝐚𝐢𝐧  How does blockchain change digital wallets? Why does VISA invest in blockchains? A thread.  Help me reach 100k newsletter (currently at 99,172)  Subscribe:  https://t.co/dkjDPxrTOt  https://t.co/qHhqD0ASDn
1555388843720712192 2022-08-05 03:02:52 +0000 <alexxubyte> My book showed up in a college magazine in Costa Rica. It is such a great honor for me.   I just want to say thank you to everyone who supported my writing journey!  https://t.co/41CoFhVuOL
1555252274112344064 2022-08-04 18:00:11 +0000 <alexxubyte> Enjoy this thread?  You might like our "Algorithms You Should Know Video Series For System Design":   https://t.co/4fRz617p3u
1555210777052598272 2022-08-04 15:15:18 +0000 <alexxubyte> 9. I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1555210772917080064 2022-08-04 15:15:17 +0000 <alexxubyte> 8. Step 3: Alice’s client application receives the chat message from Bob.  👉 Over to you: What backend stack is commonly used to build a large-scale chat application?  Reference material:  https://t.co/j0HVY71GNr  https://t.co/OKTMwMtNh1
1555210761915363328 2022-08-04 15:15:14 +0000 <alexxubyte> 7. Step 2: The new chat message is added to Redis SortedSet by calling ‘zadd.’ The chat messages are sorted based on arrival time. The pub-sub server then publishes the chat message to the “messages” topic so subscribers can pick up.  https://t.co/aPUzaDs9IM
1555210751500959744 2022-08-04 15:15:12 +0000 <alexxubyte> 6. 🔹Stage 2: Message Handling  Step 1: Bob sends a message to Alice in the chat application.  https://t.co/3OJK5eByEb
1555210740121739264 2022-08-04 15:15:09 +0000 <alexxubyte> 5. Steps 7 and 8: Since Bob is a new member joining the chat application, a message is published to the “member_add” topic and as a result, other participants of the chat application can see Bob.  https://t.co/me0dSy1l8B
1555210728281321472 2022-08-04 15:15:06 +0000 <alexxubyte> 4. Steps 5 and 6: Bob’s client application requires the chat member list and the historical message list. The information is retrieved from Redis and sent to the client application.  https://t.co/62nl1rgec6
1555210716885368832 2022-08-04 15:15:03 +0000 <alexxubyte> 3. Steps 3 and 4: The pub-sub server establishes several connections to Redis. One connection is used to update the Redis data models and publish messages to a topic. Other connections are used to subscribe and listen to updates for topics.  https://t.co/9o0xJLOz23
1555210693921542144 2022-08-04 15:14:58 +0000 <alexxubyte> 1. How do we build a simple 𝐜𝐡𝐚𝐭 𝐚𝐩𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 using 𝐑𝐞𝐝𝐢𝐬?  The diagram below shows how we can leverage the pub-sub functionality of Redis to develop a chat application.  https://t.co/4w7aFPrNvg
1554937127233671169 2022-08-03 21:07:55 +0000 <alexxubyte> @hugaomarques Thank you Hugo!
1554851950012772352 2022-08-03 15:29:27 +0000 <alexxubyte> /13 I hope you've found this thread helpful.  Follow me @alexxubyte for more.  Like/Retweet the first tweet below if you can:
1554851947441577984 2022-08-03 15:29:26 +0000 <alexxubyte> /12 🔹Load balancers like Google Network Load Balancer: distribute persistent connections evenly across backend servers  Over to you - which algorithm should we talk about next?
1554851944895692800 2022-08-03 15:29:26 +0000 <alexxubyte> /11 𝐇𝐨𝐰 𝐜𝐨𝐧𝐬𝐢𝐬𝐭𝐞𝐧𝐭 𝐡𝐚𝐬𝐡𝐢𝐧𝐠 𝐢𝐬 𝐮𝐬𝐞𝐝 𝐢𝐧 𝐭𝐡𝐞 𝐫𝐞𝐚𝐥 𝐰𝐨𝐫𝐥𝐝  🔹Amazon DynamoDB and Apache Cassandra: minimize data movement during rebalancing  🔹Content delivery networks like Akamai: distribute web contents evenly among the edge servers
1554851941703774208 2022-08-03 15:29:25 +0000 <alexxubyte> /10 Here we insert a new server s4 to the left of s0 on the ring. Note that only k0 needs to be moved from s0 to s4. This is because s4 is the first server k0 encounters by going clockwise from k0’s position on the ring. Keys k1, k2, and k3 are not affected.  https://t.co/UkoGeSiKNZ
1554851934036627456 2022-08-03 15:29:23 +0000 <alexxubyte> /9 𝐀𝐝𝐝 𝐚 𝐬𝐞𝐫𝐯𝐞𝐫 Now let’s take a look at what happens when we add a server.
1554851930857299969 2022-08-03 15:29:22 +0000 <alexxubyte> /8 To locate the server for a particular object, we go clockwise from the location of the object key on the ring until a server is found. Continue with our example, key 0 is on server 0, key 1 is on server 1.  https://t.co/UQn1ykRmji
1554851923152343041 2022-08-03 15:29:20 +0000 <alexxubyte> /7 As shown in the diagram, using a hash function, we hash each server by its name or IP address, and place the server onto the ring. Next, we hash each object by its key with the same hashing function.  https://t.co/GcMLtImNfv
1554851915069943813 2022-08-03 15:29:18 +0000 <alexxubyte> /6 𝐂𝐨𝐧𝐬𝐢𝐬𝐭𝐞𝐧𝐭 𝐡𝐚𝐬𝐡𝐢𝐧𝐠  Consistent hashing is an effective technique to mitigate this issue.  The goal of consistent hashing is simple. We want almost all objects to stay assigned to the same server even as the number of servers changes.  https://t.co/TiHZWIsrYA
1554851906974994433 2022-08-03 15:29:17 +0000 <alexxubyte> /5 This approach works well when the size of the cluster is fixed, and the data distribution is even. But when new servers get added to meet new demand, or when existing servers get removed, it triggers a storm of misses and a lot of objects to be moved.
1554851904399609858 2022-08-03 15:29:16 +0000 <alexxubyte> /4 To build such a system with predictable performance, it is important to distribute the data evenly across those servers.  Simple hashing: serverIndex = hash(key) % N, where N is the size of the server pool
1554851901841162241 2022-08-03 15:29:15 +0000 <alexxubyte> /3 𝐖𝐡𝐚𝐭’𝐬 𝐭𝐡𝐞 𝐢𝐬𝐬𝐮𝐞 𝐰𝐢𝐭𝐡 𝐬𝐢𝐦𝐩𝐥𝐞 𝐡𝐚𝐬𝐡𝐢𝐧𝐠?  In a large-scale distributed system, data does not fit on a single server. They are “distributed” across many machines. This is called horizontal scaling.
1554851899156733952 2022-08-03 15:29:15 +0000 <alexxubyte> /2 What do Amazon DynamoDB, Apache Cassandra, Discord, and Akamai CDN have in common?  They all use consistent hashing. Let’s dive right in.
1554851895826558976 2022-08-03 15:29:14 +0000 <alexxubyte> /1 Algorithms you should know series for System Design.  𝐀𝐥𝐠𝐨𝐫𝐢𝐭𝐡𝐦 1: 𝐂𝐨𝐧𝐬𝐢𝐬𝐭𝐞𝐧𝐭 𝐇𝐚𝐬𝐡𝐢𝐧𝐠  If you prefer video, you can watch our YouTube video here ⇩   https://t.co/4fRz617p3u  If you prefer text, keep reading:  https://t.co/DlHG6d5Pvw
1554494730280378368 2022-08-02 15:49:59 +0000 <alexxubyte> Over to you - why do you think both Airbnb and Netflix use GraphQL?  Reference:  https://t.co/nqBncAlnfj  https://t.co/iKZlJ9FjNh
1554494718498590720 2022-08-02 15:49:56 +0000 <alexxubyte> 𝐌𝐢𝐜𝐫𝐨 + 𝐦𝐚𝐜𝐫𝐨𝐬𝐞𝐫𝐯𝐢𝐜𝐞𝐬 (2020 - present)  This is what Airbnb is working on now. The micro and macroservice hybrid model focuses on the unification of APIs.  https://t.co/karsTjXkRT
1554494708730105856 2022-08-02 15:49:54 +0000 <alexxubyte> What’s the challenge? Hundreds of services and dependencies were difficult for humans to manage.
1554494704191807489 2022-08-02 15:49:53 +0000 <alexxubyte> 𝐌𝐢𝐜𝐫𝐨𝐬𝐞𝐫𝐯𝐢𝐜𝐞𝐬 (2017 - 2020) Microservice aims to solve those challenges. In this architecture, key services include:  - Data fetching service - Business logic data service - Write workflow service - UI aggregation service - Each service had one owning team  https://t.co/ajCcJqVL2Z
1554494690925326336 2022-08-02 15:49:50 +0000 <alexxubyte> 𝐌𝐨𝐧𝐨𝐥𝐢𝐭𝐡 (2008 - 2017) Airbnb began as a simple marketplace for hosts and guests. This is built in a Ruby on Rails application - the monolith.  What’s the challenge? - Confusing team ownership + unowned code - Slow deployment  https://t.co/BpiuKSQ5BJ
1554494678937915394 2022-08-02 15:49:47 +0000 <alexxubyte> Evolution of Airbnb’s microservice architecture.  This post is based on a tech talk. Check out the reference link at the end of the thread to read more.  Help me reach 100k this week (System Design Newsletter currently at 97,160).  Subscribe here:  https://t.co/dkjDPxrTOt  https://t.co/jXONsyeApO
1554133470586122240 2022-08-01 15:54:28 +0000 <alexxubyte> 39 rejections, 1 acceptance.  Insane perseverance showed by the candidate  Demonstration of the power of the Google brand  Congrats, Tyler &amp; Google   — Help me reach 100,000 this week (System Design Newsletter currently at 96,485).  Subscribe here:  https://t.co/dkjDPxrTOt  https://t.co/TesOYcAq3M
1553400317097652224 2022-07-30 15:21:11 +0000 <alexxubyte> Next week, we will cover:  🔹 Build chat application with Redis 🔹 Airbnb microservices architecture 🔹 Consistent hashing 🔹 Amazon Dynamodb paper 🔹 Design a blockchain wallet   Join the 95,000+ subscribers here to help me reach 100k next week 🤗:   https://t.co/PczMAd8Jdb  https://t.co/P0QfaoirPb
1553033100547919873 2022-07-29 15:01:59 +0000 <alexxubyte> Over to you: When we close a file in a program, do you know which entries are deleted in these data structures?  Thanks for reading! Follow me at @alexxubyte to get more threads like this.
1553033096466812934 2022-07-29 15:01:58 +0000 <alexxubyte> 🔹 In Filesystem The inode array element stores the actual file information, including permission mode, owners, timestamps, etc. inode also points to the data blocks stored in the filesystem.  https://t.co/iDMcQI7uyG
1553033085133852672 2022-07-29 15:01:56 +0000 <alexxubyte> In each file table entry, there is a vnode pointer, which points to an entry in 𝐯𝐧𝐨𝐝𝐞 𝐭𝐚𝐛𝐥𝐞. The static information includes file type, function pointers, reference counts, inode etc. inode describes a physical object in the filesystem.  https://t.co/uGNVZcte3e
1553033074388086784 2022-07-29 15:01:53 +0000 <alexxubyte> Since different open file table entries can represent the same file, it is a waste of resources to store the file static information so many times. We need another abstraction layer called ‘vnode table’ to store the static data.  https://t.co/iILn757M85
1553033063046602753 2022-07-29 15:01:50 +0000 <alexxubyte> The file pointer points to an entry in the 𝐨𝐩𝐞𝐧 𝐟𝐢𝐥𝐞 𝐭𝐚𝐛𝐥𝐞, which has information about open files across all processes. Multiple file descriptors can point to the same file table entry. For example, file descriptor 0,1 and 2 point to the same open file table entry.  https://t.co/6h8nmEMIZd
1553033050480513024 2022-07-29 15:01:47 +0000 <alexxubyte> Notice that file descriptors 0, 1 and 2 are reserved in each file descriptor table to represent stdin, stdout and stderr.  https://t.co/gUjeOfxQWh
1553033038476374016 2022-07-29 15:01:44 +0000 <alexxubyte> 🔹 In Kernel Space In Linux kernel, there is a 𝐩𝐫𝐨𝐜𝐞𝐬𝐬 𝐭𝐚𝐛𝐥𝐞 to maintain the data for the processes. Each process has an entry in the table. Each process maintains a file descriptor table, with file descriptors as its indices.  https://t.co/QYXqiuYojm
1553033027072040960 2022-07-29 15:01:42 +0000 <alexxubyte> 🔹 In User Space When we open a file called “fileA.txt” in Process 1234, we get file descriptor fd1, which is equal to 3. We can then pass the file descriptor to other functions, to write data to the file.  https://t.co/7KiPt7xYUq
1553033018033352704 2022-07-29 15:01:40 +0000 <alexxubyte> Each process maintains its own file descriptor table.  The diagram below shows the layered architecture in Linux filesystem. Let’s take process 1234 as an example.
1553033015403560963 2022-07-29 15:01:39 +0000 <alexxubyte> A file descriptor represents an open file. It is a unique number assigned by the operating system to each file. It is an 𝐚𝐛𝐬𝐭𝐫𝐚𝐜𝐭𝐢𝐨𝐧 for working with files. We need to use file descriptors to read from or write to files in our program.
1553033011016306689 2022-07-29 15:01:38 +0000 <alexxubyte> How do we interact with Linux Filesystem via 𝐟𝐢𝐥𝐞 𝐝𝐞𝐬𝐜𝐫𝐢𝐩𝐭𝐨𝐫𝐬?  https://t.co/WfWlmg1uiX
1552673254648647686 2022-07-28 15:12:05 +0000 <alexxubyte> Over to you: ACH is a US financial network. If you live outside the US, do you know what payment method your employer uses to send payment? What’s the difference between ACH and wire transfer?  Thanks for reading! Follow me at @alexxubyte to get more threads like this.
1552673252161437696 2022-07-28 15:12:05 +0000 <alexxubyte> ACH is a next-day settlement system. It means transactions sent out by 7 PM on one day will arrive the following morning.  Since 2018, it’s possible to choose Same Day ACH so funds can be transferred on the same business day.
1552673248055558144 2022-07-28 15:12:04 +0000 <alexxubyte> 🔹Step 5: The RDFI operates on the receiver’s bank accounts based on the instructions in the ACH files. In our case, the receiver receives $100 from the originator. This is done when the RDFI opens for business at 6 AM the next day.  https://t.co/zP0X29bvEt
1552673237028335616 2022-07-28 15:12:01 +0000 <alexxubyte> 🔹Step 4: The ACH files are processed around midnight and made available to the receiving bank RDFI (Receiving Depository Financial Institution.)  https://t.co/4GkDAJlsmP
1552673226538397696 2022-07-28 15:11:59 +0000 <alexxubyte> There are two ACH operators, one is the Federal Reserve (FedACH), and the other is EPN (Electronic Payment Network – which is operated by a private company).  https://t.co/mMb6pR7W3Q
1552673216207790080 2022-07-28 15:11:56 +0000 <alexxubyte> 🔹Step 3: After normal business hours in the evening, the ODFI bank forwards the ACH files to the ACH operator for clearing and settlement.  https://t.co/gIT1gYqZwO
1552673205059342336 2022-07-28 15:11:54 +0000 <alexxubyte> 🔹Step 2: The third-party processor generates ACH files on behalf of the originator. The files are uploaded to an SFTP established by the ODFI. This should be done by the 7 PM cut-off time, as specified by the ODFI bank.  https://t.co/TDDjqIGB55
1552673194938621955 2022-07-28 15:11:51 +0000 <alexxubyte> 🔹Step 1: The originator company originates salary payment transactions. The transactions are sent to a 3rd-party processor like Gusto. The third-party processor helps with ACH-related services like generating ACH files, etc.  https://t.co/VJKEFqsKdo
1552673186377895937 2022-07-28 15:11:49 +0000 <alexxubyte> Then the transaction receiver needs to authorize the originator for certain types of transactions.
1552673182158503936 2022-07-28 15:11:48 +0000 <alexxubyte> 🔹Step 0: Before we can use ACH network, the originator who starts the transactions needs to open an account at a commercial bank because only banks are allowed to initiate ACH transactions directly. The bank is called ODFI (Originating Depository Financial Institution).  https://t.co/Rd5ANo9Ene
1552673173212000256 2022-07-28 15:11:46 +0000 <alexxubyte> ACH handles retail transactions and is part of American retail payment systems. It processes transactions in 𝐛𝐚𝐭𝐜𝐡𝐞𝐬, not in real-time. The diagram below shows how ACH direct deposit works with payrolls.
1552673169047138311 2022-07-28 15:11:45 +0000 <alexxubyte> Do you know how you get paid at work?  In the US, tech companies usually run payrolls via Automatic Clearing House (𝐀𝐂𝐇).  https://t.co/tFaAnXYIaB
1552318965145227266 2022-07-27 15:44:16 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week:   https://t.co/PczMAd8Jdb
1552318962347622401 2022-07-27 15:44:15 +0000 <alexxubyte> Over to you: We have detailed how to pay using a dynamic QR code. But sometimes, you could pay by scanning a printed QR code in a merchant’s shop, which is called the static QR code. Do you know how a static QR code works?
1552318957738070018 2022-07-27 15:44:14 +0000 <alexxubyte> 4. The PSP payment gateway marks this QR code as paid and returns a success message to the consumer’s digital wallet App.  5. The PSP payment gateway notifies the merchant that the consumer has paid the given QR code.  https://t.co/lVFF6ycRSj
1552318943179640832 2022-07-27 15:44:11 +0000 <alexxubyte> 1. The consumer opens their digital wallet app to scan the QR code.  2. After confirming the amount is correct, the client clicks the “pay” button.  3. The digital wallet App notifies the PSP that the consumer has paid the given QR code.  https://t.co/wrc7YloZWP
1552318927748734976 2022-07-27 15:44:07 +0000 <alexxubyte> 6. The merchant’s computer sends the QR code URL (or image) to the checkout counter.  7. The checkout counter displays the QR code.  These 7 steps complete in less than a second. Now it’s the consumer’s turn to pay from their digital wallet by scanning the QR code:  https://t.co/Cu0XbIsKQw
1552318913576181761 2022-07-27 15:44:04 +0000 <alexxubyte> 2. The cashier’s computer sends the order ID and the amount to PSP.  3. The PSP saves this information to the database and generates a QR code URL.  4. PSP’s Payment Gateway service reads the QR code URL.  5. The payment gateway returns the QR code URL to the merchant’s computer.  https://t.co/mQEomvVp4g
1552318899785347075 2022-07-27 15:44:01 +0000 <alexxubyte> 1. When you want to pay for your shopping, the cashier tallies up all the goods and calculates the total amount due, for example $123.45. The checkout has an order ID of SN129803. The cashier clicks the “checkout” button.  https://t.co/8X7V9cY6VJ
1552318886002839552 2022-07-27 15:43:57 +0000 <alexxubyte> 1. Merchant generates a QR code and displays it on the screen  2. Consumer scans the QR code and pays  Here are the steps for generating the QR code:  https://t.co/Ktyhxxvfyd
1551955240013799425 2022-07-26 15:38:57 +0000 <alexxubyte> Thanks for reading! Follow me at @alexxubyte to get more threads like this.
1551955236838731776 2022-07-26 15:38:57 +0000 <alexxubyte> Page 2  Source of the images:  https://t.co/8ToqqeTrF6  https://t.co/o8cz6apMX5
1551955229356146690 2022-07-26 15:38:55 +0000 <alexxubyte> I recently discovered a cheat sheet that covers many design patterns, intended to jog your memory about how different patterns work.   Page 1  https://t.co/QtfDDWdDXM
1551629962259550208 2022-07-25 18:06:25 +0000 <alexxubyte> @edwardCamelCase For system design volume2, we use omnigraffle. For social media posts, we usually use  https://t.co/J4UVks6Huv
1551592121475276805 2022-07-25 15:36:03 +0000 <alexxubyte> Thanks for reading! Follow me at @alexxubyte to get more threads like this.  Twitter doesn’t allow me to add more examples and links. To see the complete article, subscribe to my blog/newsletter here:  https://t.co/PczMAd8Jdb The post is on the top.  https://t.co/F6bXyrBNDz
1551592110301728769 2022-07-25 15:36:00 +0000 <alexxubyte> 6. Go diagrams: Create beautiful system diagrams with Go.  Over to you - Did I miss anything?  https://t.co/JoO5DGyHzk
1551592093730349056 2022-07-25 15:35:56 +0000 <alexxubyte> 5. Markmap: Visualize your Markdown as mindmaps. It supports the VS code plugin.  https://t.co/2PRvoXnbJX
1551592083210661889 2022-07-25 15:35:54 +0000 <alexxubyte> 4. PlantUML: It is an open-source tool allowing users to create diagrams from plain text language.  https://t.co/phbjguU0Yg
1551592075040198656 2022-07-25 15:35:52 +0000 <alexxubyte> 3. ASCII editor: ASCII charts and diagrams editor allows to create text diagrams for emails, README files, text specifications, etc.  https://t.co/NALJ2g5olh
1551592063564599296 2022-07-25 15:35:49 +0000 <alexxubyte> 2. Mermaid: Generation of diagram and flowchart from the text in a similar manner as markdown  https://t.co/Wu0buc3fre
1551592055654080515 2022-07-25 15:35:47 +0000 <alexxubyte> 1. Diagrams: Turn python code into cloud system architecture diagrams  https://t.co/N3nnePSzqM
1551592045776494592 2022-07-25 15:35:45 +0000 <alexxubyte> Special thanks go to @madawei2699, for inspiring me to write this thread and for generously agreeing to share some of the diagrams he drew. Now let’s get started.
1551592042328821761 2022-07-25 15:35:44 +0000 <alexxubyte> Diagram as code: 6 ways to turn code into beautiful architecture diagrams. A thread.  https://t.co/hWY5rjaenH
1551580956754006017 2022-07-25 14:51:41 +0000 <alexxubyte> @GergelyOrosz Thank you for your recommendation. I greatly appreciate it. Your newsletter (@Pragmatic_Eng)  is a big inspiration for me.
1551222693646594048 2022-07-24 15:08:05 +0000 <alexxubyte> @diannagara For the physical version, it is only available on Amazon. Make sure it ships from and sold by  https://t.co/MtbNWJAnuf.  For the digital version, you can get it from my website:  https://t.co/80EUzTQAQh
1551222211972763649 2022-07-24 15:06:10 +0000 <alexxubyte> In this way, one failure doesn’t hurt the entire Plan. JWST can continue with the rest of the Plan. This maximizes efficiency and resilience.  Over to you: How to engineer and test mission-critical software?  Reference: [1]  https://t.co/BHxfsVQL9C
1551222209493942273 2022-07-24 15:06:09 +0000 <alexxubyte> The OPE can: 🔹 Skip Visits based on script status 🔹 Add Visits to the end of the Plan 🔹 Remove Visits to redefine the end of the Plan 🔹 Stop the Plan after a specified Visit or stop the entire plan
1551222203076599808 2022-07-24 15:06:08 +0000 <alexxubyte> Step 4: When a command is issued, these lower-level scripts evaluate the telemetry response and pass the script status up to the OPE. Based on the script status, the OPE can skip Visits. [1]  https://t.co/QnCzVBukvx
1551222191554908160 2022-07-24 15:06:05 +0000 <alexxubyte> Step 3: The activity onboard scripts construct the commands and telemetry requests in real-time, onboard the JWST. [1]  https://t.co/OSn2MeI8Ov
1551222178938380296 2022-07-24 15:06:02 +0000 <alexxubyte> Step 2: These Observation Plans are processed by high-level onboard scripts, called the Observation Plan Executive (OPE). The OPE passes the activity parameters from the time-ordered Visits to lower-level onboard scripts. [1]  https://t.co/3jP5xSi1fS
1551222168570105856 2022-07-24 15:05:59 +0000 <alexxubyte> These Visits can build a long-range plan, which is about one year in duration, or a short-range plan, which is about 22 days in duration. The plans are called an Observation Plan [1].
1551222164816158720 2022-07-24 15:05:59 +0000 <alexxubyte> The diagram below shows the architecture. Step 1: When the observation plans are designed for JWST, the team needs to come up with a proposal. The proposal is broken up into scheduling units called ‘Visits.’ Each Visit has a corresponding observing window.  https://t.co/RQ1ULyV09G
1551222152497483776 2022-07-24 15:05:56 +0000 <alexxubyte> Do you know the James Webb Space Telescope (JWST) uses an 𝐞𝐯𝐞𝐧𝐭-𝐝𝐫𝐢𝐯𝐞𝐧 architecture for its operations?  Disclaimer: This post reflects my understanding of the paper: JWST: Maximizing Efficiency... by the Space Telescope Science Institute. For details, refer to [1].  https://t.co/HySG7DZR56
1551219519841923074 2022-07-24 14:55:28 +0000 <alexxubyte> Another sad story on book publishing. The book piracy issue is very widespread on Amazon. The same thing has happened to my book many times. Unfortunately, I don't see any long-term fix from Amazon.
1551216055124520960 2022-07-24 14:41:42 +0000 <alexxubyte> @fchollet This is a very widespread issue. The same thing has happened to my book many times. The issue is much worse outside the US. Hope some Amazon employees can see this and help to resolve it asap.   https://t.co/EAoo0AXdZi
1550863718983946240 2022-07-23 15:21:38 +0000 <alexxubyte> I just sent the ByteByteGo newsletter to 90,000 subscribers.  Next week: ► How does your salary get deposited into your bank ► Diagramming tools ► Linux file descriptor ► PayPal payment ► Design patterns   Subscribe to learn something new every week:  https://t.co/PczMAd8Jdb  https://t.co/dyOwmYqRH3
1550648179414052864 2022-07-23 01:05:10 +0000 <alexxubyte> @bhcarpenter @Meta Congratulations Brandon. Wishing you the absolute best!
1550640914078392320 2022-07-23 00:36:18 +0000 <alexxubyte> @wowebookpro Yes, it’s in the works!
1550493219460239360 2022-07-22 14:49:24 +0000 <alexxubyte> The core algorithm starts at 13:50.  If you find it helpful, please follow me at @alexxubyte. I write and share system design and book-writing tips.
1550492484962115590 2022-07-22 14:46:29 +0000 <alexxubyte> Many asked us to make 𝐯𝐢𝐝𝐞𝐨𝐬 of the algorithms you should know before taking system design interviews.   We like the idea, and just made a video about 𝐆𝐞𝐨𝐡𝐚𝐬𝐡 and 𝐐𝐮𝐚𝐝𝐭𝐫𝐞𝐞.   Will try to cover all in the list.  Subscribe and watch:  https://t.co/9qgBqw7QZ9  https://t.co/ZcKCvdQf2e
1550153827927543808 2022-07-21 16:20:47 +0000 <alexxubyte> The video about location-based services (Yelp, Google Location) is finally ready!   𝐖𝐡𝐚𝐭 𝐲𝐨𝐮’𝐥𝐥 𝐥𝐞𝐚𝐫𝐧 𝐢𝐧 20 𝐦𝐢𝐧𝐮𝐭𝐞𝐬 ► API design ► Data model ► Geospatial index ► Geohash ► Quadtree ► Trade-offs ► Scale   Subscribe &amp; watch:  https://t.co/2mYAF4mxSr  https://t.co/n4JK3bsPb2
1549781860510642176 2022-07-20 15:42:43 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week:  https://t.co/PczMAd8Jdb
1549781858031845377 2022-07-20 15:42:43 +0000 <alexxubyte> Over to you: What are some of the other 2-factor authentication devices you used?
1549781855473307649 2022-07-20 15:42:42 +0000 <alexxubyte> 🔹 Can the 6-digit password be guessed by hackers? No. The password has 6 digits, so the generated password has 1 million combinations. Plus, the password changes every 30s. If hackers want to guess the password in 30 seconds, they need to enter 30,000 combinations per second.
1549781852965126145 2022-07-20 15:42:41 +0000 <alexxubyte> Is this authentication mechanism 𝐬𝐚𝐟𝐞?  🔹 Can the secret key be obtained by others? We need to make sure the secret key is transmitted using HTTPS. The authenticator client and the database store the secret key, and we need to make sure the secret keys are encrypted.
1549781848569442304 2022-07-20 15:42:40 +0000 <alexxubyte> Step 5: The authentication service compares the two passwords generated by the client and the server, and returns the comparison result to the frontend. Bob can proceed with the login process only if the two passwords match.  https://t.co/BbZl6sQ22T
1549781837030903809 2022-07-20 15:42:38 +0000 <alexxubyte> Steps 3 and 4: The frontend sends the password Bob enters to the backend for authentication. The authentication service reads the secret key from the database and generates a 6-digit password using the same TOTP algorithm as the client.  https://t.co/XNojA418v5
1549781824720646144 2022-07-20 15:42:35 +0000 <alexxubyte> 𝐒𝐭𝐚𝐠𝐞 2 Steps 1 and 2: Bob wants to log into a website with Google two-step verification. For this, he needs the password. Every 30s, Google Authenticator generates a 6-digit pwd using TOTP (Time-based One Time Password) algorithm. Bob uses the password to enter the website.  https://t.co/FVdevN7i08
1549781812976574464 2022-07-20 15:42:32 +0000 <alexxubyte> Step 4: Bob then uses Google Authenticator to scan the generated QR code. The secret key is stored in the authenticator.  https://t.co/V2jFBYY8NE
1549781801731665920 2022-07-20 15:42:29 +0000 <alexxubyte> Step 3: The authentication service returns a URI to the frontend. The URI is composed of key issuer, username and secret key. The URI is displayed in the form of a QR code on the web page.  https://t.co/gkA4I59H89
1549781790310551552 2022-07-20 15:42:27 +0000 <alexxubyte> 𝐒𝐭𝐚𝐠𝐞 1 Steps 1 and 2: Bob opens the web page to enable two-step verification. The front end requests a secret key. The authentication service generates the secret key for Bob and stores it in the database.  https://t.co/K1XQMmXvAw
1549781778369392642 2022-07-20 15:42:24 +0000 <alexxubyte> There are two stages involved:  🔹 Stage 1 - The user enables Google two-step verification 🔹 Stage 2 - The user uses the authenticator for logging in, etc.  Let’s look at these stages.  https://t.co/4LQCpZY4YR
1549601910470021122 2022-07-20 03:47:40 +0000 <alexxubyte> I just packaged all the books for the last giveaway winners.   Gathering addresses, creating shipping labels, and packing books took longer than expected.   BUT it’s quite a fun experience. I got to know a lot of cool international places.  https://t.co/KcTFnu2oMJ
1549586065769394179 2022-07-20 02:44:42 +0000 <alexxubyte> @LBacaj Just bought it. Congrats on the launch!
1549531401581539330 2022-07-19 23:07:29 +0000 <alexxubyte> @planetravelover Wow. Thanks!
1549512650643554304 2022-07-19 21:52:59 +0000 <alexxubyte> @lennysan Congrats, Lenny. The amount of high-quality content you produce is truly amazing!
1549414785363587072 2022-07-19 15:24:06 +0000 <alexxubyte> Original article:  https://t.co/4GilFycCR6  https://t.co/KMq5mHwaiP
1549414780930183168 2022-07-19 15:24:05 +0000 <alexxubyte> Interesting read: the 2022 API Platform Landscape: Trends and Challenges by Postman.  What are some of the challenges you've faced when designing the API layer?  https://t.co/FMB8YvcDJX
1549246376696983552 2022-07-19 04:14:54 +0000 <alexxubyte> @haoel Very good points. I was trying to make the post short, but obviously, it’s too short :) Thanks for the feedback. I will make some adjustments and post it again on Cyber Monday, 11/28 :)
1549230633267785729 2022-07-19 03:12:20 +0000 <alexxubyte> @haoel Hi Hao, I’m a big fan of your blog. Good to see you on Twitter! As for the design, I didn’t mean to replicate the Amazon design. The post presents a possible design that readers can talk about for about 45 minutes in a system design interview.
1549052119449096192 2022-07-18 15:22:59 +0000 <alexxubyte> Over to you: What are your top SEO recommendations?
1549052116919939073 2022-07-18 15:22:59 +0000 <alexxubyte> 🔹 External link If our website is referenced by a highly-ranked website, it will increase our website’s ranking. So carefully building external links is important. Publishing high-quality content on your website which is useful to others, is a good way to attract external links.
1549052114369884161 2022-07-18 15:22:58 +0000 <alexxubyte> Another aspect is the user experience. In May 2020, Google published Core Web Vitals, officially listing user experience as an important factor of page ranking algorithms.
1549052110250971136 2022-07-18 15:22:57 +0000 <alexxubyte> 🔹 Optimize the web page The crawler crawls the HTML contents, therefore the title and description should be optimized to include keywords and also be concise. The body of the web page should include relevant keywords.  https://t.co/BdMUv9A66c
1549052097248628736 2022-07-18 15:22:54 +0000 <alexxubyte> Keywords must be relevant to what the website is selling and it must have business values. For example, a keyword is considered valuable if it’s a popular search, but has fewer search results.
1549052094614646785 2022-07-18 15:22:54 +0000 <alexxubyte> The URLs must be short and descriptive. Try to include keywords in the URLs, as well. It will also help to use HTTPS. But definitely don’t use underscore in the URL because that will screw up the tokenization.  🔹 Choose the keywords to optimize for:
1549052091976392704 2022-07-18 15:22:53 +0000 <alexxubyte> 🔹 Optimize website structure:  We need to make it easier for the crawler to crawl our website. Remove anything the crawler cannot read, including flash, frames, and dynamic URLs. Make the website hierarchy less deep, so the web pages are less distant from the main home page.
1549052089266974721 2022-07-18 15:22:52 +0000 <alexxubyte> 🔹 When a user types in a search term, the search engine uses the indices and ranking algorithms to rank the web pages and presents the search results to the user.  How do we make our website rank higher in search results? The diagram below shows some ways to do this.
1549052086704254978 2022-07-18 15:22:52 +0000 <alexxubyte> - The preprocessor calculates the hyperlink relationships, for example, how many hyperlinks are on the web page and how many hyperlinks point to it.
1549052084200148992 2022-07-18 15:22:51 +0000 <alexxubyte> - It removes HTML tags and ‘Stop’ words, which are words like ‘a’ or ‘an’ or ‘the.’ It also removes other noise that is not relevant to the web page's content, for example, the disclaimer.  - Then the keywords form structured indices, called forward indices and inverted indices.
1549052080198823936 2022-07-18 15:22:50 +0000 <alexxubyte> A search engine works in 3 stages:  🔹 The crawler reads the page content (HTML code) and follows the hyperlink to read more web pages.  🔹 The preprocessor also works in 3 steps:  https://t.co/aiIFvFYU2v
1549052067255238656 2022-07-18 15:22:47 +0000 <alexxubyte> You have just developed a new website. What does it take to be ranked at the top?  We need to understand how search engines rank websites and then to optimize our website to be search engine-friendly. This is called SEO (Search Engine Optimization).  https://t.co/bfc1rmNrh5
1548684213003571202 2022-07-17 15:01:04 +0000 <alexxubyte> The first 𝐥𝐨𝐧𝐠 YouTube video of the System Design Interview series will be ready soon. It is about designing a proximity service.  It contains the content of 40 pages of video script + animation plan!  ✅ Subscribe to our YouTube so you won’t miss it.   https://t.co/D3Z1ax6Zle  https://t.co/IRhoMG4sOE
1548327166021996547 2022-07-16 15:22:17 +0000 <alexxubyte> I just sent the ByteByteGo newsletter to 90,000 subscribers.  Next week: 🔹 Proximity service(YouTube) 🔹 2FA 🔹 SEO 🔹 Linux file systems 🔹 Event-driven architecture of James Webb Space Telescope   Subscribe to learn something new every week:  https://t.co/PczMAd8Jdb  https://t.co/CD1nPKRuFz
1547974091671367681 2022-07-15 15:59:18 +0000 <alexxubyte> There are some interesting discussions in the comments section:   https://t.co/JXO4GUGq6D
1547958643244445697 2022-07-15 14:57:54 +0000 <alexxubyte> The diagram below shows the naive design.   🔹Is the design correct? 🔹Do you think the design satisfies all the requirements? 🔹If not, what else should be added?  Feel free to make your assumptions, comment with anything you think might be helpful, or post your design.  https://t.co/dpS8DiekNh
1547958637812846592 2022-07-15 14:57:53 +0000 <alexxubyte> Let’s try something different today.   Assuming in a system design interview, you are asked to design a distributed message queue. The following requirements are given:  1. Producers send messages 2. Consumers consume messages 3. Messages can be consumed repeatedly or only once  https://t.co/VaOiYK62Kx
1547610311020097537 2022-07-14 15:53:46 +0000 <alexxubyte> Overall to you: What comes after containers? Serverless and edge computing come to mind. They make the developer productivity and deployment stories even more compelling, but with their own sets of tradeoffs. What are the tradeoffs?
1547610308432130051 2022-07-14 15:53:45 +0000 <alexxubyte> 𝐃𝐨𝐰𝐧𝐬𝐢𝐝𝐞:  🚫Potentially less secure  In conclusion, system design is about tradeoffs. It is no different when it comes to bare metal, virtual machines and containers. There is no single right answer.
1547610305865273344 2022-07-14 15:53:44 +0000 <alexxubyte> ✅ All these make containers even easier to deploy and maintain at scale.
1547610303315075072 2022-07-14 15:53:44 +0000 <alexxubyte> 𝐁𝐞𝐧𝐞𝐟𝐢𝐭𝐬: ✅ The container engine provides even faster resource provisioning.  ✅ Containers are scalable and portable.  ✅ Since each container runs as a native process of the host operating system, they are much faster to start.
1547610299687002115 2022-07-14 15:53:43 +0000 <alexxubyte> 𝐂𝐨𝐧𝐭𝐚𝐢𝐧𝐞𝐫𝐬  A container is a lightweight and standalone package of an application with all its dependencies like libraries, frameworks, and runtime. Containerization is considered to be a lightweight version of virtualization.  https://t.co/TpvB4de3WL
1547610292346966019 2022-07-14 15:53:41 +0000 <alexxubyte> 🚫 Virtual machines could be vulnerable to the noisy neighbor problem.
1547610289780056065 2022-07-14 15:53:40 +0000 <alexxubyte> Each virtual machine has its own guest operating system. On top of each guest operating system runs the applications for a tenant.  𝐁𝐞𝐧𝐞𝐟𝐢𝐭𝐬:  ✅ Virtual machines are cheaper to run.  ✅ They are easier to scale.  𝐃𝐨𝐰𝐧𝐬𝐢𝐝𝐞:
1547610287271841794 2022-07-14 15:53:40 +0000 <alexxubyte> The hypervisor manages virtual machines. It creates an abstraction layer over the hardware, so that multiple operating systems can run alongside each other.
1547610283828400137 2022-07-14 15:53:39 +0000 <alexxubyte> 𝐕𝐢𝐫𝐭𝐮𝐚𝐥 𝐦𝐚𝐜𝐡𝐢𝐧𝐞  A virtual machine is the emulation of a physical computer. This is called virtualization.  Running on top of the host operating system is a special piece of software called a hypervisor. This is also known as a virtual machine monitor.  https://t.co/2Jvtt5UYWJ
1547610276593143813 2022-07-14 15:53:37 +0000 <alexxubyte> ✅ Second, the isolation provides the highest level of security.  𝐃𝐨𝐰𝐧𝐬𝐢𝐝𝐞:  🚫 Bare metal is expensive, hard to manage, and hard to scale.
1547610273946542081 2022-07-14 15:53:37 +0000 <alexxubyte> For software applications that require the absolute highest performance from the hardware, bare metal could be a good way to go.  Bare metal servers are physically isolated.  𝐁𝐞𝐧𝐞𝐟𝐢𝐭𝐬:  ✅ First, it is not affected by the noisy neighbor problem.
1547610270113026048 2022-07-14 15:53:36 +0000 <alexxubyte> 𝐁𝐚𝐫𝐞 𝐦𝐞𝐭𝐚𝐥  The granddaddy of these is bare metal. A bare metal server is a physical computer that is a single tenant only.  Bare metal gives us complete control over the hardware resources and the software stack to run.  https://t.co/iqbMCmdYrB
1547610261070090242 2022-07-14 15:53:34 +0000 <alexxubyte> What are the differences between 𝐛𝐚𝐫𝐞 𝐦𝐞𝐭𝐚𝐥, 𝐯𝐢𝐫𝐭𝐮𝐚𝐥 𝐦𝐚𝐜𝐡𝐢𝐧𝐞𝐬, or 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐞𝐫𝐬? When deploying a modern application stack, how do we decide which one to use?  You can watch it here:  https://t.co/9qgBqw7QZ9  If you prefer text, keep reading:  https://t.co/gRnJPoHJ9F
1547341026955644929 2022-07-13 22:03:43 +0000 <alexxubyte> @tacertain Thank you. I overreacted on the original post, and sorry for that. I appreciate your understanding. The link you provided about Amazon documentation was very helpful.
1547247805256806400 2022-07-13 15:53:17 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt
1547247802748510209 2022-07-13 15:53:17 +0000 <alexxubyte> Over to you: I have detailed how to pay using a dynamic QR code. It is dynamic because the QR code is dynamically generated each time. But sometimes, you could pay by scanning a printed QR code in a merchant’s shop, which is called the static QR code. Do you know how it works?
1547247792233467905 2022-07-13 15:53:14 +0000 <alexxubyte> 1. The consumer opens their digital wallet app to scan the QR code.  2. After confirming the amount is correct, the client clicks the “pay” button.  3. The digital wallet App notifies the PSP that the consumer has paid the given QR code.  https://t.co/BiHZQ1jfK9
1547247784532660229 2022-07-13 15:53:12 +0000 <alexxubyte> 6. The merchant’s computer sends the QR code URL (or image) to the checkout counter.  7. The checkout counter displays the QR code.  These 7 steps complete in less than a second. Now it’s the consumer’s turn to pay from their digital wallet by scanning the QR code:  https://t.co/h7pqSDQOsW
1547247761057124352 2022-07-13 15:53:07 +0000 <alexxubyte> 1. Merchant generates a QR code and displays it on the screen 2. Consumer scans the QR code and pays  Here are the steps for generating the QR code:
1547247757747834880 2022-07-13 15:53:06 +0000 <alexxubyte> How do you pay from your digital wallets, such as Paytm, Paypal, and Venmo, by scanning the QR code?  To understand the process involved, we need to divide the “scan to pay” process into two sub-processes:  https://t.co/lPZ4FQIw7M
1546996241468313600 2022-07-12 23:13:40 +0000 <alexxubyte> @alfarabyab Don’t take the word "lock" literally. One possible solution is to use atomic operations in cache instead of DB lock.
1546987058018656256 2022-07-12 22:37:10 +0000 <alexxubyte> @tacertain You are right. I don’t have insight into how Amazon systems work. If I do, I’m probably not allowed to write it. This was meant for a 45 minutes interview (Design a flash sale system). I realized the title could be misleading and should have changed that to make it clear.
1546884691524866048 2022-07-12 15:50:24 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt
1546884688907620352 2022-07-12 15:50:24 +0000 <alexxubyte> In the process, the card network takes on the burden of talking to each bank and receives service fees in return.  Over to you: Do you think this flow is way too complicated? What will be the future of payments, in your opinion?
1546884674181468160 2022-07-12 15:50:20 +0000 <alexxubyte> Step 3: The card network performs clearing for the transactions collected from different acquirers, and sends the clearing files to different issuing banks.  Step 4: The issuing banks confirm the correctness of the clearing files, and transfer money to the relevant acquiring bank  https://t.co/PA5LmV6dip
1546884663058108417 2022-07-12 15:50:18 +0000 <alexxubyte> 🔹Capture and Settlement Flow  Steps 1 and 2: The merchant wants to collect the money at the end of the day, so they hit ”capture” on the POS terminal. The transactions are sent to the acquirer in batch. The acquirer sends the batch file with transactions to the card network.  https://t.co/LSFSz8Sh8R
1546884651922235393 2022-07-12 15:50:15 +0000 <alexxubyte> Steps 4.1, 4.2 and 4.3: The issuing bank freezes the money if the transaction is approved. The approval or rejection is sent back to the acquirer, as well as the POS terminal.  https://t.co/70TCrsFDmw
1546884641180696576 2022-07-12 15:50:12 +0000 <alexxubyte> Steps 3 and 4: The acquiring bank sends the transaction to the card network, also called the card scheme. The card network sends the transaction to the issuing bank for approval.  https://t.co/y2JFbtJc4y
1546884630686552065 2022-07-12 15:50:10 +0000 <alexxubyte> Step 2: The POS terminal sends the transaction to the acquiring bank, which has provided the POS terminal.  https://t.co/qkXuvV6ihh
1546884619978428419 2022-07-12 15:50:07 +0000 <alexxubyte> 🔹Authorization Flow  Step 0: The card issuing bank issues credit cards to its customers.  Step 1: The cardholder wants to buy a product and swipes the credit card at the Point of Sale (POS) terminal in the merchant’s shop.  https://t.co/7pd2d50n9b
1546884609270431746 2022-07-12 15:50:05 +0000 <alexxubyte> The diagram below shows VISA’s role in the credit card payment process. There are two flows involved. Authorization flow happens when the customer swipes the credit card. Capture and settlement flow happens when the merchant wants to get the money at the end of the day.  https://t.co/Q21ySXnRQF
1546884599661244416 2022-07-12 15:50:02 +0000 <alexxubyte> If banks were to settle transactions one by one without an intermediary, each bank would have to settle the transactions with all the other banks. This is quite inefficient.
1546884595324358656 2022-07-12 15:50:01 +0000 <alexxubyte> How does VISA work when we 𝐬𝐰𝐢𝐩𝐞 𝐚 𝐜𝐫𝐞𝐝𝐢𝐭 𝐜𝐚𝐫𝐝 at a merchant’s shop?  VISA, Mastercard, and American Express act as card networks for the clearing and settling of funds. The card acquiring bank and the card issuing bank can be – and often are – different.  https://t.co/gw2wwfUgya
1546520315101990912 2022-07-11 15:42:30 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt
1546520311272656896 2022-07-11 15:42:29 +0000 <alexxubyte> 6. User experience is important. We don’t want to inform users that they have successfully placed orders but later tell them no items are actually available  Happy shopping! If I missed anything, please leave a comment.  https://t.co/uKbduLJKMr
1546520294042456068 2022-07-11 15:42:25 +0000 <alexxubyte> See the diagram below for details:  𝐃𝐞𝐬𝐢𝐠𝐧 𝐩𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬:  1. Less is more. Fewer elements on the web page, fewer data queries to the database, fewer web requests, fewer system dependencies  2. Short critical path. Fewer hops among services or merge into one service  https://t.co/zrAs5WxCo8
1546520286563934208 2022-07-11 15:42:23 +0000 <alexxubyte> 𝐖𝐡𝐞𝐧 𝐢𝐬 𝐭𝐡𝐞 𝐬𝐲𝐬𝐭𝐞𝐦 𝐮𝐬𝐞𝐟𝐮𝐥?  - When a rare or very popular product is released: new iPhones, PS5, etc. - Limited-time sales: Black Friday sales, Amazon Primday day, etc.
1546520282571034625 2022-07-11 15:42:22 +0000 <alexxubyte> Amazon Prime days are coming. Designing a system with extremely high concurrency, high availability, and quick responsiveness needs to consider many aspects 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐰𝐚𝐲 𝐟𝐫𝐨𝐦 𝐟𝐫𝐨𝐧𝐭𝐞𝐧𝐝 𝐭𝐨 𝐛𝐚𝐜𝐤𝐞𝐧𝐝.  https://t.co/QGv5k9cxeT
1546156648808337408 2022-07-10 15:37:25 +0000 <alexxubyte> What are the differences between 𝐛𝐚𝐫𝐞 𝐦𝐞𝐭𝐚𝐥, 𝐯𝐢𝐫𝐭𝐮𝐚𝐥 𝐦𝐚𝐜𝐡𝐢𝐧𝐞𝐬, 𝐚𝐧𝐝 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐞𝐫𝐬?  In our next YouTube video, we will explain each option and explore trade-offs.   The diagram below shows what's planned.  Subscribe here:  https://t.co/1qnp22PPbV  https://t.co/7mttCxcrBJ
1545437811590828032 2022-07-08 16:01:01 +0000 <alexxubyte> @alliekmiller Having followed you for a while on LinkedIn, really enjoyed your fresh look into AI/ML. All the best for your new adventures!
1545420670913327110 2022-07-08 14:52:55 +0000 <alexxubyte> "Once Appon a time, a project where modern meets retro"  Created by Luli Kibudi   Images from Instagram:  https://t.co/cuKYUqiOZI  Happy Friday (or Saturday, depending on where you are!)  Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt  https://t.co/VLlRaPQbDr
1545075035903168512 2022-07-07 15:59:29 +0000 <alexxubyte> Over to you: Besides FCM, what is commonly used for sending out push notifications?  Reference Material: Google firebase documentation
1545075031385878528 2022-07-07 15:59:28 +0000 <alexxubyte> Step 7: The messages are routed to the targeted devices. The notifications can be displayed according to the configurations sent from the app server [1].  https://t.co/k5We4pe4zG
1545075020665212930 2022-07-07 15:59:25 +0000 <alexxubyte> Step 5: FCM receives the messages, and queues the messages in the storage if the devices are not online.  Step 6: FCM forwards the messages to platform-level transport. This transport layer handles platform-specific configurations.  https://t.co/ot8D4Z4CXD
1545075000624816128 2022-07-07 15:59:20 +0000 <alexxubyte> Over time, the app server has too many tokens to maintain, so the recommended practice is to store the token with timestamps and to remove stale tokens from time to time.
1545074996510240768 2022-07-07 15:59:19 +0000 <alexxubyte> This token must be included in the notifications.  Step 3: The client app sends the Registration Token to the app server. The app server caches the token for subsequent communications.  https://t.co/e28SYYRIfa
1545074977019269125 2022-07-07 15:59:15 +0000 <alexxubyte> FCM is a cross-platform messaging solution that can compose, send, queue, and route notifications reliably. It provides a unified API between message senders (app servers) and receivers (client apps). The app developer can use this solution to drive user retention.
1545074972858535936 2022-07-07 15:59:14 +0000 <alexxubyte> How are notifications pushed to our phones or PCs?  A messaging solution (Firebase) can be used to support the notification push.  The diagram below shows how Firebase Cloud Messaging (FCM) works.  https://t.co/l3C458IlAS
1544829932894703616 2022-07-06 23:45:32 +0000 <alexxubyte> @Coding_Career @bytebytego Thanks for the mention!
1544711457987694592 2022-07-06 15:54:45 +0000 <alexxubyte> Over to you: what other mechanisms can we use to ensure password safety?
1544711453797601280 2022-07-06 15:54:44 +0000 <alexxubyte> 3️⃣ The system appends the salt to the password and hashes it. Let’s call the hashed value H1.  4️⃣ The system compares H1 and H2, where H2 is the hash stored in the database. If they are the same, the password is valid.  https://t.co/9WQ5IvFUQg
1544711444817534977 2022-07-06 15:54:42 +0000 <alexxubyte> 𝐇𝐨𝐰 𝐭𝐨 𝐯𝐚𝐥𝐢𝐝𝐚𝐭𝐞 𝐚 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝?  To validate a password, it can go through the following process:  1️⃣ A client enters the password.  2️⃣ The system fetches the corresponding salt from the database.  https://t.co/MRZkBhjmS2
1544711435325825024 2022-07-06 15:54:40 +0000 <alexxubyte> 2️⃣ The password can be stored in the database using the following format: 𝘩𝘢𝘴𝘩( 𝘱𝘢𝘴𝘴𝘸𝘰𝘳𝘥 + 𝘴𝘢𝘭𝘵).  https://t.co/fWuGfaS2Ce
1544711426018648065 2022-07-06 15:54:37 +0000 <alexxubyte> 𝐇𝐨𝐰 𝐭𝐨 𝐬𝐭𝐨𝐫𝐞 𝐚 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝 𝐚𝐧𝐝 𝐬𝐚𝐥𝐭?  1️⃣ A salt is not meant to be secret and it can be stored in plain text in the database. It is used to ensure the hash result is unique to each password.  https://t.co/kyZdIAn5AH
1544711417239986176 2022-07-06 15:54:35 +0000 <alexxubyte> 𝐖𝐡𝐚𝐭 𝐢𝐬 𝐬𝐚𝐥𝐭?  According to OWASP guidelines, “a salt is a unique, randomly generated string that is added to each password as part of the hashing process”.
1544711414597750786 2022-07-06 15:54:35 +0000 <alexxubyte> 🔹 Storing passwords in plain text is not a good idea because anyone with internal access can see them.  🔹 Storing password hashes directly is insufficient because it is pruned to precomputation attacks, such as rainbow tables.  🔹 To mitigate this, we salt the passwords.
1544346798050852865 2022-07-05 15:45:43 +0000 <alexxubyte> Over to you: did I miss anything important on the list? Which ones do you know and which you don’t?
1544346795437764608 2022-07-05 15:45:43 +0000 <alexxubyte> It’s very difficult to rank algorithms by importance objectively. I’m open to suggestions and making adjustments.  Five-star: Very important. Try to understand how it works and why.  Three-star: Important to some extent.   One-star: Advanced. Good to know for senior candidates.
1544346786365460480 2022-07-05 15:45:41 +0000 <alexxubyte> What are some of the algorithms we should know before taking system design interviews?  I put together a list and explained why they are important.   To learn more:  https://t.co/PczMAd8Jdb  https://t.co/vnjLvKoirE
1544003029350768642 2022-07-04 16:59:43 +0000 <alexxubyte> @ashokdey_ @apachekafka Thank you! @sahnlam made the video. I work closely with him.
1543979754486845445 2022-07-04 15:27:13 +0000 <alexxubyte> @RobertLunaRojas @RodrigoFBrito @nicholasandollo @clasimoes @SukanyaSahoo20 @Son_HLe @isiuiki_ @sykabarca @KadijahRJ @meghana__sk @AmaMidzu @harshita214here @Hershutt @sachinsandbhor @Mrutyun80373975 @Pranav20_ @kris_card @BelloneDavide @elemental19961 @gasper_lf
1543979753413042176 2022-07-04 15:27:13 +0000 <alexxubyte> @code_epic @aditrahm @kisanpakhreen @migrmez @mucahitmutlugun @EricJohnsonL @diegogusava @VinceUrag @yxe_tim @andrewvparker @dadideo @gus_gallarreta @kandukfarzie @apenav @kevin_muchwat @Jonatan_Ruedas @albertogviana @gabrielrdz @pedrodc23 @silviotorre @devmlops @AlexanderTank
1543979752398082048 2022-07-04 15:27:13 +0000 <alexxubyte> @edulitos @SaranshVAgarwal @wesJayR @ExtremelySunnYK @andrei_cirlan @zkancs @petrussola @JohnAlves94 @m0t0r_ @anthonycepedaa @glaydersen @TheImranSarwar @onahvictorc @gonzo_ @dongjinleekr @moebious @brayaON20 @marcos_vzq @impunjp @jaimoto81 @carlosern @popprem @hunglt9
1543621349888778240 2022-07-03 15:43:03 +0000 <alexxubyte> ByteByteGo's YouTube channel just reached 50,000 subscribers. Thank you everyone for making this happen!  We are new to this so please give us feedback or suggest topics to cover. Thank you!  ✅ Subscribe to our Youtube:   https://t.co/9qgBqw7QZ9  https://t.co/WOou2cIwqD
1543257800809512961 2022-07-02 15:38:26 +0000 <alexxubyte> Just sent the ByteByteGo system design newsletter to over 75k people. Each episode includes 3 original technical posts, 1 YouTube video we made, 1 analysis of the real-world system, and occasional bonus posts.  Subscribe here so you won't miss it:   https://t.co/lWsSVqqmIO  https://t.co/za9vpSw4jv
1542882590541066240 2022-07-01 14:47:29 +0000 <alexxubyte> Subscribe to my weekly newsletter to learn something new every week:  https://t.co/0RYwcKv26q
1542882587995123712 2022-07-01 14:47:29 +0000 <alexxubyte> 2. No deadlocks. Threads A and B do not wait for the lock to release, meaning that there is no possibility of a deadlock occurring.
1542882585386180610 2022-07-01 14:47:28 +0000 <alexxubyte> ➡️ 𝐁𝐞𝐧𝐞𝐟𝐢𝐭𝐬 1. No thread suspension. Thread B can get a response immediately and then decide what to do next. In this way, the thread latency is greatly reduced.
1542882580973834241 2022-07-01 14:47:27 +0000 <alexxubyte> 𝘞𝘢𝘪𝘵-𝘧𝘳𝘦𝘦 = 𝘕𝘰𝘯-𝘉𝘭𝘰𝘤𝘬𝘪𝘯𝘨 + 𝘚𝘵𝘢𝘳𝘷𝘢𝘵𝘪𝘰𝘯-𝘧𝘳𝘦𝘦  ➡️ Non-Blocking Queue 𝐈𝐦𝐩𝐥𝐞𝐦𝐞𝐧𝐭𝐚𝐭𝐢𝐨𝐧  We can use Compare and Swap (CAS) to implement a non-blocking queue. The diagram below illustrates the algorithm.  https://t.co/VozypLwlmI
1542882572459421698 2022-07-01 14:47:25 +0000 <alexxubyte> 🔹starvation-free:  Thread Starvation means a thread cannot acquire access to certain shared resources and cannot proceed. Starvation-free means this situation does not occur.  🔹wait-free: All threads can complete the tasks within a finite number of steps.
1542882568286089216 2022-07-01 14:47:24 +0000 <alexxubyte> This is the main 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐜𝐞 between blocking and non-blocking algorithms: The blocking algorithm blocks Thread B until the lock is released. A non-blocking algorithm notifies Thread B that access is rejected.  https://t.co/PkfvvSd1KK
1542882557913575424 2022-07-01 14:47:21 +0000 <alexxubyte> 🔹non-blocking:  The non-blocking algorithm allows Thread A to access the queue, but Thread A must complete a task in a certain number of steps. Other threads like Thread B may still starve due to the rejections.  https://t.co/dBWPcPd5Vb
1542882547608141824 2022-07-01 14:47:19 +0000 <alexxubyte> 🔹blocking  The blocking algorithm uses locks. Thread A acquires the lock first, and Thread B might wait for arbitrary lengthy periods if Thread A gets suspended while holding the lock. This algorithm may cause Thread B to starve.  https://t.co/E7ZxS5vFmE
1542882537231462401 2022-07-01 14:47:16 +0000 <alexxubyte> The terms we use when discussing blocking and non-blocking algorithms can be confusing, so let’s start by reviewing the terminology in the concurrency area with a diagram.  https://t.co/6UD1Wrs9S1
1542882527110541312 2022-07-01 14:47:14 +0000 <alexxubyte> How do we implement a 𝐧𝐨𝐧-𝐛𝐥𝐨𝐜𝐤𝐢𝐧𝐠 queue? What are the differences between blocking and non-blocking algorithms?  https://t.co/2P71o3x474
1542531966649585664 2022-06-30 15:34:14 +0000 <alexxubyte> @dxhuang Over to you: do you think the terms OLTP and OLAP have become obsolete or are they still very relevant today? When should we use distributed SQL databases vs traditional relational databases?
1542531943174025219 2022-06-30 15:34:08 +0000 <alexxubyte> A few weeks ago, I met the CTO of TiDB @dxhuang and a few other team members. We discussed how Distributed SQL databases evolved and how TiDB developed its own open-sourced database.
1542531940607094784 2022-06-30 15:34:08 +0000 <alexxubyte> 𝐏𝐚𝐱𝐨𝐬 𝐨𝐫 𝐑𝐚𝐟𝐭 algorithms are commonly used to achieve consensus across multiple nodes.  Examples of Distributed SQL databases: Google Spanner, Amazon Aurora, CockroachDB, YugabyteDB, TiDB, etc.
1542531936706392064 2022-06-30 15:34:07 +0000 <alexxubyte> What is Distributed SQL? Why do we need it? How does it work?  Google Spanner popularized the term Distributed SQL database in 2012. Distributed SQL databases 𝐚𝐮𝐭𝐨𝐦𝐚𝐭𝐢𝐜𝐚𝐥𝐥𝐲 𝐫𝐞𝐩𝐥𝐢𝐜𝐚𝐭𝐞 𝐝𝐚𝐭𝐚 to multiple nodes and are 𝐬𝐭𝐫𝐨𝐧𝐠𝐥𝐲 𝐜𝐨𝐧𝐬𝐢𝐬𝐭𝐞𝐧𝐭.  https://t.co/WGljDmL5Nb
1542171260955676674 2022-06-29 15:40:55 +0000 <alexxubyte> Subscribe to our system design newsletter and YouTube channel to learn something new every week.  𝐖𝐞𝐞𝐤𝐥𝐲 𝐧𝐞𝐰𝐬𝐥𝐞𝐭𝐭𝐞𝐫:  https://t.co/dkjDPxrTOt  𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𝐜𝐡𝐚𝐧𝐧𝐞𝐥:  https://t.co/erhdayLMag  https://t.co/PN2Op41JlQ
1542171252315410433 2022-06-29 15:40:53 +0000 <alexxubyte> 3.3 The network card sends data out to the consumer  Zero copy is a shortcut to save the multiple data copies between application context and kernel context.  Over to you: what are some of the other systems that rely on Sequential I/O?  https://t.co/CL2TMKSDQs
1542171242786017282 2022-06-29 15:40:51 +0000 <alexxubyte> 2.4 The data is copied from socket buffer to network card  2.5 The network card sends data out to the consumer  🔹Step 3: Consumer reads data with zero-copy  3.1: The data is loaded from disk to OS cache  3.2 OS cache directly copies the data to the network card via sendfile()  https://t.co/QoDv5FP3Iz
1542171233277489154 2022-06-29 15:40:48 +0000 <alexxubyte> 🔹Step 1.1 - 1.3: Producer writes data to the disk  🔹Step 2: Consumer reads data without zero-copy  2.1: The data is loaded from disk to OS cache  2.2 The data is copied from OS cache to Kafka application  2.3 Kafka application copies the data into the socket buffer  https://t.co/qBz8EvKUJf
1542171225236963328 2022-06-29 15:40:46 +0000 <alexxubyte> 1️⃣ Reliance on Sequential I/O. 2️⃣ Focus on efficiency: zero copy principle.  The diagram below illustrates how the data is transmitted between producer and consumer, and what zero-copy means.
1542171222682656768 2022-06-29 15:40:46 +0000 <alexxubyte> There are many design decisions that contributed to Kafka’s performance. In this post, we’ll focus on two. We think these two carried the most weight.
1542171218442211328 2022-06-29 15:40:45 +0000 <alexxubyte> We just published a YouTube video that explains why is Kafka fast.  If you prefer video format, consider subscribing to our ByteByteGo youtube channel:    https://t.co/Abm5CkdvPE  If you prefer text, you can keep reading:  https://t.co/DVIV7QzafX
1541812396645183489 2022-06-28 15:54:55 +0000 <alexxubyte> Feel free to 𝐅𝐨𝐥𝐥𝐨𝐰 𝐦𝐞 &amp; 𝐜𝐨𝐦𝐦𝐞𝐧𝐭 𝐨𝐧 𝐦𝐲 𝐋𝐢𝐧𝐤𝐞𝐝𝐈𝐧 post to double the chance 🤗.    LinkedIn post:  https://t.co/DPFJuve3E5
1541811077209399296 2022-06-28 15:49:40 +0000 <alexxubyte> 200k LinkedIn giveaway:   🔹 10 signed physical books 🔹 90 1-year subscriptions to the ByteBytego (digital version of SD vol1 and vol2)   To enter: ✅ Follow me on Twitter ✅ Like and RT ✅ Subscribe to our Youtube channel:  https://t.co/ZdLYVTwlnY   ⏰ Giveaway ends in 72 hours  https://t.co/CVffMqZvTX
1541434258320871425 2022-06-27 14:52:20 +0000 <alexxubyte> Subscribe to our weekly newsletter to learn something new every week:  https://t.co/dkjDPxrTOt
1541434255330254848 2022-06-27 14:52:19 +0000 <alexxubyte> UDP sacrifices correctness for speed. Users generally prefer smooth video calls and UDP is indeed the default choice for Zoom.  Over to you: the HTTP protocol used to be based on TCP, but the latest protocol HTTP/3 is based on UDP. Do you know why?
1541434252629225473 2022-06-27 14:52:18 +0000 <alexxubyte> 🔹The second difference is that UDP is faster than TCP.  - UDP does not require ACK message back - UDP has no flow control - No duplication verification at the receiving end - Shorter header
1541434249932197888 2022-06-27 14:52:18 +0000 <alexxubyte> 🔹The primary difference between TCP and UDP is that TCP is connection-based whereas UDP is connectionless.  Connection-based: It implies that all messages will arrive and arrive in the correct order.  Connectionless: It does not guarantee order or completeness.
1541434246115471360 2022-06-27 14:52:17 +0000 <alexxubyte> Which protocol does Zoom use for video streaming, TCP or UDP?  Let’s review the differences first.  https://t.co/layeKK5wc6
1541080466064781312 2022-06-26 15:26:29 +0000 <alexxubyte> Week in Review: 🔹Diagram as code 🔹Event sourcing 🔹Visualgo 🔹HTTPs (video) 🔹YouTube survey  Next week, we will cover: 🔹Kafka (video) 🔹Blocking vs non-blocking 🔹Notifications 🔹Distributed SQL  🔹QR payment  Subscribe so you won't miss it:  https://t.co/0jnRi7ZRtC  https://t.co/JyYZKYIFFS
1540850505160609792 2022-06-26 00:12:42 +0000 <alexxubyte> Great thread. CDNs are also great defense against DDoS attacks.
1540720453735419914 2022-06-25 15:35:56 +0000 <alexxubyte> What kind of system design videos should we make on the ByteByteGo YouTube channel?  We are new to this. Please give us feedback in the comment or participate in the poll. Thank you.  YouTube channel:  https://t.co/D3Z1ax6Zle
1540359873132498944 2022-06-24 15:43:06 +0000 <alexxubyte> Great resource for visual learners:  https://t.co/V7Cb1RkGGR is a site developed by the National University of Singapore. It visualizes data structures through animation.    — Subscribe to our newsletter to learn something new every week:  https://t.co/lWsSVqHpKO  https://t.co/5ee5ho9Oqr
1539999532326342656 2022-06-23 15:51:14 +0000 <alexxubyte> Subscribe to our system design newsletter and YouTube channel to learn something new every week ⇩:  Newsletter:  https://t.co/dkjDPxrTOt YouTube:  https://t.co/erhdayLMag  https://t.co/VAxG1OHg1g
1539999525040840704 2022-06-23 15:51:13 +0000 <alexxubyte> Over to you: Which type of system is suitable for event sourcing design? Have you used this paradigm in your work?
1539999522423681025 2022-06-23 15:51:12 +0000 <alexxubyte> Step 8: Bob queries the order state from OrderService, which then queries OrderView. OrderView can be in memory or cache and does not need to be persisted, because it can be recovered from the event store.
1539999518107660288 2022-06-23 15:51:11 +0000 <alexxubyte> Step 7: OrderView listens on the events published from the event store, and builds the latest state for the orders. Although OrderView receives 3 events, it applies the events one by one and keeps the latest state.  https://t.co/io1Ish56Np
1539999507026309121 2022-06-23 15:51:08 +0000 <alexxubyte> Steps 5 and 6: Bob pays $60 for the order. An OrderPaymentEvent is created, sequenced, and stored in the event store with eventID=2003. Notice the different event types have different event attributes.  https://t.co/KYJbioaki1
1539999495869456384 2022-06-23 15:51:06 +0000 <alexxubyte> Steps 3 and 4: Bob wants to change the quantity from 5 to 6. A ModifyOrderEvent is created, sequenced, and persisted in the event store with eventID=2002.  https://t.co/7P378jAlnt
1539999485132058627 2022-06-23 15:51:03 +0000 <alexxubyte> 🔹Event Sourcing  Steps 1 and 2: Bob wants to buy a product. A NewOrderEvent is created, sequenced and stored in the event store with eventID=2001.  https://t.co/L7gmgZC6Tp
1539999473257959424 2022-06-23 15:51:00 +0000 <alexxubyte> Steps 5 and 6: Bob pays $60 for the order. The order is complete and the state is Paid.  Steps 7 and 8: Bob queries the latest order state. Query service retrieves the state from the database.  https://t.co/XSKVPDz1Gr
1539999461828464640 2022-06-23 15:50:58 +0000 <alexxubyte> Let's look at the steps in detail.  🔹Non-Event Sourcing  Steps 1 and 2: Bob wants to buy a product. The order is created and inserted into the database.  Steps 3 and 4: Bob wants to change the quantity from 5 to 6. The order is modified with a new state.  https://t.co/Rb1IRPpl1N
1539999450642276357 2022-06-23 15:50:55 +0000 <alexxubyte> The events must be sequenced with incremental numbers to guarantee their ordering. The order states are rebuilt from the events and maintained in OrderView. If the OrderView is down, we can always rely on the event store which is the source of truth to recover the order states.  https://t.co/CyYeokxa8F
1539999438986326017 2022-06-23 15:50:52 +0000 <alexxubyte> How does this work? Instead of recording the order states in the database, the event sourcing design persists the events that lead to the state changes in the event store. The event store is an append-only log.  https://t.co/EeCZDpOzhV
1539999426864812032 2022-06-23 15:50:49 +0000 <alexxubyte> The diagram below shows the comparison of a normal CRUD system design with an event sourcing system design. We use an e-commerce system that can place orders and pay for the orders to demonstrate how event sourcing works.
1539999422485913600 2022-06-23 15:50:48 +0000 <alexxubyte> How do we design a system using the 𝐞𝐯𝐞𝐧𝐭 𝐬𝐨𝐮𝐫𝐜𝐢𝐧𝐠 paradigm? How is it different from normal system design? What are the benefits? We will talk about it in this post.  https://t.co/PhKNDDCmMv
1539972884411535365 2022-06-23 14:05:21 +0000 <alexxubyte> Great overview of how junior, senior, staff, engineer managers are evaluated during interviews. What do you think? Is your experience similar to what’s listed in the diagram?
1539851950212018176 2022-06-23 06:04:48 +0000 <alexxubyte> @tmkasun Thanks. You are right. We decided to talk about TLS 1.2 because we view TLS 1.3 as an optimization. As with most optimizations, it is a bit harder to explain. That’s why we chose TLS 1.2 instead. The core concepts in TLS 1.2 still apply to 1.3.
1539639990551908352 2022-06-22 16:02:33 +0000 <alexxubyte> 2. Server resources: The asymmetric encryption adds quite a lot of mathematical overhead. It is not suitable for data transmissions in long sessions.  Over to you: how much performance overhead does HTTPS add, compared to HTTP?
1539639987989123072 2022-06-22 16:02:32 +0000 <alexxubyte> 1. Security: The asymmetric encryption goes only one way. This means that if the server tries to send the encrypted data back to the client, anyone can decrypt the data using the public key.
1539639983845154817 2022-06-22 16:02:31 +0000 <alexxubyte> Step 4 - Now that both the client and the server hold the same session key (symmetric encryption), the encrypted data is transmitted in a secure bi-directional channel.  Why does HTTPS switch to symmetric encryption during data transmission? There are two main reasons:  https://t.co/js23u1cWLv
1539639973929832449 2022-06-22 16:02:29 +0000 <alexxubyte> Step 3 - After validating the SSL certificate, the client generates a session key and encrypts it using the public key. The server receives the encrypted session key and decrypts it with the private key.  https://t.co/f3dsSUwOGR
1539639965700698117 2022-06-22 16:02:27 +0000 <alexxubyte> The server then sends the SSL certificate to the client. The certificate contains the public key, host name, expiry dates, etc. The client validates the certificate.
1539639963167232002 2022-06-22 16:02:27 +0000 <alexxubyte> The server responds with a “server hello” so the browser knows whether it can support the algorithms and TLS version.
1539639959316885505 2022-06-22 16:02:26 +0000 <alexxubyte> Step 2 - The client sends a “client hello” to the server. The message contains a set of necessary encryption algorithms (cipher suites) and the latest TLS version it can support.  https://t.co/4FkmQl33X8
1539639949313466369 2022-06-22 16:02:23 +0000 <alexxubyte> How is the data encrypted and decrypted?  Step 1 - The client (browser) and the server establish a TCP connection.  https://t.co/bgy9xkdtc0
1539639940232884225 2022-06-22 16:02:21 +0000 <alexxubyte> Hypertext Transfer Protocol Secure (HTTPS) is an extension of the Hypertext Transfer Protocol. HTTPS transmits encrypted data using Transport Layer Security (TLS.) If the data is hijacked online, all the hijacker gets is binary code.
1539639936369889285 2022-06-22 16:02:20 +0000 <alexxubyte> We just published a YouTube video that explains how HTTPS works.  If you prefer video format, consider subscribing to our ByteByteGo youtube channel:  https://t.co/erhdayLMag  If you prefer text, you can keep reading:  https://t.co/c5yqCpSfH9
1539390454369726464 2022-06-21 23:30:59 +0000 <alexxubyte> What is so important about HTTPS that, these days, most websites require it? How does HTTPS work?    We will answer these questions in tomorrow’s video. Subscribe to our YouTube channel so you won’t miss it ⇩:   YouTube:  https://t.co/D3Z1ax6Zle  https://t.co/DlxJrDuqRv
1539274661845839872 2022-06-21 15:50:52 +0000 <alexxubyte> 3. Due to this, engineers are not able to reach affected locations to revert problematic changes.  4. Backup procedures were used to take control of the affected locations.  Handling a service outage is stressful. Good job by the Cloudflare team for fixing the outage quickly.
1539274658146422784 2022-06-21 15:50:51 +0000 <alexxubyte> 2. As part of the BGP protocol, terms are defined to define what IP addresses (prefixes) are accessible by the internet. Due to the reordering of terms, a critical subset of prefixes is withdrawn. Those IP addresses are no longer accessible.  https://t.co/no53eQVs4I
1539274649879490560 2022-06-21 15:50:49 +0000 <alexxubyte> 1. A new routing layer called “spin” is added to improve reliability and maintainability.  https://t.co/xyiftUwMGt
1539274640975048704 2022-06-21 15:50:47 +0000 <alexxubyte> A Cloudflare outage knocked many popular services such as Udemy, Coinbase, Discord, etc., offline. What happened?  Cloudflare wrote an incident report. Here is my TLDR after reading the report.  Image source (you can also read the whole report here):  https://t.co/z2FpcOkIbA  https://t.co/xjSKEHlyWj
1538912379940921344 2022-06-20 15:51:17 +0000 <alexxubyte> 𝐖𝐡𝐚𝐭 𝐝𝐨𝐞𝐬 𝐢𝐭 𝐝𝐨? - Draw the cloud system architecture in Python code. - Diagrams can also be rendered directly inside the Jupyter Notebooks. - No design tools are needed. - Supports the following providers: AWS, Azure, GCP, Kubernetes, Oracle Cloud, etc.
1538912376354877440 2022-06-20 15:51:16 +0000 <alexxubyte> Would it be nice if the code we wrote automatically turned into architecture diagrams?  I recently discovered a Github repo that does exactly this: Diagram as Code for prototyping cloud system architectures.  https://t.co/6IDB06SPTv
1538180522983141376 2022-06-18 15:23:09 +0000 <alexxubyte> Week in Review: 🔹New YouTube channel 🔹DDoS 🔹High availability 🔹Email servers 🔹Git commands   Next week: 🔹HTTPS  (YouTube) 🔹Blocking vs non-blocking 🔹UDP 🔹Distributed SQL  🔹Event sourcing   Subscribe: Newsletter:  https://t.co/0jnRi7ZRtC YouTube:  https://t.co/1qnp22PPbV  https://t.co/ao7l9iHZXS
1537825597413478401 2022-06-17 15:52:48 +0000 <alexxubyte> Really cool and cute way to explain git commands.  By @girlie_mac   If you like this kind of tech doodles, check out her Github repo:   https://t.co/2J3vEt6Eb9  https://t.co/wkBqlg9584
1537462781833666561 2022-06-16 15:51:06 +0000 <alexxubyte> To level up your system design skill, subscribe to our:  Weekly newsletter:  https://t.co/dkjDPxrTOt  YouTube channel:  https://t.co/erhdayLMag
1537462779417833472 2022-06-16 15:51:05 +0000 <alexxubyte> Over to you: if a recipient's email address is incorrect, the email will be returned to you. Do you know how does that work?
1537462776162942976 2022-06-16 15:51:05 +0000 <alexxubyte> The email is received by the Receiver Mail Server. It stores the email to the Mailbox by using MDA (mail delivery agent.) The receiver uses MUA to retrieve the email using the POP3/IMAP protocol.  https://t.co/XYcyxmJrqO
1537462768852291584 2022-06-16 15:51:03 +0000 <alexxubyte> 2. Instead of using postal offices to relay mail, MTA (mail transmission agent) relays the email. It communicates via the SMTP protocol.  https://t.co/rMOw3l2aBA
1537462760732172288 2022-06-16 15:51:01 +0000 <alexxubyte> 1. Instead of putting mail in a mailbox, the sender pushes an email to the Sender Mail Server using MUA (mail user agent,) such as Outlook or Gmail.  https://t.co/dxDHqOVXTb
1537462753580814336 2022-06-16 15:50:59 +0000 <alexxubyte> This process usually takes a few days and my friend receives my gratitude in paper form.  Email functions in a similar way. The terminology changes because it is an internet-based solution, but the fundamentals are the same:
1537462742025576449 2022-06-16 15:50:57 +0000 <alexxubyte> Do you know how an email is delivered?  When I first learned how similar email is to traditional ‘snail’ mail, I was surprised. Maybe you will be, too. Allow me to explain.  https://t.co/TGMed0DlJi
1537257924866625536 2022-06-16 02:17:04 +0000 <alexxubyte> What does “consistency” mean in a distributed system?  In Alex's terms (quoted), there are three types of consistency you may read:  - Consistency as the ‘C’ in the CAP Theorem - Consistency as the ‘C’ in ACID - Consistency models, database characteristics  Highly recommend it.
1537100641486589954 2022-06-15 15:52:05 +0000 <alexxubyte> If we deploy the node on Amazon EC2, which has 90% availability, the double-node architecture will increase availability from 90% to 99%.  Over to you: We’ve covered availability, but do these 3 architecture types also guarantee consistency, or not? Let us know your thoughts!
1537100639041253376 2022-06-15 15:52:04 +0000 <alexxubyte> For example, if both nodes need to update the same product, the final state might be unpredictable. Use this architecture with caution!
1537100635031539718 2022-06-15 15:52:03 +0000 <alexxubyte> 🔹Primary-Primary: both nodes act as primary nodes, both nodes can handle read/write operations, and the data is replicated between the two nodes. This type of architecture increases the throughput, but it has limited use cases.  https://t.co/c7uGjNWZd2
1537100627343380480 2022-06-15 15:52:02 +0000 <alexxubyte> Due to latency when replicating data from primary to secondary, the data read from the secondary may be inconsistent with the primary.
1537100623237087233 2022-06-15 15:52:01 +0000 <alexxubyte> 🔹Primary-Secondary: this architecture looks similar to primary-backup architecture, but the secondary node can take read requests to balance the reading load.  https://t.co/K82HdQtlUJ
1537100613976068096 2022-06-15 15:51:58 +0000 <alexxubyte> 🔹Primary-Backup: the backup node is just a stand-by, and the data is replicated from primary to backup. When the primary fails, we need to manually switch to the backup node.  The backup node might be a waste of hardware resources.  https://t.co/WMQTNtL17J
1537100606170574848 2022-06-15 15:51:57 +0000 <alexxubyte> Note that availability only guarantees that we will receive a response; it doesn’t guarantee the data is the most up-to-date.  The diagram below shows how we can turn a single-node “Product Inventory” into a double-node architecture with high availability.
1537100603611963392 2022-06-15 15:51:56 +0000 <alexxubyte> Usually, we design a system for high availability. For example, when we say the design target is 4-9’s, it means the services should be up 99.99% of the time. This also means the services can only be down for 52.5 minutes per year.
1537100601124720643 2022-06-15 15:51:55 +0000 <alexxubyte> When you send out requests to the nodes, a non-failing node will return a reasonable response within a reasonable amount of time (with no error or timeout).
1537100597110792192 2022-06-15 15:51:54 +0000 <alexxubyte> What does Availability mean when you design a system?  In the famous CAP theorem by computer scientist Eric Brewer, Availability means ​​all (non-failing) nodes are available for queries in a distributed system.  https://t.co/9GL2MDUhW0
1536812194146361344 2022-06-14 20:45:54 +0000 <alexxubyte> @hugaomarques Thank you, Hugo!
1536812123988168704 2022-06-14 20:45:37 +0000 <alexxubyte> @Franc0Fernand0 Thank you, Franco!
1536811970288005120 2022-06-14 20:45:00 +0000 <alexxubyte> @alexbdebrie If it is not DynamoDB specific, I'll be happy to take a look.
1536811192257171456 2022-06-14 20:41:55 +0000 <alexxubyte> The first video is made by @sahnlam. We will work together to make more videos. 10k+ subscribers in just a few hours. Thank you all for the overwhelming support 😀.
1536375297200640000 2022-06-13 15:49:49 +0000 <alexxubyte> @sahnlam 12/ One approach that has been effectively deployed at services like Cloudflare is to use an Anycast to scatter the attack traffic across a huge network of distributed servers. This technique spreads the impact of attack traffic across many servers, rendering it ineffective.
1536375294663090177 2022-06-13 15:49:49 +0000 <alexxubyte> @sahnlam 11/ While there are many ways to mitigate an attack, the most effective strategy is to have a huge network capacity to absorb the attack.
1536375292062621696 2022-06-13 15:49:48 +0000 <alexxubyte> @sahnlam 10/ - A DNS amplification attack sends a large volume of DNS requests to open DNS servers from the botnet but with the return address pointed at the victim. The large volume of DNS responses clogs up the victim’s network.
1536375289470590976 2022-06-13 15:49:48 +0000 <alexxubyte> @sahnlam 9/ - A SYN flood exploits a weakness of the TCP layer by sending a large number of TCP SYN packets with spoofed source IP addresses. When the victim responds to each request, the response never returns, exhausting the precious resources.
1536375286933008384 2022-06-13 15:49:47 +0000 <alexxubyte> @sahnlam 8/ What are some of the common attacks?  - A HTTP flood attacks the application layer by sending the victim a large number of HTTP requests from the botnet.
1536375284391260160 2022-06-13 15:49:46 +0000 <alexxubyte> @sahnlam 7/ A sophisticated DDoS attack employs several of them simultaneously to try to blend in with the normal traffic, making it difficult for an operator to mitigate without harming real users.
1536375281857900545 2022-06-13 15:49:46 +0000 <alexxubyte> @sahnlam 6/ How does a service know it is under a DDoS attack? It is not easy to tell. DDoS traffic comes in many forms.
1536375279332913152 2022-06-13 15:49:45 +0000 <alexxubyte> @sahnlam 5/ These compromised devices are called a botnet. They are computers and IoT devices infected by malware which allows them to be controlled by an attacker.
1536375276736614400 2022-06-13 15:49:45 +0000 <alexxubyte> @sahnlam 4/ How does a DDoS attack work? The malicious goal of a DDoS attack is to disrupt the normal flow of traffic to a service. This is done by sending a large volume of attack traffic to the victim using a large group of compromised network-connected devices.
1536375274182303744 2022-06-13 15:49:44 +0000 <alexxubyte> @sahnlam 3/ Here is one of the many reasons: When the stake is high, an attacker would perform DDoS a table to block anyone from sending in continuation bets, which resulted in an automatic forfeit after the timer runs out.
1536375271539867648 2022-06-13 15:49:43 +0000 <alexxubyte> 2/ Written by @sahnlam  One memorable challenge at Zynga Poker back in the day was the battles against distributed denial-of-service (DDoS) attacks. Why would anyone DDoS a poker game, you might ask?
1536375267991531520 2022-06-13 15:49:43 +0000 <alexxubyte> 1/ This is a true story about fighting against a large-scale DDoS attack.  https://t.co/hbYZbl5a2Y
1535646201210490881 2022-06-11 15:32:39 +0000 <alexxubyte> This week, we talked about: 🔹Error handling 🔹Webpage rendering 🔹I18N 🔹Captures 5m emojis 🔹SQL joins   Next week, we will cover: 🔹DDoS 🔹Event sourcing  🔹Email protocols 🔹More    Subscribe to our weekly newsletter so you won’t miss it:  https://t.co/lWsSVqHpKO  https://t.co/2NJnNnbryZ
1535280916943077376 2022-06-10 15:21:09 +0000 <alexxubyte> LEFT (OUTER) JOIN: returns all matching rows, and non-matching rows from the left table.  RIGHT (OUTER) JOIN: returns all the matching rows, and non-matching rows from the right table.
1535280913797394434 2022-06-10 15:21:08 +0000 <alexxubyte> Popular interview question: what’s the difference between Inner, Left, Right, and Full join?  The diagram below illustrates how different types of joins work.  (INNER) JOIN: returns only matching rows between both tables.  https://t.co/4HzZTV1hPs
1535011827267932161 2022-06-09 21:31:53 +0000 <alexxubyte> @Srimaln91 You are right. I meant to say goroutines are lightweight. Thank you.
1534966166057168898 2022-06-09 18:30:26 +0000 <alexxubyte> @hkarthik Good idea. I’ll try.
1534926175155367936 2022-06-09 15:51:32 +0000 <alexxubyte> Sources: [1] Capturing A Billion Emo(j)i-ons:  https://t.co/y7DfOwtWup [2] Building Pubsub for 50M concurrent socket connections:  https://t.co/76xRoz13TQ [3] Streaming a Million Likes/Second: Real-Time Interactions on Live Video:  https://t.co/APk92zJTqk
1534926172760313856 2022-06-09 15:51:31 +0000 <alexxubyte> Over to you: What are some of the off-the-shelf Pub-Sub services available?
1534926170235408384 2022-06-09 15:51:31 +0000 <alexxubyte> The PubSub infrastructure is interesting. Hotstar considered the following protocols: Socketio, NATS, MQTT, and gRPC, and settled with MQTT. For those who are interested in the tradeoff discussion, see [2].  A similar design is adopted by LinkedIn [3].
1534926166716362753 2022-06-09 15:51:30 +0000 <alexxubyte> 4. Aggregated data is written to another Kafka.  5. The PubSub consumers pull aggregated emoji data from Kafka.  6. Emojis are delivered to other clients in real-time through the PubSub infrastructure.  https://t.co/vqmOhQD53O
1534926160064196610 2022-06-09 15:51:28 +0000 <alexxubyte> A shorter interval means emojis are delivered to other clients faster but it also means more computing resources are needed.
1534926156578684928 2022-06-09 15:51:27 +0000 <alexxubyte> 3. Emoji data are aggregated by a streaming processing service called Spark. It aggregates data every 2 seconds, which is configurable. There is a trade-off to be made based on the interval.  https://t.co/u3KSnsNGwf
1534926149758750721 2022-06-09 15:51:26 +0000 <alexxubyte> 2. Since the write volume is very high, Kafka (message queue) is used as a buffer.  https://t.co/kk0BLeGtmC
1534926142712401920 2022-06-09 15:51:24 +0000 <alexxubyte> 1. Clients send emojis through standard HTTP requests. You can think of Golang Service as a typical Web Server. Golang is chosen because it supports concurrency well. Threads in GoLang are lightweight.  https://t.co/URb4MkELqw
1534926135284224001 2022-06-09 15:51:22 +0000 <alexxubyte> How does Disney Hotstar capture 5 Billion Emojis during a tournament?  Dedeepya Bonthu [1] wrote an excellent engineering blog that captures this nicely. Here is my understanding of how the system works.  https://t.co/shlWCM6NUV
1534730572655783937 2022-06-09 02:54:17 +0000 <alexxubyte> @madawei2699 Great work. Thanks for sharing! #谢谢🙏
1534564697495597056 2022-06-08 15:55:09 +0000 <alexxubyte> Over to you: which tools have you used for managing multi-language texts? Which do you like best, and which would you not recommend to a friend?  — Subscribe to our weekly system design newsletter (10-min read):  https://t.co/PczMAd8Jdb
1534564695029317632 2022-06-08 15:55:08 +0000 <alexxubyte> We also need to extract business logic to account for different usage habits in different countries or regions.
1534564691145416704 2022-06-08 15:55:07 +0000 <alexxubyte> 🔹 Company entity and accounting Since we need to set up different entities for individual countries, and these entities follow different regulations and accounting standards, the system needs to support multiple bookkeeping methods. Company-level treasury management is needed.  https://t.co/N4x41xQB7n
1534564682672984064 2022-06-08 15:55:05 +0000 <alexxubyte> 🔹 Currency We need to define the displayed currencies and settlement currency. We also need to design a foreign exchange service for quoting prices.  https://t.co/CDlFIyO3BW
1534564674536022016 2022-06-08 15:55:03 +0000 <alexxubyte> 🔹 Time zone The time display should be segregated from timestamp storage. Common practice is to use the UTC (Coordinated Universal Time) timestamp for the database and backend services and to use the local time zone for the frontend display.  https://t.co/tGMA9kZ2Fr
1534564666134831104 2022-06-08 15:55:01 +0000 <alexxubyte> 🔹 Layout 1. Describe text length and reserve enough space around the text for different languages. 2. Plan for line wrap and truncation 3. Keep text labels short on buttons 4. Adjust the display for numerals, dates, timestamps, and addresses  https://t.co/9MxQpNBy2H
1534564657922420736 2022-06-08 15:54:59 +0000 <alexxubyte> - We shouldn’t put any prompts in the source code. - We should avoid string concatenation in the code. - We should remove text from graphics. 2. Use complete sentences and avoid dynamic text elements 3. Display business data such as currencies in different languages  https://t.co/etsXPvUqH8
1534564649915412480 2022-06-08 15:54:58 +0000 <alexxubyte> Different countries have differing cultures, values, and habits. When we design an application for international markets, we need to localize the application in several ways:  🔹 Language 1. Extract and maintain all texts in a separate system. For example:  https://t.co/EHLLYdUS4k
1534564641904263168 2022-06-08 15:54:56 +0000 <alexxubyte> How do we design a system for internationalization?  The diagram below shows how we can internationalize a simple e-commerce website.  https://t.co/ls5sAUHlbN
1534201588734013440 2022-06-07 15:52:17 +0000 <alexxubyte> If you enjoy these posts, you might like my ByteByteGo System Design Newsletter as well. Subscribe here  https://t.co/PczMAd8Jdb
1534201585663741953 2022-06-07 15:52:16 +0000 <alexxubyte> 6. Display. Finally, the browser sends the absolute pixels to the GPU and displays them on the page.  https://t.co/sbqWzZ8VBJ
1534201546400931841 2022-06-07 15:52:07 +0000 <alexxubyte> 5. Painting. After the layout is complete, the rendering tree is transformed into the actual content on the screen. This step is called painting. The browser gets the absolute pixels of the content.  https://t.co/a0Ive3fmon
1534201539106963461 2022-06-07 15:52:05 +0000 <alexxubyte> 4. Layout. The content in each element of the rendering tree will be calculated to get the geometric information (position, size), which is called layout.  https://t.co/OoBHaZ2xP5
1534201531133612032 2022-06-07 15:52:03 +0000 <alexxubyte> 3. Combine DOM tree and CSSOM tree to construct the Render Tree. The render tree maps all DOM structures except invisible elements (such as &lt;head&gt; or tags with display:none; ). In other words, the render tree is a visual representation of the DOM.  https://t.co/LTBEWA22eM
1534201523713867777 2022-06-07 15:52:01 +0000 <alexxubyte> 2. Parse CSS and generate CSSOM tree. The styles (CSS files) are loaded and parsed to the CSSOM (CSS Object Model).  https://t.co/Q7Fawg7Og2
1534201516063461376 2022-06-07 15:52:00 +0000 <alexxubyte> How does the browser render a web page?  1. Parse HTML and generate Document Object Model (DOM) tree. When the browser receives the HTML data from the server, it immediately parses it and converts it into a DOM tree.  https://t.co/TxnJ7e5MQ7
1533839282758045697 2022-06-06 15:52:37 +0000 <alexxubyte> Over to you: Both token bucket and leaky bucket can be used for rate limiting. How do you know which one to pick?
1533839280136523776 2022-06-06 15:52:36 +0000 <alexxubyte> We should be able to handle intermittent errors effectively with exponential backoff in the browser and with a flow control gateway on the server side. Any remaining issues are real errors that need to be fixed carefully.
1533839277578063874 2022-06-06 15:52:35 +0000 <alexxubyte> 2. Circuit breaker. This will stop the HTTP flow immediately when the error threshold is exceeded. After a set amount of time, it will only let a limited amount of HTTP traffic through. If everything works well, it will slowly let all HTTP traffic through.
1533839275111763969 2022-06-06 15:52:35 +0000 <alexxubyte> 1. Rate limiter, which limits how often a request can be made. It has two slightly different choices; the token bucket and the leaky bucket.
1533839263040610304 2022-06-06 15:52:32 +0000 <alexxubyte> 1. The latency between two retries. The latency will increase exponentially. 2. The number of retries is usually capped.  https://t.co/rUvGb8DBiw
1533839255075598337 2022-06-06 15:52:30 +0000 <alexxubyte> So which things should we do carefully in the browser? We definitely should not overwhelm the server with retried requests. An algorithm named exponential backoff might be able to help. It controls two things:
1533839251824971776 2022-06-06 15:52:29 +0000 <alexxubyte> 1. For 4XX  http error code, do not retry. 2. For 5XX  http error code, try again carefully.  https://t.co/dWFxgGE12Y
1533839244124225536 2022-06-06 15:52:27 +0000 <alexxubyte> From the browser's point of view, the easiest thing to do is to try again and hope the error just goes away. This is a good idea in a distributed network, but we also have to be very careful not to make things worse. Here’s two general rules:
1533839240806551552 2022-06-06 15:52:27 +0000 <alexxubyte> How do we properly deal with HTTP errors on the browser side? And how do you handle them correctly on the server side when the client side is at fault?  https://t.co/5dLT7L1Frf
1533262624363716608 2022-06-05 01:41:10 +0000 <alexxubyte> @jacob__gold Good to know. Thank you for sharing!
1533129038717259776 2022-06-04 16:50:21 +0000 <alexxubyte> @_tieppt Yes, it should be Erlang/OTP.
1533111084055310337 2022-06-04 15:39:00 +0000 <alexxubyte> I just released the newsletter to 50k subscribers. Topics discussed:  🔹 What do WhatsApp, Discord, and FB Messenger have in common?  🔹 ELK stack 🔹 Linux file permission 🔹 Ship code to production  If you are interested, subscribe here:  https://t.co/PczMAd8Jdb  https://t.co/vzdWqq6SEL
1532738992017317888 2022-06-03 15:00:27 +0000 <alexxubyte> @GergelyOrosz 4. 𝐅𝐚𝐜𝐞𝐛𝐨𝐨𝐤 𝐜𝐨𝐫𝐞: Has a sophisticated and effective approach few other companies possess.  https://t.co/NBZJV5abDV
1532738976515166208 2022-06-03 15:00:23 +0000 <alexxubyte> @GergelyOrosz While automation is sometimes present in more traditional companies, it's very typical that they rely on large QA teams to verify what they build. Working on branches is also common; it's rare to have trunk-based development in these environments.
1532738973306458112 2022-06-03 15:00:22 +0000 <alexxubyte> @GergelyOrosz 2. 𝐓𝐫𝐚𝐝𝐢𝐭𝐢𝐨𝐧𝐚𝐥 𝐜𝐨𝐦𝐩𝐚𝐧𝐢𝐞𝐬: Tend to rely more heavily on QAs teams.  https://t.co/SYy9QCHEJi
1532738966180376578 2022-06-03 15:00:21 +0000 <alexxubyte> @GergelyOrosz Startups tend to prioritize moving fast and iterating quickly. As the company attracts users, these teams need to start to find ways to not cause regressions or ship bugs. They then have the choice of going down one of two paths: hire QAs or invest in automation.
1532738962921361409 2022-06-03 15:00:20 +0000 <alexxubyte> @GergelyOrosz wrote an excellent article about this topic and he has kindly agreed to share excerpts with Twitter readers.   1. 𝐒𝐭𝐚𝐫𝐭𝐮𝐩𝐬: Typically do fewer quality checks than other companies.  https://t.co/A0grbQINNE
1532738954096611329 2022-06-03 15:00:18 +0000 <alexxubyte> How do companies typically ship code to production?  https://t.co/jXDcmlntuQ
1532026897604890624 2022-06-01 15:50:50 +0000 <alexxubyte> This week’s newsletter-only topic is “𝐖𝐡𝐚𝐭 𝐝𝐨 𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩, 𝐃𝐢𝐬𝐜𝐨𝐫𝐝, 𝐚𝐧𝐝 𝐅𝐚𝐜𝐞𝐛𝐨𝐨𝐤 𝐌𝐞𝐬𝐬𝐞𝐧𝐠𝐞𝐫 𝐡𝐚𝐯𝐞 𝐢𝐧 𝐜𝐨𝐦𝐦𝐨𝐧?”. Subscribe to the ByteByteGo newsletter at  https://t.co/PczMAd8Jdb to receive it on Saturday.
1532026895067324416 2022-06-01 15:50:50 +0000 <alexxubyte> Over to you: what are some of the commonly used Linux commands to change file permissions?
1532026892206821378 2022-06-01 15:50:49 +0000 <alexxubyte> 𝐏𝐞𝐫𝐦𝐢𝐬𝐬𝐢𝐨𝐧 There are three types of permissions.  🔹Read (r): the read permission allows the user to read a file.  🔹Write (w): the write permission allows the user to change the content of the file.  🔹Execute (x): the execute permission allows a file to be executed.
1532026889589534722 2022-06-01 15:50:48 +0000 <alexxubyte> 𝐎𝐰𝐧𝐞𝐫𝐬𝐡𝐢𝐩 🔹Owner: the owner is the user who created the file or directory 🔹Group: a group can have multiple users. All users in the group have the same permissions to access the file or directory 🔹Other: other means those who are not owners or members of the group
1532026886359879681 2022-06-01 15:50:48 +0000 <alexxubyte> Linux file permission illustrated.  To understand Linux file permissions, we need to understand Ownership and Permission.  https://t.co/HMKOivuifo
1531663344918114309 2022-05-31 15:46:13 +0000 <alexxubyte> Over to you: which other log management products have you used in production? How do they compare with ELK Stack?  Image source:  https://t.co/nXJ5zmjGzV
1531663342346981376 2022-05-31 15:46:12 +0000 <alexxubyte> ELK Stack is pretty convenient for troubleshooting and monitoring. It became popular by providing a simple and robust suite in the log analytics space, for a reasonable price.
1531663338655993857 2022-05-31 15:46:11 +0000 <alexxubyte> Step 4 - Kibana builds on top of Elasticsearch and provides users with various search tools and dashboards with which to visualize the data.  https://t.co/XsspBAEtZ4
1531663330003193859 2022-05-31 15:46:09 +0000 <alexxubyte> Step 2 - Beats sends data to Logstash for aggregation and transformation. If we work with massive data, we can add a message queue (Kafka) to decouple the data producers and consumers.  Step 3 - Logstash writes data into Elasticsearch for data indexing and storage.  https://t.co/myg5ZI8DO8
1531663319823622144 2022-05-31 15:46:07 +0000 <alexxubyte> The diagram below shows how ELK Stack works:  Step 1 - Beats collects data from various data sources. For example, Filebeat and Winlogbeat work with logs, and Packetbeat works with network traffic.  https://t.co/tyVT7hDUv1
1531663311640461312 2022-05-31 15:46:05 +0000 <alexxubyte> In order to scale the edge data ingestion, a new product Beats is later developed as lightweight agents installed on edge hosts to collect and ship logs to Logstash.  🔹 Kibana is a visualization layer with which users analyze and visualize the data.
1531663309140684800 2022-05-31 15:46:04 +0000 <alexxubyte> 🔹 Logstash collects data from all kinds of edge collectors, then transforms that data and sends it to various destinations for further processing or visualization.
1531663306666090496 2022-05-31 15:46:03 +0000 <alexxubyte> 🔹 Elasticsearch is a full-text search and analysis engine, leveraging Apache Lucene search engine as its core component.
1531663302991831045 2022-05-31 15:46:03 +0000 <alexxubyte> What is ELK Stack and why is it so popular for log management?  The ELK Stack is composed of three open-source products. ELK stands for Elasticsearch, Logstash, and Kibana.  https://t.co/yAO96YFfhr
1531304320997523457 2022-05-30 15:59:35 +0000 <alexxubyte> The ByteByteGo system design newsletter crossed 50k readers!   On another note, “The Pragmatic Engineer” has become the most-read technology newsletter on @SubstackInc. Congrats, @GergelyOrosz!   ByteByteGo:  https://t.co/lWsSVqHpKO The Pragmatic Engineer:  https://t.co/96oseWu1EW  https://t.co/YoWD3QCJwL
1530573245799313408 2022-05-28 15:34:33 +0000 <alexxubyte> I released the ByteByteGo newsletter to 50k subscribers. Topics discussed:  🔹 Retry patterns 🔹 Stop loss 🔹 Netflix API architecture 🔹 Chaos Engineering 🔹 Free ebook   If you are interested, subscribe here:  https://t.co/PczMAd8Jdb  The post is on top of the blog/newsletter.  https://t.co/TEc2Mkmet0
1530212215034216449 2022-05-27 15:39:56 +0000 <alexxubyte> 𝐅𝐫𝐞𝐞 𝐞𝐁𝐨𝐨𝐤. The ebook “Software Engineering at Google” is free to read online now at:  https://t.co/7ja9Atok2U  --- I will release a 𝐧𝐞𝐰𝐬𝐥𝐞𝐭𝐭𝐞𝐫 𝐨𝐧𝐥𝐲 𝐛𝐨𝐧𝐮𝐬 𝐬𝐞𝐫𝐢𝐞𝐬 this Saturday. Subscribe here so you won’t miss it:  https://t.co/PczMAd8Jdb  https://t.co/ZFJDotsLfu
1529852231452831744 2022-05-26 15:49:29 +0000 <alexxubyte> 8. The trading system notifies the investor that the 100 shares have been sold for $35.5 per share.  Over to you: under extreme market conditions, where the stock price drops suddenly by 20%, what will happen to your stop-loss order?  https://t.co/E8fGdJyKA6
1529852223752007682 2022-05-26 15:49:28 +0000 <alexxubyte> 7. The order is filled (i.e. matched to the best buy orders in the market,) usually instantaneously. Then the trading engine receives from the exchange a ‘fill report’ stating the shares have been sold for, say, $35.5 per share.  https://t.co/BO8rXwmPxq
1529852216093200386 2022-05-26 15:49:26 +0000 <alexxubyte> 5-6. If the trading engine detects that the market price of ABC Inc. falls to, say, $35, it immediately creates a market order and then submits it to the exchange to sell the 100 shares for the current best market price.  https://t.co/Z2mnyxh5K3
1529852208375689217 2022-05-26 15:49:24 +0000 <alexxubyte> 3-4. The trading engine subscribes to the market data of ABC Inc. from the exchange and monitors its real-time market price.  https://t.co/8AMcBcS3hh
1529852200150704128 2022-05-26 15:49:22 +0000 <alexxubyte> The diagram below illustrates how a stop-loss order is executed by a trading system.  1. The investor submits a stop-loss order to the trading system with 100 shares, to sell for $36.  2. Upon receiving the order request, the trading engine creates the stop-loss order.  https://t.co/LuyChf1nh4
1529852192718397440 2022-05-26 15:49:20 +0000 <alexxubyte> For example, let's say an investor has 100 shares in ABC Inc., and the current price is $40 per share. The investor wants to sell the stock if the market price falls to or below $36, in order to limit their loss.
1529852190105382914 2022-05-26 15:49:20 +0000 <alexxubyte> When the price of the stock hits the stop-loss point, the stop-loss order is triggered and it turns into a market order to sell at the current market price.
1529852186489868288 2022-05-26 15:49:19 +0000 <alexxubyte> What is a stop-loss order and how does it work?  A stop-loss order allows us to set a price called the ‘stop-loss price’ of a stock or a share. This is a value the investor chooses, at which they will sell it to minimize their loss on the investment.  https://t.co/TYgm2oHAvf
1529498767661092865 2022-05-25 16:24:57 +0000 <alexxubyte> @hellonehha Happy birthday, Neha!
1529489393961971713 2022-05-25 15:47:42 +0000 <alexxubyte> 𝐆𝐚𝐭𝐞𝐰𝐚𝐲 𝐚𝐠𝐠𝐫𝐞𝐠𝐚𝐭𝐢𝐨𝐧 𝐥𝐚𝐲𝐞𝐫. Some use cases may span multiple services, we need a gateway aggregation layer. Imagine the Netflix app needs 3 APIs (movie, production, talent) to render the frontend. The gateway aggregation layer makes it possible.  https://t.co/hSgsMlkUmB
1529489386391232513 2022-05-25 15:47:40 +0000 <alexxubyte> 𝐃𝐢𝐫𝐞𝐜𝐭 𝐚𝐜𝐜𝐞𝐬𝐬. In this architecture, a client app can make requests directly to the microservices. With hundreds or even thousands of microservices, exposing all of them to clients is not ideal.  https://t.co/IP53JSN7lp
1529489377432199168 2022-05-25 15:47:38 +0000 <alexxubyte> Evolution of the Netflix API architecture.  The Netflix API architecture went through 4 main stages.  𝐌𝐨𝐧𝐨𝐥𝐢𝐭𝐡. The application is packaged and deployed as a monolith, such as a single Java WAR file, Rails app, etc. Most startups begin with a monolith architecture.  https://t.co/cgVcfaqoCl
1529130850213765120 2022-05-24 16:02:59 +0000 <alexxubyte> If you enjoy these posts, you might like my ByteByteGo System Design newsletter. Subscribe here:  https://t.co/PczMAd8Jdb
1529130847684595712 2022-05-24 16:02:58 +0000 <alexxubyte> Over to you: some teams, such as QA and SRE, maybe against chaos engineering - sometimes for understandable reasons. How do you convince them that it’s a valuable exercise?
1529130844710809600 2022-05-24 16:02:57 +0000 <alexxubyte> 4. Have a runbook. In this runbook, we document the steps we will take to bring down the service, the steps to bring it back up, and most importantly, the emergency plan to stop the experiment.  That’s all set. You are good to go.  https://t.co/5AMrBBODvu
1529130837785997313 2022-05-24 16:02:56 +0000 <alexxubyte> 3. Good monitoring. We need to double check that the services within the blast radius have good monitoring, so we know how well the experiment proceeds, and whether the blast radius has widened.
1529130834808041474 2022-05-24 16:02:55 +0000 <alexxubyte> 2. Calculate blast radius. When a service is down, the failure may cascade to other services. So we need to have an idea of how wide the impact will be, known as the ‘blast radius.’  https://t.co/h3vTZYuHf1
1529130823093432320 2022-05-24 16:02:52 +0000 <alexxubyte> 1. Have a plan. In statistics terminology, we need to have a hypothesis for the behavior of the selected service that we want to bring down with chaos engineering.  https://t.co/ab68jJEsnI
1529130816332189702 2022-05-24 16:02:51 +0000 <alexxubyte> To do this successfully, it’s helpful to prepare, like this:
1529130813832372225 2022-05-24 16:02:50 +0000 <alexxubyte> Obviously, some care must be taken when doing this. After all, we do not destroy our production services for fun, or to terrify our clients. We do chaos engineering to find pain points in the system; it is a service for our clients.
1529130811290550272 2022-05-24 16:02:49 +0000 <alexxubyte> The answer is they want to verify that their distributed system is as reliable as they have designed it to be. This methodology is called ‘Chaos Engineering,’ which was first used by Netflix about 12 years ago. How to try out chaos engineering in a system?
1529130808279040003 2022-05-24 16:02:49 +0000 <alexxubyte> Why do Big Tech firms sometimes intentionally destroy their services in production?  https://t.co/qZapZacGXQ
1528762404376481792 2022-05-23 15:38:54 +0000 <alexxubyte> Combine is useful for a data cleansing process.  Over to you: do you have any tricks which you use during production data analysis, especially during outages when the pressure is on?
1528762400475738112 2022-05-23 15:38:53 +0000 <alexxubyte> Merge can be used to combine data from different domains with the same keys.  🔹 Join: this function works similarly to database outer joins.  🔹 Combine: this function can apply calculations while combining two tables. The example below chooses the smaller value for the cell.  https://t.co/g9Afznuipz
1528762390707286016 2022-05-23 15:38:51 +0000 <alexxubyte> 🔹 Append: this function supports the adding of data to an existing table.  Append can be used in web crawlers. The new data can be appended to the table when it is crawled.  🔹 Merge: this function supports horizontal combination on keys. It works similarly to database joins.  https://t.co/rMAxisJYqe
1528762380691177472 2022-05-23 15:38:49 +0000 <alexxubyte> How do we quickly merge data without Mircosoft Excel?  Here are 5 useful pandas functions for production data analysis.  🔹 Concat: this function supports the vertical and horizontal combination of two tables.  Concat can quickly combine the data from different shards.  https://t.co/sfBsA8BC3Z
1528157029000392704 2022-05-21 23:33:22 +0000 <alexxubyte> @amuldotexe Hi Amul, thank you for your kind words! I love your content. Didn’t know you are trying to move to a full-stack dev role. That’s quite a big change. But with your dedication, I’m sure you will achieve your goal soon!
1528030270414127105 2022-05-21 15:09:40 +0000 <alexxubyte> Woke up to 30,000 followers!   I Googled what 30k people look like and found this.    A quick intro:  I write ByteByteGo System Design newsletter ( https://t.co/lWsSVqHpKO)  and tweet 5 days a week about:  🔹System design 🔹Book writing 🔹Interview tips  What about you?  https://t.co/9QV8FoEWlW
1527670485747519490 2022-05-20 15:20:01 +0000 <alexxubyte> — If you enjoyed those posts, you might like my ByteByteGo System Design newsletter as well. Subscribe here:  https://t.co/dkjDPxrTOt
1527670481062531072 2022-05-20 15:20:00 +0000 <alexxubyte> 1/ I am thinking about starting a 14-day System Design learning challenge on Twitter with a free giveaway of 5 copies of signed books. The goal is to help us get into the habit of learning a little bit of system design each day.  https://t.co/r2IS9RsYzN
1527318938798895106 2022-05-19 16:03:05 +0000 <alexxubyte> We only need to set up the CDC link between two databases and the data will automatically flow to the destination.  Over to you: can we use CDC for NoSQL/NewSQL data systems, such as Redis, Cassandra, MongoDB, ElasticSearch, etc?
1527318935950925826 2022-05-19 16:03:05 +0000 <alexxubyte> All these operations except step 1 are transparent to the user. Popular CDC solutions, such as Debezium, have connectors for most databases, such as MySQL, PostgreSQL, DB2, Oracle, etc.
1527318932654202880 2022-05-19 16:03:04 +0000 <alexxubyte> 6. The sink connector writes the log content to the destination.  https://t.co/DkksriwUey
1527318907786186753 2022-05-19 16:02:58 +0000 <alexxubyte> Data stored in the database could be interesting to many other data systems, such as analytics, AI, etc. If we have thousands of data systems, do we have to write thousands of converters?  https://t.co/r7q0u5uIaA
1526989200255438848 2022-05-18 18:12:50 +0000 <alexxubyte> @Franc0Fernand0 Cannot agree more. Pair programming is a great way to work on a software project, share knowledge and build friendships!
1526988478713458688 2022-05-18 18:09:58 +0000 <alexxubyte> @YirenLu No problem. Based on our research, pandoc supports .docx better than gdoc. Lua filter might be helpful too:  https://t.co/dmhH2lCUCh Good luck!
1526988062684614656 2022-05-18 18:08:18 +0000 <alexxubyte> @ZainRzv Thank you for sharing, Zain!
1526953860920619008 2022-05-18 15:52:24 +0000 <alexxubyte> Awesome log parsing cheat sheet by @fr0gger_ !  https://t.co/iKkWU7n47e
1526933146221965313 2022-05-18 14:30:05 +0000 <alexxubyte> @thiagoghisi Thank you for sharing, Thiago. Love your content too.
1526932932484648963 2022-05-18 14:29:14 +0000 <alexxubyte> @vquaiato Thank you for sharing, Vinicius!
1526924623329169408 2022-05-18 13:56:13 +0000 <alexxubyte> @Franc0Fernand0 Thank you, Franco. Glad to hear you find it useful. Love your content too!
1526715481465319424 2022-05-18 00:05:10 +0000 <alexxubyte> @Med7atDawoud Thank you for sharing, Medhat!
1526626790474584064 2022-05-17 18:12:44 +0000 <alexxubyte> Table of content and a sample page.  https://t.co/qkjLBLyeUR
1526600341826834432 2022-05-17 16:27:39 +0000 <alexxubyte> I just put all my technical threads in one big PDF. It has 75 topics and 158 pages!  Here are some sample topics: 🔹 Why is Redis fast? 🔹 Design Google Maps 🔹 How does HTTPs work?  The PDF Link is in the first post of my newsletter:  https://t.co/PczMAd8Jdb  Hope it's helpful.  https://t.co/3FPZS9lTo3
1526425198123134976 2022-05-17 04:51:41 +0000 <alexxubyte> @Abh1navv @bytebytego Thank you for your kind words, Abhinav. The @bytebytego link is real :)
1526398390396780545 2022-05-17 03:05:10 +0000 <alexxubyte> @ykdojo That’s amazing. Keep going!
1526371089105842177 2022-05-17 01:16:40 +0000 <alexxubyte> @AJoshDickerson Mostly for backend roles.
1526243164050165760 2022-05-16 16:48:21 +0000 <alexxubyte> @alexbdebrie Thank you for sharing!
1526234991104954369 2022-05-16 16:15:52 +0000 <alexxubyte> If you enjoyed those posts, you might like my ByteByteGo System Design newsletter as well.  Click the link below to sign up:  https://t.co/PczMAd8Jdb
1526234986772254722 2022-05-16 16:15:51 +0000 <alexxubyte> Even when transaction A commits, transaction B still reads data based on the Read View created when transaction B starts. So transaction B always reads the data with balance=100.  Over to you: have you seen isolation levels used in the wrong way? Did it cause serious outages?  —  https://t.co/iwEnHqcZdf
1526234975254634496 2022-05-16 16:15:48 +0000 <alexxubyte> Before transaction A commits, transaction B reads the balance data. Transaction B finds that transaction_id 201 is not committed, it reads the next committed record(transaction_id=200).  https://t.co/yslXWvvyrj
1526234964169084928 2022-05-16 16:15:46 +0000 <alexxubyte> Now transaction A modifies the balance to 200, a new row of the log is created, and the roll_pointer points to the old row.  https://t.co/aymt2jA32t
1526234953146503168 2022-05-16 16:15:43 +0000 <alexxubyte> There are two hidden columns for each row: transaction_id and roll_pointer. When transaction A starts, a new Read View with transaction_id=201 is created. Shortly afterward, transaction B starts, and a new Read View with transaction_id=202 is created.  https://t.co/YL2qTG00MF
1526234944258703360 2022-05-16 16:15:41 +0000 <alexxubyte> The diagram below takes Repeatable Read as an example to demonstrate how MVCC works:
1526234939900907520 2022-05-16 16:15:40 +0000 <alexxubyte> 🔹Read Committed: Data modification can only be read after the transaction is committed  🔹Read Uncommitted: The data modification can be read by other transactions before a transaction is committed  The isolation is guaranteed by MVCC(Multi-Version Consistency Control) and locks  https://t.co/sLwJqbPD2o
1526234928710488064 2022-05-16 16:15:37 +0000 <alexxubyte> 🔹Serializalble: This is the highest isolation level. Concurrent transactions are guaranteed to be executed in sequence.  🔹Repeatable Read: Data read during the transaction stays the same as the transaction starts.  https://t.co/rH3LVJsWtv
1526234911178272768 2022-05-16 16:15:33 +0000 <alexxubyte> Popular interview question: What are database 𝐢𝐬𝐨𝐥𝐚𝐭𝐢𝐨𝐧 𝐥𝐞𝐯𝐞𝐥𝐬? What are they used for?  Database isolation allows a transaction to execute as if there are no other concurrently running transactions.  The diagram below illustrates four isolation levels.  https://t.co/uVPZ80qQpT
1525500908062314496 2022-05-14 15:38:53 +0000 <alexxubyte> The stock market is volatile. We will talk about how the “Stop Loss” strategy works from the system design’s perspective next week. Subscribe so you won’t miss it:  https://t.co/PczMAdqkBL  https://t.co/14dy5kFf4D
1525137459239002112 2022-05-13 15:34:40 +0000 <alexxubyte> If you enjoyed those posts, you might like my ByteByteGo System Design newsletter as well.  Click the link below to sign up:  https://t.co/PczMAd8Jdb
1525137428192690176 2022-05-13 15:34:33 +0000 <alexxubyte> For a non-cloud application, we own and manage all the hardware and software. We say the application is 𝐨𝐧-𝐩𝐫𝐞𝐦𝐢𝐬𝐞𝐬.  With cloud computing, cloud service vendors provide three kinds of models for us to use: IaaS, PaaS, and SaaS.
1525137424208121857 2022-05-13 15:34:32 +0000 <alexxubyte> What is IaaS/PaaS/SaaS?  The diagram below illustrates the differences between IaaS (Infrastructure-as-a-Service), PaaS (Platform-as-a-Service), and SaaS (Software-as-a-Service).  https://t.co/4a5xj4VjMn
1524788140556230659 2022-05-12 16:26:36 +0000 <alexxubyte> @Franc0Fernand0 Yes, it's the same subscription as for the newsletter :)
1524779721094901760 2022-05-12 15:53:09 +0000 <alexxubyte> Subscribe to receive updates when the PDF is available:  https://t.co/PczMAd8Jdb
1524779718930681856 2022-05-12 15:53:08 +0000 <alexxubyte> What’s included in the PDF?     🔹 Why is Redis fast?     🔹 How to scale a website to support millions of users?     🔹 How does HTTPs work?     🔹 What happens when you type a URL into your browser?     🔹 How to avoid double charge?     🔹 Why is Kafka fast?
1524415732448055296 2022-05-11 15:46:47 +0000 <alexxubyte> Over to you: what’s the first programming language you learned? And what are the other languages you learned over the years?
1524415728148836360 2022-05-11 15:46:46 +0000 <alexxubyte> 16 Rust 17 Ruby 18 Dart 19 Assembly 20 Swift 21 R 22 VBA 23 Matlab 24 Groovy 25 Objective-C 26 Scala 27 Perl 28 Haskell 29 Delphi 30 Clojure 31 Elixir 32 LISP 33 Julia 34 F 35 Erlang 36 APL 37 Crystal 38 COBOL  https://t.co/T4pEeFnklv
1524415709048045568 2022-05-11 15:46:41 +0000 <alexxubyte> Programming languages come and go. Some stand the test of time. Some already are shooting stars and some are rising rapidly on the horizon.  https://t.co/Wut4UFulrV
1524235367494217728 2022-05-11 03:50:05 +0000 <alexxubyte> @curtiseinsmann Thank you, Curtis. I started to post regularly on 10/5/2021, a little over 7 months.
1524234137715965954 2022-05-11 03:45:11 +0000 <alexxubyte> @AuthorOnTheSide Thank you, Hassan!
1524234070611267586 2022-05-11 03:44:55 +0000 <alexxubyte> @ArpanKG Thank you, Arpan.
1524176672458625024 2022-05-10 23:56:51 +0000 <alexxubyte> Just noticed that I passed 150,000 Linkedin followers. I Googled what 150,000 people look like and found this picture.    I appreciate every single one of you. Thank you!   Oops, this is Twitter... Anyway, feel free to get connected on LinkedIn!   https://t.co/s8wDepYZJB  https://t.co/86Mg9tjVkC
1524168803399004160 2022-05-10 23:25:35 +0000 <alexxubyte> @ZainRzv Just bought it. Even though I'm not looking for a job, the topic is quite interesting. Congrats on the launch!
1524045932018356224 2022-05-10 15:17:20 +0000 <alexxubyte> 6/ 3. There is a small virtual machine for bitcoin - and also Ethereum. The virtual machine defines a set of bytecodes to do basic tasks such as validation.  Over to you: if Elon Musk set up a base on planet Mars, what payment solution will you recommend?
1524045929182945285 2022-05-10 15:17:19 +0000 <alexxubyte> 5/ 2. The golden source of truth for bitcoin is the blockchain, which is also the journal. It’s the same if we use Event Sourcing architecture to build a traditional wallet, although there are other options.
1524045923449327617 2022-05-10 15:17:18 +0000 <alexxubyte> 3/ I want to share my discovery of this book with you because it explains very clearly bitcoin and its underlying blockchain. This book makes me rethink how to renovate payment systems.
1524045920643346433 2022-05-10 15:17:17 +0000 <alexxubyte> 2/ As a fan of technology, I always seek new solutions to old challenges. A book that explains a lot about an emerging payment system is ‘Mastering Bitcoin’ by Andreas M. Antonopoulos.
1524045917136982019 2022-05-10 15:17:16 +0000 <alexxubyte> 1/ What is the future of online payments? I don’t know the answer, but I do know one of the candidates is the blockchain.  https://t.co/KBjAHLMMAT
1523691230617473024 2022-05-09 15:47:52 +0000 <alexxubyte> 11/ Over to you:  Question 1: have you implemented SSO in your projects? What is the most difficult part?  Question 2: what’s your favorite sign-in method and why?
1523691226649616384 2022-05-09 15:47:51 +0000 <alexxubyte> 10/ Step 11-14: YouTube validates the token in the SSO authentication server. The authentication server registers the YouTube system, and returns “valid.” YouTube returns the protected resource to the user.  The process is complete and the user gets back access to their account.  https://t.co/JnbiqohZBX
1523691209507581952 2022-05-09 15:47:47 +0000 <alexxubyte> 8/ Steps 4-7: Gmail validates the token in the SSO authentication server. The authentication server registers the Gmail system, and returns “valid.” Gmail returns the protected resource to the user.  https://t.co/wsz4pZcDlJ
1523691201420926977 2022-05-09 15:47:45 +0000 <alexxubyte> 7/ Steps 2-3: The SSO authentication server validates the credentials, creates the global session for the user, and creates a token.  https://t.co/sTC2utNjYC
1523691194227732480 2022-05-09 15:47:44 +0000 <alexxubyte> 6/ As a result, the user is redirected to the SSO login page, where they enter their login credentials.
1523691190331211776 2022-05-09 15:47:43 +0000 <alexxubyte> 5/ Step 1: A user visits Gmail, or any email service. Gmail finds the user is not logged in and so redirects them to the SSO authentication server, which also finds the user is not logged in.  https://t.co/ZDyWT7Uiqo
1523691182781435911 2022-05-09 15:47:41 +0000 <alexxubyte> 4/ Basically, Single Sign-On (SSO) is an authentication scheme. It allows a user to log in to different systems using a single ID.  The diagram below illustrates how SSO works.
1523691177274339328 2022-05-09 15:47:40 +0000 <alexxubyte> 2/ A friend recently went through the irksome experience of being signed out from a number of websites they use daily. This event will be familiar to millions of web users, and it is a tedious process to fix.
1523691173327507456 2022-05-09 15:47:39 +0000 <alexxubyte> 1/ What is SSO (Single Sign-On)?  https://t.co/0uVBeGvEcV
1522736624806686721 2022-05-07 00:34:37 +0000 <alexxubyte> @debug_mode Good question. There is a separate pool of WebSocket servers, so in a sense, it’s a separate “service”. The API servers are quite standard HTTP request/respond flow. You can break it down into different services if you want.
1522600407578464256 2022-05-06 15:33:20 +0000 <alexxubyte> Let’s take a look at something different today…  Source: Engineeriing LinkedIn  https://t.co/yBfysZF0pN
1522428760615579650 2022-05-06 04:11:16 +0000 <alexxubyte> @j_thomas_421 @strangestloop Thank you!
1522242717392142341 2022-05-05 15:52:00 +0000 <alexxubyte> 7/ Over to you: what other mechanisms can we use to ensure password safety?
1522242714552705025 2022-05-05 15:51:59 +0000 <alexxubyte> 6/ 2️⃣ The system fetches the corresponding salt from the database. 3️⃣ The system appends the salt to the password and hashes it. Let’s call the hashed value H1. 4️⃣ The system compares H1 and H2 (H2 is the hash stored in the database). If they are the same, the password is valid  https://t.co/abxdOEHQTq
1522242708416303106 2022-05-05 15:51:58 +0000 <alexxubyte> 5/ 2️⃣  The password can be stored in the database using the following format: 𝘩𝘢𝘴𝘩( 𝘱𝘢𝘴𝘴𝘸𝘰𝘳𝘥 + 𝘴𝘢𝘭𝘵).   𝐇𝐨𝐰 𝐭𝐨 𝐯𝐚𝐥𝐢𝐝𝐚𝐭𝐞 𝐚 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝? To validate a password, it can go through the following process: 1️⃣ A client enters the password.  https://t.co/arYXYcIDJa
1522242701747392512 2022-05-05 15:51:56 +0000 <alexxubyte> 4/ 𝐇𝐨𝐰 𝐭𝐨 𝐬𝐭𝐨𝐫𝐞 𝐚 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝 𝐚𝐧𝐝 𝐬𝐚𝐥𝐭? 1️⃣ A salt is not meant to be secret and it can be stored in plain text in the database. It is used to ensure the hash result is unique to each password.  https://t.co/PLayF186Kr
1522242697569832961 2022-05-05 15:51:55 +0000 <alexxubyte> 3/ 𝐖𝐡𝐚𝐭 𝐢𝐬 𝐬𝐚𝐥𝐭? According to OWASP guidelines, “a salt is a unique, randomly generated string that is added to each password as part of the hashing process”.
1522242696575807488 2022-05-05 15:51:55 +0000 <alexxubyte> 2/ 🔹 Storing password hashes directly is not sufficient because it is pruned to precomputation attacks, such as rainbow tables.    🔹 To mitigate precomputation attacks, we salt the passwords.
1522242694004674560 2022-05-05 15:51:54 +0000 <alexxubyte> 1/ How to store passwords safely in the database and how to validate a password? Let’s take a look.   𝐓𝐡𝐢𝐧𝐠𝐬 𝐍𝐎𝐓 𝐭𝐨 𝐝𝐨 🔹 Storing passwords in plain text is not a good idea because anyone with internal access can see them.  https://t.co/0XI1PJKJ6A
1521966228515942401 2022-05-04 21:33:20 +0000 <alexxubyte> @Franc0Fernand0 Thank you so much, Franco.
1521883436843106304 2022-05-04 16:04:21 +0000 <alexxubyte> 2. Server resources: The asymmetric encryption adds quite a lot of mathematical overhead. It is not suitable for data transmissions in long sessions.  Over to you: how much performance overhead does HTTPS add, compared to HTTP?
1521883435689684992 2022-05-04 16:04:20 +0000 <alexxubyte> 1. Security: The asymmetric encryption goes only one way. This means that if the server tries to send the encrypted data back to the client, anyone can decrypt the data using the public key.
1521883432942391297 2022-05-04 16:04:20 +0000 <alexxubyte> Step 4 - Now that both the client and the server hold the same session key (symmetric encryption), the encrypted data is transmitted in a secure bi-directional channel.  Why does HTTPS switch to symmetric encryption during data transmission? There are two main reasons:  https://t.co/jTGkhatpyj
1521883427057721345 2022-05-04 16:04:18 +0000 <alexxubyte> Step 3 - After validating the SSL certificate, the client generates a session key and encrypts it using the public key. The server receives the encrypted session key and decrypts it with the private key.  https://t.co/jqAqllhl0n
1521883422360186885 2022-05-04 16:04:17 +0000 <alexxubyte> The server then sends the SSL certificate to the client. The certificate contains the public key, host name, expiry dates, etc. The client validates the certificate.
1521883419923296256 2022-05-04 16:04:17 +0000 <alexxubyte> Step 2 - The client sends a “client hello” to the server. The message contains a set of necessary encryption algorithms and the latest TLS version it can support. The server responds with a “server hello” so the browser knows whether it can support the algorithms and TLS version.  https://t.co/CLgpqYCxCS
1521883414269362176 2022-05-04 16:04:15 +0000 <alexxubyte> How is the data encrypted and decrypted?  Step 1 - The client (browser) and the server establish a TCP connection.  https://t.co/c6YO6o0QWp
1521883407864590337 2022-05-04 16:04:14 +0000 <alexxubyte> How does HTTPS work?  Hypertext Transfer Protocol Secure (HTTPS) is an extension of the Hypertext Transfer Protocol (HTTP.) HTTPS transmits encrypted data using Transport Layer Security (TLS.) If the data is hijacked online, all the hijacker gets is binary code.  https://t.co/J72BAc9bGF
1521530056178249730 2022-05-03 16:40:08 +0000 <alexxubyte> 3/ I'd really appreciate a retweet or like on the first tweet, so it can reach a wider audience. Thank you.  Link to the content:  https://t.co/mejQSekolD
1521530055247024130 2022-05-03 16:40:08 +0000 <alexxubyte> 2/ 𝐖𝐡𝐚𝐭’𝐬 𝐢𝐧𝐜𝐥𝐮𝐝𝐞𝐝? 🔹 28 real system design interview questions (volume 1 + volume 2) 🔹 450+ diagrams to explain how different systems work 🔹 Took 2.5+ years to make 🔹 Regular new content releases 🔹 Discord community 🔹 Finding mock interview buddies
1521530052906668033 2022-05-03 16:40:07 +0000 <alexxubyte> 1/ *BIG* announcement  The 𝐝𝐢𝐠𝐢𝐭𝐚𝐥 𝐯𝐞𝐫𝐬𝐢𝐨𝐧 of the System Design Interview - An Insider’s Guide (volume 1 + volume 2) are available now on our newly released platform.   Link to the content:  https://t.co/mejQSekolD  https://t.co/MQfNpVKvGl
1521154017446924288 2022-05-02 15:45:54 +0000 <alexxubyte> 7/ Over to you: which book helped you understand a challenging topic? Why do you like it?   -- If you found this thread helpful, follow me  @alexxubyte for more.   Retweet the first tweet to help more people to learn system design.
1521154016511610880 2022-05-02 15:45:53 +0000 <alexxubyte> 6/ 🔹 We all have questions we are afraid to ask when we first learn a new skill. Maybe we think it’s an easy one. This book is good at tackling design patterns from the student’s point of view. It guides us by asking our questions and clearly answering them.
1521154015593074688 2022-05-02 15:45:53 +0000 <alexxubyte> 5/ It is even harder to understand software design patterns because these are higher-level abstractions of the software. The book fixes this by using visualization. There are lots of diagrams, arrows, and comments on almost every page. The diagrams explain things very well.
1521154014666104832 2022-05-02 15:45:53 +0000 <alexxubyte> 4/ 🔹 This book solves the challenge of software’s abstract, “invisible” nature. Software is difficult to build because we cannot see its architecture; its details are embedded in the code and binary files.
1521154013764276225 2022-05-02 15:45:53 +0000 <alexxubyte> 3/ When I went back to the Design Patterns book, everything looked familiar and more understandable.   Last year, I bought the second edition of Head First Design Patterns and read through it. Here are a few things I like about the book:
1521154012791197696 2022-05-02 15:45:52 +0000 <alexxubyte> 2/ When I began my journey in software engineering, I found it hard to understand the classic textbook, 𝐃𝐞𝐬𝐢𝐠𝐧 𝐏𝐚𝐭𝐭𝐞𝐫𝐧𝐬, by the Gang of Four. Luckily, I discovered Head First Design Patterns in the school library. This book solved a lot of puzzles for me.
1521154010970877953 2022-05-02 15:45:52 +0000 <alexxubyte> 1/ How to learn design patterns? Besides reading a lot of well-written code, a good book guides us like a good teacher.   𝐇𝐞𝐚𝐝 𝐅𝐢𝐫𝐬𝐭 𝐃𝐞𝐬𝐢𝐠𝐧 𝐏𝐚𝐭𝐭𝐞𝐫𝐧𝐬, second edition, is the one I would recommend.  https://t.co/WfX3rRYzq6
1521139058948206599 2022-05-02 14:46:27 +0000 <alexxubyte> @pak_marmut @bence_hezso I wrote a post about this:  https://t.co/e6sXASHBMa Hope it answers your question.
1521006217472077824 2022-05-02 05:58:35 +0000 <alexxubyte> @m7Rahm Thank you for sharing!
1520990765425446912 2022-05-02 04:57:11 +0000 <alexxubyte> @shulhi Yes, the digital version will be available in 2-3 days.
1520990663541633026 2022-05-02 04:56:47 +0000 <alexxubyte> @ruthmalan Yes, I posted it 3-4 months ago. The 276-page version is pirated.
1520477359949766657 2022-04-30 18:57:06 +0000 <alexxubyte> @naqushab @bytebytego Thank you for sharing!
1520158760949354496 2022-04-29 21:51:06 +0000 <alexxubyte> @hasanhhw Thank you for sharing!
1520146523102662656 2022-04-29 21:02:28 +0000 <alexxubyte> @xdg Thank you, David.
1520105241697431553 2022-04-29 18:18:26 +0000 <alexxubyte> @Franc0Fernand0 Thank you!
1520072271099924481 2022-04-29 16:07:25 +0000 <alexxubyte> If you like my Twitter threads, consider subscribing to my newsletter so you won’t miss anything. You can also see all my technical posts in one place.  Subscribe now:  https://t.co/0RYwcKv26q
1520072268595965957 2022-04-29 16:07:25 +0000 <alexxubyte> One month ago, I started the weekly ByteByteGo System Design newsletter. Now it has 26,326 subscribers.  Every week, the latest episode is sent to over 20k people. Each episode includes 3 original technical posts from me and 1 post based on others.  Link:  https://t.co/0RYwcKv26q  https://t.co/RZ1JjEsHAx
1519922544513486848 2022-04-29 06:12:28 +0000 <alexxubyte> @acoustik @sql_johnpruitt Thank you for sharing the link. Timeseries DB is interesting. I’ll write a thread about it at some point.
1519706088391602176 2022-04-28 15:52:20 +0000 <alexxubyte> A visual guide on how to choose the right Database.  Picking a database is a long-term commitment so the decision shouldn’t be made lightly. The important thing to keep in mind is to choose the right database for the right job.  https://t.co/cTqjf4d9Pk
1519434972876001280 2022-04-27 21:55:01 +0000 <alexxubyte> @Abh1navv Thanks. My favorite Eng blogs are cloudflare, Uber and Airbnb.
1519348489418776576 2022-04-27 16:11:22 +0000 <alexxubyte> Requirements: 🔹Globally unique  🔹Roughly sorted by time 🔹Numerical values only 🔹64-bit 🔹Highly scalable, low latency   The implementation details of the algorithms can be found online so we will not go into detail here.  Over to you: What kind of ID generators have you used?  https://t.co/nhjeDExjhH
1519348482057797632 2022-04-27 16:11:20 +0000 <alexxubyte> IDs are very important for the backend. Do you know how to generate globally unique IDs?  In this post, we will explore common requirements for IDs that are used in social media such as Facebook, Twitter, and LinkedIn.  https://t.co/O2dgS4ePtn
1519086904880164865 2022-04-26 22:51:56 +0000 <alexxubyte> @mikecvet @44 The disclaimer was included in the thread. Wish I could update the tweet to make it more clear.
1519066039085985794 2022-04-26 21:29:01 +0000 <alexxubyte> @vmsemc2 @ahmetb Thanks. As I mentioned in the disclaimer, it is a historical reference. The tech talk was given in 2013 by Raffi Krikorian, ex-VP of eng at Twitter. The original diagram was blurry so I redrew it for better readability.
1518981309464424448 2022-04-26 15:52:20 +0000 <alexxubyte> Over to you: What are some of the biggest differences between Twitter and Facebook that might shape their system architectures?
1518981308554178562 2022-04-26 15:52:19 +0000 <alexxubyte> Disclaimer: This article is based on the tech talk given by Twitter in 2013 ( https://t.co/FjxNaDAz7e). Even though many years have passed, it’s still quite relevant. I redraw the diagram as the original diagram is difficult to read.
1518981306197024769 2022-04-26 15:52:19 +0000 <alexxubyte> 𝐒𝐞𝐚𝐫𝐜𝐡 &amp; 𝐃𝐢𝐬𝐜𝐨𝐯𝐞𝐫𝐲 🔹 Ingester: annotates and tokenizes Tweets so the data can be indexed. 🔹 Earlybird: stores search index. 🔹 Blender: creates the search and discovery timelines.   𝐏𝐮𝐬𝐡 𝐂𝐨𝐦𝐩𝐮𝐭𝐞 🔹HTTP push 🔹Mobile push  https://t.co/md9Fz7F3pr
1518981300568289280 2022-04-26 15:52:18 +0000 <alexxubyte> 3️⃣ The Fanout service does a lot of processing and stores them in the Redis cache. 4️⃣ The Timeline service is used to find the Redis server that has the home timeline on it. 5️⃣ A user pulls their home timeline through the Timeline service.  https://t.co/gpb6wkfTce
1518981294494871553 2022-04-26 15:52:16 +0000 <alexxubyte> How does Twitter work? Let’s take a look at it from the architectural point of view before Elon takes it.    𝐓𝐡𝐞 𝐋𝐢𝐟𝐞 𝐨𝐟 𝐚 𝐓𝐰𝐞𝐞𝐭: 1️⃣ A tweet comes in through the Write API.  2️⃣ The Write API routes the request to the Fanout service.  #twitter #systemdesign  https://t.co/rO5ZF4vfK5
1518615230858752000 2022-04-25 15:37:40 +0000 <alexxubyte> 🔹 Context switching is more expensive between processes. 🔹 Inter-thread communication is faster for threads.  Over to you: 1). Some programming languages support coroutine. What is the difference between coroutine and thread?   2). How to list running processes in Linux?
1518615229776621569 2022-04-25 15:37:39 +0000 <alexxubyte> 🔹 Processes are usually independent, while threads exist as subsets of a process. 🔹 Each process has its own memory space. Threads that belong to the same process share the same memory. 🔹 A process is a heavyweight operation. It takes more time to create and terminate.
1518615227339657218 2022-04-25 15:37:39 +0000 <alexxubyte> 2. The program is loaded into memory. It becomes one or more running processes. 3. When a process starts, it is assigned memory and resources. A process can have one or more threads.   Main differences between process and thread:  https://t.co/5QI8aCJrAn
1518615221887152128 2022-04-25 15:37:38 +0000 <alexxubyte> A 𝐓𝐡𝐫𝐞𝐚𝐝 is the smallest unit of execution within a process.   The following process explains the relationship between program, process, and thread.   1. The program contains a set of instructions.  https://t.co/xBbvyYT8Aj
1518615217764151297 2022-04-25 15:37:37 +0000 <alexxubyte> A 𝐏𝐫𝐨𝐜𝐞𝐬𝐬 means a program is in execution. When a program is loaded into the memory and becomes active, the program becomes a process. The process requires some essential resources such as registers, program counter, and stack.
1518615216732340224 2022-04-25 15:37:36 +0000 <alexxubyte> A 𝐏𝐫𝐨𝐠𝐫𝐚𝐦 is an executable file containing a set of instructions and passively stored on disk. One program can have multiple processes. For example, the Chrome browser creates a different process for every single tab.
1518615214316425216 2022-04-25 15:37:36 +0000 <alexxubyte> Popular interview question: What is the difference between 𝐏𝐫𝐨𝐜𝐞𝐬𝐬 and 𝐓𝐡𝐫𝐞𝐚𝐝?  To better understand this question, let’s first take a look at what is a Program.  https://t.co/n5WVfkgBGE
1518260821582786565 2022-04-24 16:09:22 +0000 <alexxubyte> ⚡ Giveaway Winners Announced ⁣⁣ Congratulations to the following 10 winners out of 2018 participants.  If you want to see one more round of book giveaways, please 𝐬𝐦𝐚𝐬𝐡 𝐭𝐡𝐚𝐭 𝐑𝐓 𝐁𝐮𝐭𝐭𝐨𝐧. If we get 1k RT, I’ll do 𝐚𝐧𝐨𝐭𝐡𝐞𝐫 𝐫𝐨𝐮𝐧𝐝 of the giveaway.  https://t.co/Bm5wuCrIJP
1517533041140281344 2022-04-22 15:57:26 +0000 <alexxubyte> Souce: [1]  https://t.co/7SgatnUa9R
1517530715880976391 2022-04-22 15:48:11 +0000 <alexxubyte> If you found this thread helpful, follow me  @alexxubyte for more.   Retweet the first tweet to help more people to learn system design.
1517530714635337729 2022-04-22 15:48:11 +0000 <alexxubyte> Over to you - what are some of the trends you see in software development in 2022?
1517530713070862336 2022-04-22 15:48:11 +0000 <alexxubyte> Software architects are adapting their feedback loops, which can be challenging when dealing with colleagues across many time zones or other remote work constraints. Good architects are learning from distributed working how to design better distributed systems.“ [1]
1517530711976144899 2022-04-22 15:48:10 +0000 <alexxubyte> Every engineer can actively participate in the architecture, and architects should help facilitate that process.   One positive benefit of the pandemic and the shift to remote and hybrid work is increased asynchronous communication, which can manifest as ADRs.
1517530710893993984 2022-04-22 15:48:10 +0000 <alexxubyte> Innovative software architecture is facilitating data quality the way we’ve improved code quality. Catching bad data early is as important as catching bugs early. The practice of software architecture does not belong solely to people with the job title of architect.
1517530709824466944 2022-04-22 15:48:10 +0000 <alexxubyte> Key takeaways:   “Data plus architecture" is the idea that, more frequently, software architecture is adapting to consider data. This holistically includes data quality, data pipelines, and traceability to understand how data influenced decisions and AI models.
1517530707832164352 2022-04-22 15:48:09 +0000 <alexxubyte> Interesting read: Software Architecture and Design InfoQ Trends Report — April 2022 by @InfoQ  https://t.co/3jMFBahqIp
1517174263085617153 2022-04-21 16:11:46 +0000 <alexxubyte> Feel free to 𝐅𝐨𝐥𝐥𝐨𝐰 𝐦𝐞 &amp; 𝐜𝐨𝐦𝐦𝐞𝐧𝐭 𝐨𝐧 𝐦𝐲 𝐋𝐢𝐧𝐤𝐞𝐝𝐈𝐧 post to double the chance 🤗. LinkedIn post:  https://t.co/BQWTNfsP3i
1517172339451985920 2022-04-21 16:04:08 +0000 <alexxubyte> Signed Book GIVEAWAY!  @sahnlam  and I will be giving away 10 signed copies of the SDI book (Volume 2).    Shipping is on us. Yes, we do 𝐢𝐧𝐭𝐞𝐫𝐧𝐚𝐭𝐢𝐨𝐧𝐚𝐥 shipping as long as USPS supports it.   𝐅𝐨𝐥𝐥𝐨𝐰 𝐦𝐞 &amp; 𝐑𝐞𝐭𝐰𝐞𝐞𝐭 𝐭𝐨 𝐞𝐧𝐭𝐞𝐫 🤗.  https://t.co/FypMvtCJey
1516943775121100800 2022-04-21 00:55:54 +0000 <alexxubyte> @halfghaninNE Thank you for your kind words. It is only available on amazon right now but we will release an e-version in a week or two to make it more accessible.
1516892131037564928 2022-04-20 21:30:41 +0000 <alexxubyte> My book System Design Interview (Volume 1) is available in Spanish now! Thank you so much for the translation, @Anaya_Multimed!
1516806335303536642 2022-04-20 15:49:45 +0000 <alexxubyte> Google Doc uses OT according to its Wikipedia page and CRDT is an active area of research for real-time concurrent editing.   Over to you - Have you encountered any issues while using Google Docs? If so, what do you think might have caused the issue?
1516806334368296970 2022-04-20 15:49:45 +0000 <alexxubyte> One of the biggest challenges is real-time conflict resolution. Common algorithms include:   🔹 Operational transformation (OT) 🔹 Differential Synchronization (DS) 🔹 Conflict-free replicated data type (CRDT)
1516806332019486720 2022-04-20 15:49:45 +0000 <alexxubyte> 3️⃣ Documents operations are persisted in the Message Queue. 4️⃣ The File Operation Server consumes operations produced by clients and generates transformed operations using collaboration algorithms. 5️⃣ Three types of data are stored: file metadata, file content, and operations.  https://t.co/kAvlQoBVp6
1516806326655066116 2022-04-20 15:49:43 +0000 <alexxubyte> One picture is worth more than a thousand words. In this post, we will take a look at how to design 𝐆𝐨𝐨𝐠𝐥𝐞 𝐃𝐨𝐜𝐬.   1️⃣ Clients send document editing operations to the WebSocket Server. 2️⃣ The real-time communication is handled by the WebSocket Server.  https://t.co/2mxhS2ooy7
1516444260500795394 2022-04-19 15:51:00 +0000 <alexxubyte> Over to you - Which deployment strategy have you used? Did you witness any deployment-related outages in production and why did they happen?
1516444258298839047 2022-04-19 15:51:00 +0000 <alexxubyte> 𝐀/𝐁 𝐓𝐞𝐬𝐭 In the A/B test, different versions of services run in production simultaneously. Each version runs an “experiment” for a subset of users. A/B test is a cheap method to test new features in production.  https://t.co/oSwxhseovt
1516444255329288193 2022-04-19 15:50:59 +0000 <alexxubyte> This process is more complicated because we need to monitor the canary while gradually migrating more and more users away from the old version.
1516444252951121921 2022-04-19 15:50:58 +0000 <alexxubyte> 𝐂𝐚𝐧𝐚𝐫𝐲 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭 A canary deployment upgrades services gradually, each time to a subset of users. It is cheaper than blue-green deployment and easy to perform rollback. However, since there is no staging environment, we have to test on production.  https://t.co/ukyGEYoxhi
1516444249549520896 2022-04-19 15:50:57 +0000 <alexxubyte> Once testing is done in the staging environment, user traffic is switched to the staging environment, and the staging becomes the production. This deployment strategy is simple to perform rollback, but having two identical production quality environments could be expensive.
1516444246995349514 2022-04-19 15:50:57 +0000 <alexxubyte> 𝐁𝐥𝐮𝐞-𝐆𝐫𝐞𝐞𝐧 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭 With blue-green deployment, we have two identical environments: one is staging (blue) and the other is production (green). The staging environment is one version ahead of production.  https://t.co/oH34hf1lhX
1516444242159161348 2022-04-19 15:50:56 +0000 <alexxubyte> 𝐌𝐮𝐥𝐭𝐢-𝐒𝐞𝐫𝐯𝐢𝐜𝐞 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭 We deploy new changes to multiple services simultaneously. This approach is easy to implement. But since all the services are upgraded at the same time, it is hard to manage and test dependencies. It’s also hard to rollback safely.  https://t.co/ogHfqOE7KN
1516444237440512007 2022-04-19 15:50:55 +0000 <alexxubyte> Deploying or upgrading services is risky. In this post, we explore risk mitigation strategies.  The diagram below illustrates the common ones.  https://t.co/8N1CGVF5OL
1516081270291243011 2022-04-18 15:48:36 +0000 <alexxubyte> I’ll be sharing my learning, thinking, or interview tips every week. If you think my posts will be useful, please like or share so they can reach a wider audience. Thanks for reading my story.
1516081269204930562 2022-04-18 15:48:36 +0000 <alexxubyte> Our books have 1000+ reviews on Amazon and are consistently ranked in the top 10 of Computer &amp; Technology books.   I started to post on LinkedIn regularly and it passed 100,000 followers last Friday.   I’ve met a lot of like-minded individuals and love what I do.
1516081266839351298 2022-04-18 15:48:36 +0000 <alexxubyte> I quit my job at Twitter 3 years ago and put a huge burden of the mortgage on my wife. Bay area houses are expensive...   Now I make a living by writing a series of system design interview books with my co-author @sahnlam  https://t.co/MbHCQjzb9h
1516054019633938432 2022-04-18 14:00:19 +0000 <alexxubyte> @xdg Thank you for your kind words, David.
1516053609842020358 2022-04-18 13:58:42 +0000 <alexxubyte> @antonve_be Thank you so much for reporting the issue. Do you mean this figure is missing? I'll take a look.  https://t.co/oKeJ4X99EC
1514993500709863425 2022-04-15 15:46:12 +0000 <alexxubyte> This is the flowchart of how slack decides to send a notification.   It is a great example of why a simple feature may take much longer to develop than many people think.  What’s your takeaway from this diagram?  Image source:  https://t.co/INrVLUZ2nX  https://t.co/fsdIE61ZxH
1514969317686714370 2022-04-15 14:10:06 +0000 <alexxubyte> @hellonehha Thank you for sharing. Hope it’s helpful.
1514813271362002956 2022-04-15 03:50:02 +0000 <alexxubyte> Ths is a very widespread issue and many authors had faced the same issue, myself included. Hope @AmazonKDP can take a look.
1514769647006253061 2022-04-15 00:56:41 +0000 <alexxubyte> Love the thread. Great advice for engineers and the principles probably apply to non-engineers as well.
1514662338133041189 2022-04-14 17:50:17 +0000 <alexxubyte> @hugaomarques Thank you for your kind words :)
1514633336051822593 2022-04-14 15:55:02 +0000 <alexxubyte> 🔹 Amazon's approach to high-availability deployment   Link to The Amazon Builders' Library:  https://t.co/OF1Lmbjt49
1514633335133274112 2022-04-14 15:55:02 +0000 <alexxubyte> 🔹 Beyond five 9s: Lessons from our highest available data planes 🔹 Caching challenges and strategies 🔹 Ensuring rollback safety during deployments 🔹 Going faster with continuous delivery 🔹 Challenges with distributed systems
1514633334030184448 2022-04-14 15:55:02 +0000 <alexxubyte> As of today, it published 26 articles. It took me two weekends to go through all the articles. I’ve had great fun and learned a lot. Here are some of my favorites:  🔹 Making retries safe with idempotent APIs 🔹 Timeouts, retries, and backoff with jitter
1514633332964831233 2022-04-14 15:55:01 +0000 <alexxubyte> How does Amazon build and operate software?   In 2019, Amazon released The Amazon Builders' Library. It contains architecture-based articles that describe how Amazon architects, releases, and operates technology.
1514256052547579904 2022-04-13 14:55:51 +0000 <alexxubyte> Question - How does HMAC authentication ensure data integrity? Why do we include “request timestamp” in HMAC signature generation?
1514256050202939395 2022-04-13 14:55:50 +0000 <alexxubyte> Steps 6 and 7 - the server compares hmac A (generated on the client side) and hmac B (generated on the server side). If they are matched, the requested resource will be returned to the client.  https://t.co/OVuS1cxQgG
1514256045475917828 2022-04-13 14:55:49 +0000 <alexxubyte> Step 5 - the server receives the request which contains the request data and the authentication header. It extracts the necessary attributes from the request and uses the API key that’s stored on the server side to generate a signature (hmac B.)  https://t.co/ycUnY7NpVn
1514256039872385024 2022-04-13 14:55:48 +0000 <alexxubyte> Step 3 - we now generate a HMAC signature on the client side (hmac A). This signature is generated with a set of attributes listed in the diagram.   Step 4 - the client sends requests to access server resources with hmac A in the HTTP header.  https://t.co/xbHSRq3gAt
1514256034390429700 2022-04-13 14:55:46 +0000 <alexxubyte> 𝐇𝐌𝐀𝐂 𝐛𝐚𝐬𝐞𝐝 This mechanism generates a Message Authentication Code (signature) by using a hash function (SHA256 or MD5).   Steps 1 and 2 - the server generates two keys, one is Public APP ID (public key) and the other one is API Key (private key).  https://t.co/F2JqucBV4w
1514256028866531329 2022-04-13 14:55:45 +0000 <alexxubyte> Step 2 - the Authentication Server authenticates the credentials and generates a token with an expiry time.   Steps 3 and 4 - now the client can send requests to access server resources with the token in the HTTP header. This access is valid until the token expires.  https://t.co/Ok4h9N1X0d
1514256023917596672 2022-04-13 14:55:44 +0000 <alexxubyte> 2. HMAC (Hash-based Message Authentication Code) authentication   The diagram below illustrates how they work.   𝐓𝐨𝐤𝐞𝐧 𝐛𝐚𝐬𝐞𝐝 Step 1 - the user enters their password into the client, and the client sends the password to the Authentication Server.  https://t.co/pbQlGiJ0ef
1514256018187816965 2022-04-13 14:55:42 +0000 <alexxubyte> How to design a 𝐬𝐞𝐜𝐮𝐫𝐞 web API access for your website?  When we open web API access to users, we need to make sure each API call is authenticated. This means the user must be who they claim to be.   In this post, we explore two common ways: 1. Token based authentication  https://t.co/tj9jGkejlD
1514253779033415682 2022-04-13 14:46:49 +0000 <alexxubyte> @mpradeeppb @Bube5h We are still working on it and hope it will be there in about two weeks.
1514253688512032777 2022-04-13 14:46:27 +0000 <alexxubyte> @mandeep_nanda We are still working on it and hope it will be there in about two weeks.
1513907299584147456 2022-04-12 15:50:01 +0000 <alexxubyte> Real-world use case: Netflix Conductor is a microservice orchestrator and you can read more details on the orchestrator design.  Question - Have you used orchestrator products in production? What are their pros &amp; cons?
1513907298657218560 2022-04-12 15:50:01 +0000 <alexxubyte> 2. Single point of failure - if the orchestrator goes down, no services can talk to each other. To mitigate this, the orchestrator must be highly available.
1513907297742860291 2022-04-12 15:50:01 +0000 <alexxubyte> Some limitations of orchestration: 1. Performance - all the services talk via a centralized orchestrator, so latency is higher than it is with choreography. Also, the throughput is bound to the capacity of the orchestrator.
1513907296782352386 2022-04-12 15:50:01 +0000 <alexxubyte> 2. Scalability - when adding a new service into orchestration, only the orchestrator needs to modify the interaction rules, while in choreography all the interacting services need to be modified.
1513907295758938112 2022-04-12 15:50:01 +0000 <alexxubyte> The benefits of orchestration: 1. Reliability - orchestration has built-in transaction management and error handling, while choreography is point-to-point communications and the fault tolerance scenarios are much more complicated.
1513907294840365057 2022-04-12 15:50:00 +0000 <alexxubyte> Orchestration is different. The orchestrator acts as a center of authority. It is responsible for invoking and combining the services. The orchestration pattern also includes the transaction management among different services.
1513907293938925569 2022-04-12 15:50:00 +0000 <alexxubyte> Choreography is like having a choreographer set all the rules. Then the dancers on stage (the microservices) interact according to them. Service choreography describes this exchange of messages and the rules by which the microservices interact.
1513907291237494788 2022-04-12 15:49:59 +0000 <alexxubyte> How do microservices collaborate and interact with each other?  There are two ways: 𝐨𝐫𝐜𝐡𝐞𝐬𝐭𝐫𝐚𝐭𝐢𝐨𝐧 and 𝐜𝐡𝐨𝐫𝐞𝐨𝐠𝐫𝐚𝐩𝐡𝐲.  The diagram below illustrates the collaboration of microservices.  https://t.co/Qp94Zi5Mrq
1513548096428421122 2022-04-11 16:02:41 +0000 <alexxubyte> /2 Link to the PDF:  https://t.co/mqS8LfFRvt
1513548095392419841 2022-04-11 16:02:40 +0000 <alexxubyte> /1 𝐁𝐢𝐠 𝐓𝐡𝐫𝐞𝐚𝐝𝐬 𝐀𝐫𝐜𝐡𝐢𝐯𝐞: 𝐏𝐚𝐫𝐭 2.   It contains: 🔹 What happens when you type a URL 🔹 How does the DNS lookup work 🔹 How does CDN work  This document is a work-in-progress. Subscribe to receive updates or new parts here:  https://t.co/pT4XpDMGrx
1512817609837666304 2022-04-09 15:39:59 +0000 <alexxubyte> If you are interested in those topics, you can subscribe here:  https://t.co/0RYwcKv26q
1512504708480442376 2022-04-08 18:56:38 +0000 <alexxubyte> @ErikBooij @bol_com Thank you. That’s not legit. The legit one is here:  https://t.co/U8JDHFNgfb
1512503103412576258 2022-04-08 18:50:15 +0000 <alexxubyte> @ErikBooij @bol_com The left one looks legit but the right one is not. What is the link on amazon? Thank you.
1512456808798982149 2022-04-08 15:46:17 +0000 <alexxubyte> Great thread for founders and probably creators.
1512453116762812423 2022-04-08 15:31:37 +0000 <alexxubyte> All the resources (including code, dependencies) that are needed to run the application or microservice are packaged together, so that the applications can run anywhere.
1512453114816720896 2022-04-08 15:31:37 +0000 <alexxubyte> 🔹Containerization is considered to be a lightweight version of virtualization, which virtualizes the operating system instead of hardware. Without the hypervisor, the containers enjoy faster resource provisioning.  https://t.co/NgJifcUOYg
1512453109645152260 2022-04-08 15:31:36 +0000 <alexxubyte> 🔹 In virtualization, the hypervisor creates an abstraction layer over hardware, so that multiple operating systems can run alongside each other. This technique is considered to be the first generation of cloud computing.  https://t.co/SBYLgKMM9W
1512453104729395201 2022-04-08 15:31:34 +0000 <alexxubyte> “Virtualization is a technology that allows you to create multiple simulated environments or dedicated resources from a single, physical hardware system” [1].
1512453102380908546 2022-04-08 15:31:34 +0000 <alexxubyte> What are the differences between Virtualization (VMware) and Containerization (Docker)?  The diagram below illustrates the layered architecture of virtualization and containerization.  https://t.co/3zgsUNnfXe
1512098197002354692 2022-04-07 16:01:18 +0000 <alexxubyte> It is interesting to see different cloud vendors have different names for the same type of products.  For example, the first step and the last step both use the serverless product. The product is called lambda in AWS, and “function” in Azure and Google Cloud.  Credit: @scgupta
1512098195437891589 2022-04-07 16:01:17 +0000 <alexxubyte> 3. Data processing, including filtering, transformation, normalization, etc. 4. Data warehouse, including key-value storage, relational database, OLAP database, etc. 5. Presentation layer with dashboards and real-time notifications.  https://t.co/2oJ8TI3Lsl
1512098191134519297 2022-04-07 16:01:16 +0000 <alexxubyte> Which cloud provider should be used when building a big data solution?  The diagram below illustrates the detailed comparison of AWS, Google Cloud, and Microsoft Azure.  The common parts of the solutions: 1. Data ingestion of structured or unstructured data. 2. Raw data storage.  https://t.co/a5xnvZKzvT
1511958564364947458 2022-04-07 06:46:27 +0000 <alexxubyte> @koteswar375 You are right. I meant false positives are possible.
1511729424487501825 2022-04-06 15:35:56 +0000 <alexxubyte> Hash function choices are important. They must be uniformly distributed and fast. For example, RedisBloom and Apache Spark use murmur, and InfluxDB uses xxhash.
1511729422369374209 2022-04-06 15:35:55 +0000 <alexxubyte> If all three bits are 1, then the URL may exist in the dataset; if any of the bits is 0, then the URL definitely does not exist in the dataset.  https://t.co/d87rqxgU2g
1511729418145726465 2022-04-06 15:35:54 +0000 <alexxubyte> False negatives are possible because a bit might be set by another element.   Step 2: When testing the existence of a URL string, the same hash functions A, B, and C are applied to the URL string.  https://t.co/EOdXNhe4NT
1511729410650501123 2022-04-06 15:35:52 +0000 <alexxubyte> 🔹 true: the element is probably in the set.   False-positive matches are possible, but false negatives are not.   The diagram below illustrates how the Bloom filter works. The basic data structure for the Bloom filter is Bit Vector. Each bit represents a hashed value.
1511729409606053893 2022-04-06 15:35:52 +0000 <alexxubyte> Option 3: 𝐁𝐥𝐨𝐨𝐦 𝐟𝐢𝐥𝐭𝐞𝐫. This option is preferred. Bloom filter was proposed by Burton Howard Bloom in 1970. It is a probabilistic data structure, that is used to test whether an element is a member of a set.  🔹 false: the element is definitely not in the set.
1511729408586895369 2022-04-06 15:35:52 +0000 <alexxubyte> Option 2: Store URLs in a database and check if a new URL is in the database. This can work but the load to the database will be very high.
1511729406791749634 2022-04-06 15:35:51 +0000 <alexxubyte> How to avoid crawling 𝐝𝐮𝐩𝐥𝐢𝐜𝐚𝐭𝐞 𝐔𝐑𝐋𝐬 at Google scale?  Option 1: Use a Set data structure to check if a URL already exists or not. Set is fast, but it is not space-efficient.  https://t.co/sWI1Mrbux8
1511374894453338115 2022-04-05 16:07:09 +0000 <alexxubyte> Sources:  [1] SSD or HDD: Which Is Right for You?:  https://t.co/jlENOkpsD8 [2] Coding for SSDs:  https://t.co/qSRjjVwRYZ [3] Overview of SSD Structure and Basic Working Principle:  https://t.co/UxOUrmbdWU
1511374893635448834 2022-04-05 16:07:09 +0000 <alexxubyte> Question - What are the main differences between SSD and HDD?
1511374892788183042 2022-04-05 16:07:09 +0000 <alexxubyte> Every time a HOST Page is written, the SSD controller finds a Physical Page to write the data and this mapping is recorded. With this mapping, the next time HOST reads a HOST Page, the SSD knows where to read the data from FLASH [3].
1511374891928285184 2022-04-05 16:07:08 +0000 <alexxubyte> SSD controller operates multiple FLASH particles in parallel, greatly improving the underlying bandwidth. When we need to write more than one page, the SSD controller can write them in parallel [3], whereas the HDD has a single head and it can only read from one head at a time.
1511374889965346819 2022-04-05 16:07:08 +0000 <alexxubyte> Step 4: “The packages of NAND flash memory are organized in gangs, over multiple channels” [2].   The second diagram illustrates how the logical and physical pages are mapped, and why this architecture is fast.  https://t.co/vP0czNJetX
1511374886572199941 2022-04-05 16:07:07 +0000 <alexxubyte> Step 2: “The processor in the SSD controller takes the commands and passes them to the flash controller” [2]. Step 3: “SSDs also have embedded RAM memory, generally for caching purposes and to store mapping information” [2].  https://t.co/EdUHmgOrOM
1511374882306592769 2022-04-05 16:07:06 +0000 <alexxubyte> The diagram below illustrates the SSD architecture.   Step 1: “Commands come from the user through the host interface” [2]. The interface can be Serial ATA (SATA) or PCI Express (PCIe).  https://t.co/VFrHv51eYO
1511374879571918848 2022-04-05 16:07:05 +0000 <alexxubyte> “An SSD is a flash-memory based data storage device. Bits are stored into cells, which are made of floating-gate transistors. SSDs are made entirely of electronic components, there are no moving or mechanical parts like in hard drives (HDD)” [2].
1511374877600595968 2022-04-05 16:07:05 +0000 <alexxubyte> Why is a solid-state drive (SSD) fast?  “A solid state drive reads up to 10 times faster and writes up to 20 times faster than a hard disk drive.” [1].  https://t.co/CJEcFpbukq
1511036068853821442 2022-04-04 17:40:47 +0000 <alexxubyte> @sahnlam Thank you for sharing the story. I count myself lucky to work with you.
1511017339017330697 2022-04-04 16:26:21 +0000 <alexxubyte> Some of you asked to get a PDF version of my Twitter threads. Here is the first part and it contains all payment-related topics. This document is a work-in-progress. Subscribe to receive updates or new parts here:  https://t.co/urop0Y1Rpz  https://t.co/7EOYIZl8LO
1511003176459128837 2022-04-04 15:30:05 +0000 <alexxubyte> @raedg2000 @sahnlam Sorry about the delay. We are working on an e-version and should be able to give some updates sometime next week.
1510675232352210946 2022-04-03 17:46:57 +0000 <alexxubyte> @GergelyOrosz Those topics look familiar :)
1510299919654948864 2022-04-02 16:55:35 +0000 <alexxubyte> @Praveen03404374 @sahnlam Sorry volume 2 is not available in India yet. We are working on a digital version. We don't have a concrete release date yet, but shouldn't be too long.
1509917642835972097 2022-04-01 15:36:33 +0000 <alexxubyte> The 𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧 𝐍𝐞𝐰𝐬𝐥𝐞𝐭𝐭𝐞𝐫/𝐁𝐥𝐨𝐠 is ready!   What’s included? 🔹A single place to see all my technical posts 🔹Weekly compilation of posts sent via email 🔹Occasional bonus discussions   If you like the ideas, sign up here.    https://t.co/0RYwcKv26q
1509732081017884676 2022-04-01 03:19:12 +0000 <alexxubyte> What kind of code structure could allow this disastrous bug to slip through? We could only guess. We never received a full explanation.   What are some of the most impactful software bugs you encountered in your career?   For more posts like this, consider following @sahnlam
1509732080162275330 2022-04-01 03:19:12 +0000 <alexxubyte> Shortly before 9PM that fateful evening, one of our poor SREs fulfilled our routine request and terminated an unused Memcache pool. I could only imagine the horror and the phone conversation that ensured.
1509732079315025920 2022-04-01 03:19:11 +0000 <alexxubyte> What had gone wrong? The software vendor had introduced a bug that week in their confirmation dialog flow. When terminating a subset of nodes in the UI, it would correctly show in the dialog box the list of nodes to be terminated, but under the hood, it terminated everything.
1509732078392254466 2022-04-01 03:19:11 +0000 <alexxubyte> We used a cloud management software vendor to manage our AWS deployment. This was before Infrastructure as Code was a thing. There was no Terraform. It was so early in cloud computing and we were so big that AWS required an advanced warning before we scaled up.
1509732077603680257 2022-04-01 03:19:11 +0000 <alexxubyte> It took 50 people 10 hours to bring everything back up. It was quite a feat. That in itself is a story for another day.
1509732076727066625 2022-04-01 03:19:11 +0000 <alexxubyte> At that very moment, I got a phone call from my boss. He said the entire game was down. Firefighting mode. Full on.   Everything had shut down. Every single instance on AWS was terminated. HA proxy instances, PHP web servers, MySQL databases, Memcache nodes, everything.
1509732075712118785 2022-04-01 03:19:10 +0000 <alexxubyte> It was 9PM on a Friday. I was on the team responsible for one of the largest social games at the time. It had about 30 million DAU. I just so happened to glance at the operational dashboard before shutting down for the night.   Every line on the dashboard was at zero.
1509732074814525441 2022-04-01 03:19:10 +0000 <alexxubyte> This is a true story about handling a large-scale outage written by @sahnlam .   About 10 years ago, I witnessed the most impactful UI bugs in my career.
1509570310785298432 2022-03-31 16:36:23 +0000 <alexxubyte> Question: Can you think of any use cases for AWS Lambda?  Sources:  [1] AWS Lambda whitepaper:  https://t.co/E2qDRVzo2y [2] Behind the scenes, Lambda:  https://t.co/lVH6U8futa Image source: [1] [2]
1509570308218318850 2022-03-31 16:36:22 +0000 <alexxubyte> Step 2:  There is "a set of pollers assigned to this internal queue which are responsible for polling it and moving the event onto a Frontend synchronously. After it’s been placed onto the Frontend it follows the synchronous invocation call pattern which we covered earlier" [2].  https://t.co/9wLRRxWsOz
1509570303201996805 2022-03-31 16:36:21 +0000 <alexxubyte> 𝐀𝐬𝐲𝐧𝐜𝐡𝐫𝐨𝐧𝐨𝐮𝐬 𝐞𝐱𝐞𝐜𝐮𝐭𝐢𝐨𝐧 Step 1: The Application Load Balancer forwards the invocation to an available Frontend which places the event onto an internal queue(SQS).  https://t.co/nc9wvjVIzd
1509570297870966788 2022-03-31 16:36:20 +0000 <alexxubyte> Step 2: "The Worker Manager can then call 𝘐𝘯𝘪𝘵 to initialize the function for execution by downloading the Lambda package from S3 and setting up the Lambda runtime" [2]   Step 3: The Frontend Worker is now able to call 𝘐𝘯𝘷𝘰𝘬𝘦 [2].  https://t.co/Tb5lpObHqI
1509570293336981504 2022-03-31 16:36:19 +0000 <alexxubyte> 𝐒𝐲𝐧𝐜𝐡𝐫𝐨𝐧𝐨𝐮𝐬 𝐞𝐱𝐞𝐜𝐮𝐭𝐢𝐨𝐧 Step1: "The Worker Manager communicates with a Placement Service which is responsible to place a workload on a location for the given host (it’s provisioning the sandbox) and returns that to the Worker Manager" [2].  https://t.co/u3PTijoRiO
1509570287330680858 2022-03-31 16:36:17 +0000 <alexxubyte> Lambda functions run within a sandbox, which provides a minimal Linux userland, some common libraries and utilities. It creates the Execution environment (worker) on EC2 instances.   How are lambdas initiated and invoked? There are two ways.  https://t.co/oTJswKgb39
1509570283757203456 2022-03-31 16:36:16 +0000 <alexxubyte> 𝐅𝐢𝐫𝐞𝐜𝐫𝐚𝐜𝐤𝐞𝐫 𝐌𝐢𝐜𝐫𝐨𝐕𝐌 Firecracker is the engine powering all of the Lambda functions [1]. It is a virtualization technology developed at Amazon and written in Rust.  The diagram below illustrates the isolation model for AWS Lambda Workers.
1509570281001549824 2022-03-31 16:36:16 +0000 <alexxubyte> 𝐒𝐞𝐫𝐯𝐞𝐫𝐥𝐞𝐬𝐬 is one of the hottest topics in cloud services. How does AWS 𝐋𝐚𝐦𝐛𝐝𝐚 work behind the scenes?  Lambda is a 𝐬𝐞𝐫𝐯𝐞𝐫𝐥𝐞𝐬𝐬 computing service provided by Amazon Web Services (AWS), which runs functions in response to events.  https://t.co/I4Tyorg0gO
1509312393515462656 2022-03-30 23:31:30 +0000 <alexxubyte> @xtbot This is not included but could be in the future :)
1509200449269743616 2022-03-30 16:06:41 +0000 <alexxubyte> But QUIC streams are delivered independently such that in most cases packet loss affecting one stream doesn't affect others.  Question: When shall we upgrade to HTTP 3.0? Any pros &amp; cons you can think of?
1509200447977844739 2022-03-30 16:06:41 +0000 <alexxubyte> QUIC is based on UDP. It introduces streams as first-class citizens at the transport layer. QUIC streams share the same QUIC connection, so no additional handshakes and slow starts are required to create new ones.
1509200445201268737 2022-03-30 16:06:40 +0000 <alexxubyte> 🔹HTTP 3.0 first draft was published in 2020. It is the proposed successor to HTTP 2.0. It uses QUIC instead of TCP for the underlying transport protocol, thus removing HOL blocking in the transport layer.  https://t.co/iC6v12UOez
1509200438796570626 2022-03-30 16:06:38 +0000 <alexxubyte> As you can see in the diagram, HTTP 2.0 introduced the concept of HTTP “streams”: an abstraction that allows multiplexing different HTTP exchanges onto the same TCP connection. Each stream doesn’t need to be sent in order.  https://t.co/nlXWy5Ci2I
1509200431003492357 2022-03-30 16:06:36 +0000 <alexxubyte> 🔹HTTP 2.0 was published in 2015. It addresses HOL issue through request multiplexing, which eliminates HOL blocking at the application layer, but HOL still exists at the transport (TCP) layer.  https://t.co/RWfhuWScz1
1509200425748074497 2022-03-30 16:06:35 +0000 <alexxubyte> HOL blocking - when the number of allowed parallel requests in the browser is used up, subsequent requests need to wait for the former ones to complete.
1509200423059537920 2022-03-30 16:06:35 +0000 <alexxubyte> 🔹HTTP 1.1 was published in 1997. A TCP connection can be left open for reuse (persistent connection), but it doesn’t solve the HOL (head-of-line) blocking issue.  https://t.co/sgq9dFybj2
1509200416403189765 2022-03-30 16:06:33 +0000 <alexxubyte> HTTP 1.0 -&gt; HTTP 1.1 -&gt; HTTP 2.0 -&gt; HTTP 3.0 (QUIC).   What problem does each generation of HTTP solve?  The diagram below illustrates the key features.  🔹HTTP 1.0 was finalized and fully documented in 1996. Every request to the same server requires a separate TCP connection.  https://t.co/uz1rs0aLaY
1509176804728213505 2022-03-30 14:32:44 +0000 <alexxubyte> @rahulrana_95 We are working on it now, but don’t have a concrete date yet.
1509070560394821632 2022-03-30 07:30:33 +0000 <alexxubyte> @rahulrana_95 Wow, that’s super long distance travel. Hope you find it helpful.
1508915332609585156 2022-03-29 21:13:44 +0000 <alexxubyte> @PaddleHQ Thank you for your quick response. Just DMed you.
1508867483263922180 2022-03-29 18:03:36 +0000 <alexxubyte> @sahnlam Thanks for sharing the photos. I just printed all the shipping labels and will ship them out this afternoon!
1508867407699320834 2022-03-29 18:03:18 +0000 <alexxubyte> @AllegroJazzz They are in black/white.
1508835847537238020 2022-03-29 15:57:53 +0000 <alexxubyte> Step 6 - Now we can modularize the functions into different services. The architecture becomes service-oriented / microservice.    Question: what else do we need to support an e-commerce website at Amazon’s scale?  https://t.co/i8rQmbUdTE
1508835843514937344 2022-03-29 15:57:52 +0000 <alexxubyte> 1. Vertical partition. Adding more power (CPU, RAM, etc.) to the database server. It has a hard limit. 2. Horizontal partition by adding more database servers. 3. Adding a caching layer to offload read requests.
1508835841090629640 2022-03-29 15:57:51 +0000 <alexxubyte> Step 5 - Suppose the business continues to grow. One single database cannot handle the load on both the inventory table and user table. We have a few options:  https://t.co/vcv186IYOb
1508835835814158337 2022-03-29 15:57:50 +0000 <alexxubyte> Step 4 - With the business continuing to grow, the database might become the bottleneck. To mitigate this, we separate reads and writes in a way that frequent read queries go to read replicas. With this setup, the throughput for the database writes can be greatly increased.  https://t.co/evG4DLwbOy
1508835831057842179 2022-03-29 15:57:49 +0000 <alexxubyte> Step 3 - Now the incoming requests have to be routed to multiple application servers, how can we ensure each application server gets an even load? The load balancer handles this nicely.  https://t.co/3pznXvj2pd
1508835825227689984 2022-03-29 15:57:48 +0000 <alexxubyte> Step 2 - The business continues to grow, and a single application server is no longer enough. So we deploy a cluster of application servers.  https://t.co/f0Gn5pDABc
1508835820261699591 2022-03-29 15:57:47 +0000 <alexxubyte> Step 1 - With the growth of the user base, one single application server cannot handle the traffic anymore. We put the application server and the database server into two separate servers.  https://t.co/1CPEegb6iU
1508835816461668353 2022-03-29 15:57:46 +0000 <alexxubyte> Suppose we have two services: inventory service (handles product descriptions and inventory management) and user service (handles user information, registration, login, etc.).
1508835814469296131 2022-03-29 15:57:45 +0000 <alexxubyte> How to scale a website to support millions of users? We will explain this step-by-step.   The diagram below illustrates the evolution of a simplified eCommerce website. It goes from a monolithic design on one single server, to a service-oriented/microservice architecture.  https://t.co/SQxseYsJ73
1508512882824151048 2022-03-28 18:34:32 +0000 <alexxubyte> Great thread. Thanks for sharing!
1508474562190577666 2022-03-28 16:02:16 +0000 <alexxubyte> 🔹The DevOps Handbook - introduces product development, quality assurance, IT operations, and information security.  What’s your favorite dev-ops book?
1508474561280372737 2022-03-28 16:02:16 +0000 <alexxubyte> 🔹The Phoenix Project - a classic novel about effectiveness and communications. IT work is like manufacturing plant work, and a system must be established to streamline the workflow. Very interesting read!
1508474560437387268 2022-03-28 16:02:15 +0000 <alexxubyte> 🔹Site Reliability Engineering - famous Google SRE book. It explains the whole life cycle of Google’s development, deployment, and monitoring, and how to manage the world’s biggest software systems.  🔹Effective DevOps - provides effective ways to improve team coordination.
1508474558105341954 2022-03-28 16:02:15 +0000 <alexxubyte> Some 𝐃𝐞𝐯𝐎𝐩𝐬 books I find enlightening:  🔹Accelerate - presents both the findings and the science behind measuring software delivery performance.  🔹Continuous Delivery - introduces automated architecture management and data migration.  https://t.co/tztfOQOiKR
1507380006762156037 2022-03-25 15:32:54 +0000 <alexxubyte> 🔹Occasional bonus discussions (exclusive to email subscribers).   🔹No spam. Just high-quality content.  🔹Completely free.  🔹The diagram below shows an example.   If you enjoyed those ideas, you can sign up here.   Link:  https://t.co/KTucCcJWBe
1507380005138968580 2022-03-25 15:32:53 +0000 <alexxubyte> The weekly 𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧 𝐍𝐞𝐰𝐬𝐥𝐞𝐭𝐭𝐞𝐫 is coming in a week or two.  What’s included?  🔹Weekly compilation of my treads (technical posts only).  🔹Well-categorized PDFs containing all my technical posts (many are not included in Twitter).  https://t.co/Ed2vrHqUMi
1507180261255000086 2022-03-25 02:19:10 +0000 <alexxubyte> @ludofleury Thank you for the invaluable feedback. I will go back to the drawing board and come up with an update for this.
1507180224395456520 2022-03-25 02:19:02 +0000 <alexxubyte> @abbasdgr8 Thank you for the invaluable feedback. I will go back to the drawing board and come up with an update for this.
1507180126307463176 2022-03-25 02:18:38 +0000 <alexxubyte> Thank you for the invaluable feedback. I will go back to the drawing board and come up with an update for this.
1507026461525372928 2022-03-24 16:08:02 +0000 <alexxubyte> Why do we need DDD? As the complexity of code grows, we need to clearly define the boundaries of each business domain and decouple them.   Source: csdn blog
1507026460623601666 2022-03-24 16:08:02 +0000 <alexxubyte> Why do we need IaaS? To horizontally scale the business, we need different kinds of servers. IaaS masks operating systems by virtualization.   🔹 DDD (Domain Driven Design): it focuses on modeling software to match a domain according to input from that domain's experts.
1507026459688267779 2022-03-24 16:08:01 +0000 <alexxubyte> 🔹 IaaS (Infrastructure as a Service): it allows companies to manage their servers, data storage on the cloud (e.g. AWS, Azure, Google cloud).
1507026458778083335 2022-03-24 16:08:01 +0000 <alexxubyte> Why do we need PaaS? With the business growth, we have constant needs to build subsystems. PaaS abstracts some common techniques so that a subsystem can be quickly built.
1507026457758822402 2022-03-24 16:08:01 +0000 <alexxubyte> 🔹 PaaS (Platform as a Service): it  provides a cloud-based platform for developing, running, managing applications (e.g. AWS Elastic Beanstalk, Google App Engine).
1507026456618041356 2022-03-24 16:08:01 +0000 <alexxubyte> Why do we need it? At the very beginning, a company may use monolithic architecture without splitting layers. When the business grows, a monolithic system could become inefficient and be broken down into different layers using MVC or other types of layered architectures.
1507026455749804037 2022-03-24 16:08:00 +0000 <alexxubyte> 🔹 SaaS (Software as a Service): it is on-demand access to ready-to-use, cloud-based application services, usually managed by a service provider (e.g. Dropbox, Salesforce).
1507026453572902912 2022-03-24 16:08:00 +0000 <alexxubyte> SaaS vs PaaS vs IaaS vs DDD  What are those? Why do we need them? Those are common cloud computing architectures. We will briefly go over the definitions, why we need them, and how architecture is evolved to DDD (Domain Driven Design).  https://t.co/7HiOCKg1Qq
1506839250905444356 2022-03-24 03:44:07 +0000 <alexxubyte> Great reflection from my co-author @sahnlam on the book-writing journey (System Design Interview - Volume 2).
1506692139891060742 2022-03-23 17:59:33 +0000 <alexxubyte> @igrali @sahnlam Looks like it is available again in UK:  https://t.co/A2x2W7IJAw
1506663808709799936 2022-03-23 16:06:59 +0000 <alexxubyte> If you enjoyed those posts, consider following me (@alexxubyte) on Twitter, where I post weekly updates about system design and book writing.
1506663807807995906 2022-03-23 16:06:58 +0000 <alexxubyte> Zero copy is a shortcut to save the multiple data copies between application context and kernel context. This approach brings down the time by ​​approximately 65%.
1506663805807341569 2022-03-23 16:06:58 +0000 <alexxubyte> 🔹Step 3: Consumer reads data with zero-copy 3.1: The data is loaded from disk to OS cache 3.2 OS cache directly copies the data to the network card via sendfile() command 3.3 The network card sends data out to the consumer  https://t.co/ltauKGt93u
1506663801520738306 2022-03-23 16:06:57 +0000 <alexxubyte> 2.2 The data is copied from OS cache to Kafka application 2.3 Kafka application copies the data into the socket buffer  2.4 The data is copied from socket buffer to network card 2.5 The network card sends data out to the consumer  https://t.co/BVeLcbhldl
1506663791961919488 2022-03-23 16:06:55 +0000 <alexxubyte> Why is Kafka fast?  Kafka achieves low latency message delivery through Sequential I/O and Zero Copy Principle. The same techniques are commonly used in many other messaging/streaming platforms.  https://t.co/reoCCpQoLR
1506298332582350848 2022-03-22 15:54:42 +0000 <alexxubyte> Source:  https://t.co/xg3sU5zl2p I combined a few diagrams together. The credit all goes to AltexSoft.
1506298328878780419 2022-03-22 15:54:41 +0000 <alexxubyte> SOAP vs REST vs GraphQL vs RPC.   The diagram below illustrates the API timeline and API styles comparison.   Over time, different API architectural styles are released. Each of them has its own patterns of standardizing data exchange.  https://t.co/kuoitbp1HJ
1506076139726417926 2022-03-22 01:11:47 +0000 <alexxubyte> Just received 50+ author copies of the System Design Interview book (Volume 2).   My co-author @sahnlam  and I will sign all the copies and mail them out to all the people who wrote, reviewed, edited, and commented on the chapters. Thank you!  https://t.co/rC0uo1EehO
1505953668255784962 2022-03-21 17:05:08 +0000 <alexxubyte> @VeVePromise286 @sahnlam Thank you. I think it’s available in Singapore now.  https://t.co/XuKG4qdH38
1505939454153748486 2022-03-21 16:08:39 +0000 <alexxubyte> My co-author @sahnlam wrote a great thread reflecting his writing experience about the system design interview (volume 2) book. He talked about his learnings in this journey and how to build writing momentum while having a busy full-time job.
1505319573419008000 2022-03-19 23:05:28 +0000 <alexxubyte> @mrdamog Thanks for sending the photo. Hope volume 2 is fun too :)
1504857454588227588 2022-03-18 16:29:10 +0000 <alexxubyte> @ddarie15 @sahnlam Thank you for sharing the photo. Hope it’ll be helpful :)
1504856334210007044 2022-03-18 16:24:43 +0000 <alexxubyte> How do modern browsers work?  Google published a series of articles about "Inside look at modern web browser". It's a great read.   https://t.co/xzIPew0d3c  https://t.co/67tkdoNtWr  https://t.co/pQ62t73jEz  https://t.co/o8EkysPqli  https://t.co/w3jClHCeAh
1504848532359946245 2022-03-18 15:53:43 +0000 <alexxubyte> @marcomornati Thank you for sharing the photo. Hope it’ll be helpful.
1504597184414580737 2022-03-17 23:14:57 +0000 <alexxubyte> @AmazonKDP @dharmeshmehta @ajassy This is the legit book page:  https://t.co/Y17zAm2cWA
1504596524243714051 2022-03-17 23:12:20 +0000 <alexxubyte> Someone is using my name, book's title, and book cover to sell a completely different book on Amazon! The fake book doesn’t even have an ISBN and has a completely different dimension. Please remove this listing ASAP:  https://t.co/LoRFIr499v @AmazonKDP @dharmeshmehta @ajassy
1504487247785078790 2022-03-17 15:58:06 +0000 <alexxubyte> The System Design Interview book series was born.   This path turned out to be good.   If you want to create or write something but feel too intimidated to do so, I hope my story can help a little bit.  Thanks for reading.   — Link to the book:  https://t.co/9DZu32kecK
1504487246899994631 2022-03-17 15:58:06 +0000 <alexxubyte> Was writing a book financially sustainable? I didn’t know anyone personally who had done this before.  The list could go on and on.  After numerous hours of researching, writing, and talking with engineers, all dots started to connect.
1504487245931167758 2022-03-17 15:58:06 +0000 <alexxubyte> I had many doubts about myself.   Was my English good enough? As a non-native English speaker, this was a huge hurdle.  Was I qualified to write a book about system design? There were so many smart engineers out there.
1504487244941303808 2022-03-17 15:58:05 +0000 <alexxubyte> I want to say THANK YOU to everyone who supported me during this journey.  Changing from a software engineer to a full-time author was strange.   When I quit my full-time job at Twitter a few years ago, I put a huge burden of the mortgage on my wife, with a baby on the way.
1504487243028652041 2022-03-17 15:58:05 +0000 <alexxubyte> On the first day of book launch, our book ranked  # 1 in the computer science category, and # 26 among all books on Amazon, an achievement that @sahnlam and I never imagined.  https://t.co/drhyzQfFFc
1504484374200283140 2022-03-17 15:46:41 +0000 <alexxubyte> @alexbdebrie @GergelyOrosz Thank you, Alex. I really like your DynamoDB guide. When we wrote the NoSQL solution for the gaming leaderboard chapter, your guide was extremely helpful. Thank you.  https://t.co/buGc7qVG5F
1504205602712547329 2022-03-16 21:18:57 +0000 <alexxubyte> @Bube5h We are working hard to get it to Amazon India and Flipkart. Should be soon.
1504205519338102788 2022-03-16 21:18:37 +0000 <alexxubyte> @siva2chinni We are working hard to get it to Amazon India and Flipkart. Should be soon.
1504203828027006976 2022-03-16 21:11:54 +0000 <alexxubyte> @sergeypomazov No e-book is available at this moment but we are looking into ways to make it more accessible.
1504203162739044355 2022-03-16 21:09:15 +0000 <alexxubyte> @thiagoghisi @GergelyOrosz Thank you, Thiago. Very glad to hear my book was helpful :)
1504120491371507712 2022-03-16 15:40:45 +0000 <alexxubyte> Chapter 6: Ad Event Aggregation Chapter 7: Hotel Reservation Chapter 8: Distributed Email Service Chapter 9: S3-like Object Storage Chapter 10: Leaderboard Chapter 11: Payment System Chapter 12: Digital Wallet Chapter 13: Stock Exchange  Link to the book:  https://t.co/9DZu32kecK
1504120488842317829 2022-03-16 15:40:44 +0000 <alexxubyte> Many people asked about the table of contents for the System Design Interview (Volume 2). Here you go:  Table Of Contents:  Chapter 1: Proximity Service Chapter 2: Nearby Friends Chapter 3: Google Maps Chapter 4: Distributed Message Queue Chapter 5: Metrics Monitoring  https://t.co/EWsQkRmDh3
1503951256326344705 2022-03-16 04:28:16 +0000 <alexxubyte> @rahulrana_95 @arpit_bhayani Thank you, Rahul. Hope it'll be helpful.
1503862061763379207 2022-03-15 22:33:50 +0000 <alexxubyte> @krishtherockstr @sahnlam Hi Krishna, here is the link:  https://t.co/XJggrI74ti
1503861951520456704 2022-03-15 22:33:24 +0000 <alexxubyte> @lal603743923 @sahnlam Thank you!
1503861801066561536 2022-03-15 22:32:48 +0000 <alexxubyte> @RayMusk22 @sahnlam The Kindle version is not available yet, and we will look into that.
1503860827237281794 2022-03-15 22:28:56 +0000 <alexxubyte> @kevinrambaud @sahnlam Thanks, Kevin.
1503860771075276803 2022-03-15 22:28:42 +0000 <alexxubyte> @jedi_vaibhav @sahnlam Is it  https://t.co/yh8c26a3Yd?  Looks like it's available:  https://t.co/gKTfYMPocx
1503859767147896835 2022-03-15 22:24:43 +0000 <alexxubyte> @ssarraju @sahnlam Thank you, Sravan!
1503859537371176964 2022-03-15 22:23:48 +0000 <alexxubyte> @_rudyKh @sahnlam Thank you for your kind words, Rudy!
1503859442542125058 2022-03-15 22:23:26 +0000 <alexxubyte> @TheRockstarDBA @sahnlam Thanks, Kin. The book is not published by O'Reilly.
1503859193979318280 2022-03-15 22:22:26 +0000 <alexxubyte> @gopalraj @sahnlam Thank you, Gopal!
1503858107432472576 2022-03-15 22:18:07 +0000 <alexxubyte> @cnikolaou_com @sahnlam Hi Constantine, at this moment, there is no e-format but we will try to publish an online version via an onlien course in a month or two.
1503857772366286848 2022-03-15 22:16:47 +0000 <alexxubyte> @curtiseinsmann @sahnlam Thank you, Curtis!
1503857690065326080 2022-03-15 22:16:28 +0000 <alexxubyte> @_moghul @sahnlam The online version (website) is likely to be ready in a month or two. Which country are you in?
1503857338356166656 2022-03-15 22:15:04 +0000 <alexxubyte> @Franc0Fernand0 @sahnlam Thank you for your kind words, Franco. And thank you for always sharing your knowledge on Twitter!
1503765824250658817 2022-03-15 16:11:25 +0000 <alexxubyte> @xdg Thank you, David!
1503765666226053121 2022-03-15 16:10:48 +0000 <alexxubyte> @lednhatkhanh @sahnlam Thank you. No ebook is available at this point. There are some concerns about book piracy. It might take us a month to gather some data and decide if we want to release a Kindle version.
1503765210431074305 2022-03-15 16:08:59 +0000 <alexxubyte> @rohithreddy01 @sahnlam Yes, we will get an Indian edition out in a few weeks. Hopefully 1-2 weeks.
1503765054260318210 2022-03-15 16:08:22 +0000 <alexxubyte> @ponrajuganesh @sahnlam Thank you. Not sure at this moment. There are some concerns about piracy. It might take us a month to gather some data and decide what's next.
1503764273234735109 2022-03-15 16:05:15 +0000 <alexxubyte> @matthewj_harper @sahnlam Thank you, Matt.
1503764222265548804 2022-03-15 16:05:03 +0000 <alexxubyte> @PreslavMihaylov @sahnlam Thank you @PreslavMihaylov . Yes, I will add new chapters to the online course in 1 month or 2 without additional cost.
1503763625084801028 2022-03-15 16:02:41 +0000 <alexxubyte> @Lethain @sahnlam Thank you!
1503756696874889218 2022-03-15 15:35:09 +0000 <alexxubyte> System Design Interview (Volume 2) is now available!   I’ve been working on this for 1.5 years with my co-author @sahnlam. We hope this book can help readers get better at system design interviews. Link:  https://t.co/Puqd8dgEDV   I'd really appreciate a reply, retweet, or like.  https://t.co/UCrTfRPFK1
1503401418056560640 2022-03-14 16:03:24 +0000 <alexxubyte> 🔹 Sorting the commented user list and deduping the users (zset)  🔹 Caching user behavior history and filtering malicious behaviors (zset, hash)  🔹 Storing boolean information of extremely large data into small space. For example, login status, membership status. (bitmap)  https://t.co/2O30Z4qIsF
1503401413107347456 2022-03-14 16:03:23 +0000 <alexxubyte> Popular interview question - what are the 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐜𝐞𝐬 between Redis and Memcached?  The diagram below illustrates the key differences.  The advantages on data structures make Redis a good choice for:  🔹 Recording the number of clicks and comments for each post (hash)  https://t.co/P9nsARtErU
1502321130123644928 2022-03-11 16:30:43 +0000 <alexxubyte> System Design Interview (Volume 2) book will be available next week. There will be no pre-order. If you are interested, please subscribe to our mailing list and I will send you an email when the book is live.    https://t.co/BocDNOMYgD
1502321128752107526 2022-03-11 16:30:43 +0000 <alexxubyte> Understanding the 𝐭𝐫𝐚𝐝𝐞𝐨𝐟𝐟𝐬 is very important not only in system design interviews but also in designing real-world systems. When we talk about primary/replica data replication, there is a classic tradeoff between 𝐥𝐚𝐭𝐞𝐧𝐜𝐲 and 𝐜𝐨𝐧𝐬𝐢𝐬𝐭𝐞𝐧𝐜𝐲. Diagram 👇.  https://t.co/Aa2uoWABN6
1501963763456430080 2022-03-10 16:50:41 +0000 <alexxubyte> 3. The Gmail server stores the email and makes it available to Bob, the recipient.   4. Gmail client fetches new emails through the IMAP/POP server when Bob logs in to Gmail.4/4  https://t.co/KmtjI5qzgC
1501963759014670337 2022-03-10 16:50:39 +0000 <alexxubyte> 2. Outlook mail server queries the DNS (not shown in the diagram) to find the address of the recipient’s SMTP server. In this case, it is Gmail’s SMTP server. Next, it transfers the email to the Gmail mail server. The communication protocol between the mail servers is SMTP.3/4  https://t.co/D0AsAe44jW
1501963755273408527 2022-03-10 16:50:39 +0000 <alexxubyte> 1. Alice logs in to her Outlook client, composes an email, and presses “send”. The email is sent to the Outlook mail server. The communication protocol between the Outlook client and mail server is SMTP.2/4  https://t.co/1xEv430tLd
1501963751397871625 2022-03-10 16:50:38 +0000 <alexxubyte> One picture is worth more than a thousand words. In this post, we will take a look at what happens when Alice sends an email to Bob.1/4  https://t.co/Y8HaeqGLkU
1501609075129282560 2022-03-09 17:21:16 +0000 <alexxubyte> My book “System Design Interview - Volume 2” will be available on Amazon next week. There will be no pre-order. If you are interested, please subscribe to our mailing list and I will send you an email when the book is live. Thank you.    https://t.co/BocDNOMYgD
1501609073195700224 2022-03-09 17:21:16 +0000 <alexxubyte> 🔹Using Bloom filter. If the key exists, the request first goes to the cache and then queries the database if needed. If the key doesn't exist in the data set, it means the key doesn’t exist in the cache/database. In this case, the query will not hit the cache or database layer.  https://t.co/13iXgTzBwM
1501609068879704067 2022-03-09 17:21:15 +0000 <alexxubyte> Two approaches are commonly used to solve this problem:  🔹Cache keys with null value. Set a short TTL (Time to Live) for keys with null value.  https://t.co/VZG323tHuo
1501609065218117632 2022-03-09 17:21:14 +0000 <alexxubyte> So every request hits the database eventually, defeating the purpose of using a cache. If a malicious user initiates lots of queries with such keys, the database can easily be overloaded.  The diagram below illustrates the process.
1501431039784198151 2022-03-09 05:33:49 +0000 <alexxubyte> @VicVijayakumar Hi Vic, thank you. Volume 1 focuses more on the basics. Volume 2 focuses more on identifying bottlenecks, discussing tradeoffs, and alternative solutions. Those two books cover a different set of topics and you don't need to read volume 1 first.
1501429774010388481 2022-03-09 05:28:47 +0000 <alexxubyte> @nessad_c Volume 2 covers a different set of topics, but feel free to return the first book.
1501429464579784706 2022-03-09 05:27:34 +0000 <alexxubyte> @adrianmoisey Good point. I'll look into that.
1501429146899005441 2022-03-09 05:26:18 +0000 <alexxubyte> @MohitGupta90_ Reading the first book can be helpful but not required. The second book focuses more on discussions about tradeoffs and different design options.
1501428190522134529 2022-03-09 05:22:30 +0000 <alexxubyte> @curtiseinsmann Thank you, Curtis!
1501428114101997572 2022-03-09 05:22:12 +0000 <alexxubyte> @thiagoghisi @AndreLars Thank you! I'm very glad to hear it was helpful.
1501427953032261633 2022-03-09 05:21:33 +0000 <alexxubyte> @Birrbal @Franc0Fernand0 I'll migrate existing users to the new platform so you can always access the content.
1501427288721612801 2022-03-09 05:18:55 +0000 <alexxubyte> @BarnwalAashish Yes, I will add new chapters to the online course for free. But it might take me about 1 month or 2 to do so.
1501426534485168128 2022-03-09 05:15:55 +0000 <alexxubyte> @CarlosTiradoG Yes, I will add new chapters to the online course for free. But it might take me about 1 month or 2 to do so.
1501243821211848712 2022-03-08 17:09:53 +0000 <alexxubyte> @Franc0Fernand0 Yes, I will add new chapters to the course for FREE. But it might take me about 1 month or 2 to do so. I’m moving away from the current online course platform and that’s why it takes longer than usual.
1501243706581479426 2022-03-08 17:09:26 +0000 <alexxubyte> @CodeDrogo Yes, I will add new chapters to the course for FREE. But it might take me about 1 month or 2 to do so. I’m moving away from the current online course platform and that’s why it takes longer than usual.
1501242689899040768 2022-03-08 17:05:23 +0000 <alexxubyte> It will be available on Amazon in about 9 days. There is no pre-order. If you are interested, please provide your email at this link ( https://t.co/BocDNOMYgD) and I will send you an email when the book is live. Thank you.
1501242689001443328 2022-03-08 17:05:23 +0000 <alexxubyte> My co-author @sahnlam  and I have spent countless nights and weekends on the book. Our goal is to make complex systems easy to understand.    Feels so good to hold it in my hand.
1501242688087101443 2022-03-08 17:05:23 +0000 <alexxubyte> Some stats about the book: 🔹 13 NEW real system design interviews with detailed solutions. 🔹 300+ diagrams to explain how different systems work. 🔹 400+ pages. 🔹 took 1.5 years to make.
1501242684375126020 2022-03-08 17:05:22 +0000 <alexxubyte> *BIG* announcement:  My new book System Design Interview - An Insider’s Guide (Volume 2) will be available on Amazon soon! It is a continuation of the system design interview book series.  https://t.co/jamVovHCJO
1500881254924754944 2022-03-07 17:09:10 +0000 <alexxubyte> My book “System Design Interview - Volume 2” will be available on Amazon in about 10 days. There will be no pre-order. If you are interested, please subscribe to our mailing list and I will send you an email when the book is live. Thank you.    https://t.co/BocDNOMYgD
1500881253809090560 2022-03-07 17:09:10 +0000 <alexxubyte> 🔹‘pidstat’ - monitors the utilization of system resources by all or specified processes, including CPU, memory, device IO, task switching, threads, etc.
1500881252756246531 2022-03-07 17:09:10 +0000 <alexxubyte> 🔹‘iostat’ - reports CPU and input/output statistics of the system.   🔹‘netstat’ - displays statistical data related to IP, TCP, UDP, and ICMP protocols.   🔹‘lsof’ - lists open files of the current system.
1500881250201976832 2022-03-07 17:09:09 +0000 <alexxubyte> Popular interview question: how to diagnose a mysterious process that’s taking too much CPU, memory, IO, etc?   The diagram below illustrates helpful tools in a Linux system.    🔹‘vmstat’ - reports information about processes, memory, paging, block IO, traps, and CPU activity.  https://t.co/inzaZU12lI
1500709854586957829 2022-03-07 05:48:05 +0000 <alexxubyte> @rajat_codes Thank you, @rajat_codes Glad to hear you find my book refreshing 😃
1500274320089575424 2022-03-06 00:57:26 +0000 <alexxubyte> @Franc0Fernand0 @curtiseinsmann Thank you, Franco. Love you posts as well!
1499778309357391873 2022-03-04 16:06:28 +0000 <alexxubyte> Step 10 - 14: The executions are returned to the client.  Note that the trading flow (steps 1 to 14) is on the critical path, while the market data flow and reporting flow are not. They have different latency requirements.  https://t.co/9OKf5JmKBi
1499778304181608449 2022-03-04 16:06:26 +0000 <alexxubyte> Step 7 - 9: The order is sent to the matching engine. When a match is found, the matching engine emits two executions, with one each for the buy and sell sides. To guarantee that matching results are deterministic when replayed, both orders and executions are sequenced.  https://t.co/vNT6N9npW4
1499778299177750532 2022-03-04 16:06:25 +0000 <alexxubyte> Step 4 - 5: The order manager performs risk checks based on rules set by the risk manager.  Step 6: After passing risk checks, the order manager verifies there are sufficient funds in the wallet for the order.  https://t.co/av5Grw1f4q
1499778294807285762 2022-03-04 16:06:24 +0000 <alexxubyte> Step 3: The order enters the exchange through the client gateway. The client gateway performs basic gatekeeping functions such as input validation, rate limiting, authentication, normalization, etc. The client gateway then forwards the order to the order manager.  https://t.co/MdIXoOOTqG
1499778289950285824 2022-03-04 16:06:23 +0000 <alexxubyte> First, we follow the order through the trading flow. This is the critical path with strict latency requirements. Everything has to happen fast in the flow:  Step 1: A client places an order via the broker’s web or mobile app.  Step 2: The broker sends the order to the exchange.  https://t.co/0fks4Z8dAV
1499778285328220170 2022-03-04 16:06:22 +0000 <alexxubyte> Design stock exchange. Let’s trace the life of an order through various components in the diagram to see how the pieces fit together.  https://t.co/RwT0My4QAt
1499428317165854740 2022-03-03 16:55:43 +0000 <alexxubyte> I left out a lot of details as that will make the post very long. Feel free to leave a comment so we can learn from each other.   Question: What are the pros and cons of each caching strategy? How to choose the right one to use?
1499428315429412864 2022-03-03 16:55:43 +0000 <alexxubyte> What are the top 𝐜𝐚𝐜𝐡𝐞 strategies?  Read data from the system: 🔹 Cache aside 🔹 Read through  Write data to the system: 🔹 Write around 🔹 Write back 🔹 Write through  The diagram below illustrates how those 5 strategies work. Some can be used together.  https://t.co/IfKIVwSBdC
1499066617916915713 2022-03-02 16:58:27 +0000 <alexxubyte> @scottrlarson This problem seems to be resolved on  https://t.co/FNsQxJAa5f, but the issue still remains in other countries. I didn't have time to look into that yet.
1499066155713007618 2022-03-02 16:56:37 +0000 <alexxubyte> @Rupeshkrj2 Yes, in 2-3 weeks.
1499065615473995776 2022-03-02 16:54:28 +0000 <alexxubyte> Question: what other techniques can be used to optimize large file upload? 8/8
1499065613628542976 2022-03-02 16:54:28 +0000 <alexxubyte> 6. The data store reassembles the object from its parts based on the part number. Since the object is really large, this process may take a few minutes. After reassembly is complete, it returns a success message to the client. 7/8  https://t.co/FXE182W9e4
1499065609270693888 2022-03-02 16:54:27 +0000 <alexxubyte> 4. When a part is uploaded, it returns an ETag, which is essentially the md5 checksum. It is used to verify multipart uploads.   5. After all parts are uploaded, the client sends a complete multipart upload request, which includes the uploadID, part numbers, and ETags. 6/8  https://t.co/aM7J4CzHqZ
1499065605051224067 2022-03-02 16:54:26 +0000 <alexxubyte> 3. The client splits the large file into small objects and starts uploading. Let’s assume the size of the file is 1.6GB and the client splits it into 8 parts, so each part is 200 MB in size. The client uploads the first part to the data store together with the uploadID. 5/8  https://t.co/Pys8KcWKxb
1499065600311652355 2022-03-02 16:54:25 +0000 <alexxubyte> The diagram below illustrates how multipart upload works:   1. The client calls the object storage to initiate a multipart upload.    2. The data store returns an uploadID, which uniquely identifies the upload. 4/8  https://t.co/fdts4L0hFq
1499065596620644354 2022-03-02 16:54:24 +0000 <alexxubyte> A better solution is to slice a large object into smaller parts and upload them independently. After all the parts are uploaded, the object store re-assembles the object from the parts. This process is called 𝐦𝐮𝐥𝐭𝐢𝐩𝐚𝐫𝐭 𝐮𝐩𝐥𝐨𝐚𝐝.  3/8
1499065595362365440 2022-03-02 16:54:23 +0000 <alexxubyte> Some files might be larger than a few GBs. It is possible to upload such a large object file directly, but it could take a long time. If the network connection fails in the middle of the upload, we have to start over. 2/8
1499065593084874752 2022-03-02 16:54:23 +0000 <alexxubyte> How can we optimize performance when we 𝐮𝐩𝐥𝐨𝐚𝐝 𝐥𝐚𝐫𝐠𝐞 𝐟𝐢𝐥𝐞𝐬 to object storage service such as S3?  Before we answer this question, let's take a look at why we need to optimize this process. 1/8  https://t.co/GTKqGHe7YF
1498703824474685440 2022-03-01 16:56:50 +0000 <alexxubyte> 3. Redis leverages several efficient lower-level data structures.  Question: Another popular in-memory store is Memcached. Do you know the differences between Redis and Memcached?
1497253039291256834 2022-02-25 16:51:56 +0000 <alexxubyte> Step 14: Regional Processor B creates a report based on Bank B’s response, and sends it to Slice Processor B.  Step 15: Slice Processor B stores the report.  Step 16 - 17: Slice Processor B sends a copy of the report to Slice Processor A. Slice Processor A stores the report. 9/9  https://t.co/qh53bvrg2y
1497253034568531971 2022-02-25 16:51:55 +0000 <alexxubyte> Step 13: Bank B sends UAK/UNK to Regional Processor B. UAK (user positive acknowledgment) means Bank B received the message without error; UNK (user negative acknowledgment) means Bank B received checksum failure. 8/9  https://t.co/B8wjyETCN6
1497253029837295620 2022-02-25 16:51:54 +0000 <alexxubyte> Step 9: Slice Processor B validates MON.  Step 10: Slice Processor B authorizes Regional Processor B to send the message to Bank B.  Step 11: Regional Processor B sends the message to Bank B.  Step 12: Bank B receives the message and stores it. 7/9  https://t.co/Y4UqvuQZJO
1497253025546526721 2022-02-25 16:51:53 +0000 <alexxubyte> Step 6: Slice Processor A sends the message to Regional Processor B in London.  Step 7: Regional Processor B stores the message temporarily.  Step 8: Regional Processor B assigns a unique ID MON (Message Output Number) to the message and sends it to Slice Processor B 6/9  https://t.co/XKQOpJ8EkJ
1497253021251616768 2022-02-25 16:51:52 +0000 <alexxubyte> Step 3: Slice Processor A stores the message.  Step 4: Slice Processor A informs Regional Processor A the message is stored.  Step 5: Regional Processor A sends ACK/NAK to Bank A. ACK means a message will be sent to Bank B. NAK means the message will NOT be sent to Bank B. 5/9  https://t.co/ZvcM1tZDCx
1497253017061523456 2022-02-25 16:51:51 +0000 <alexxubyte> Step 2: Regional processor validates the format and sends it to Slice Processor A. The Regional Processor is responsible for input message validation and output message queuing. The Slice Processor is responsible for storing and routing messages safely. 4/9  https://t.co/AbuK5L5woi
1497253012665896962 2022-02-25 16:51:50 +0000 <alexxubyte> Step 1: Bank A sends a message with transfer details to Regional Processor A in New York. The destination is Bank B. 3/9  https://t.co/tACjlzGeeB
1497253008391880704 2022-02-25 16:51:49 +0000 <alexxubyte> The Belgium-based system is run by its member banks and handles millions of payment messages per day. The diagram below illustrates how payment messages are transmitted from Bank A (in New York) to Bank B (in London). 2/9  https://t.co/0aANcTTStM
1497253004017209347 2022-02-25 16:51:48 +0000 <alexxubyte> You probably heard about 𝐒𝐖𝐈𝐅𝐓. What is SWIFT? What role does it play in cross-border payments? Let's take a look.  The Society for Worldwide Interbank Financial Telecommunication (SWIFT) is the main secure 𝐦𝐞𝐬𝐬𝐚𝐠𝐢𝐧𝐠 𝐬𝐲𝐬𝐭𝐞𝐦 that links the world’s banks. 1/9  https://t.co/IZI3h3iexN
1496889540933394433 2022-02-24 16:47:32 +0000 <alexxubyte> Question: what is the difference between message queues vs event streaming platforms such as Kafka, Apache Pulsar, etc?
1496889538903363584 2022-02-24 16:47:31 +0000 <alexxubyte> Use cases: Financial-related use cases (payment, trading, accounting, etc.). Exactly once is especially important when duplication is not acceptable and the downstream service or third party doesn’t support idempotency.
1496889536080613377 2022-02-24 16:47:30 +0000 <alexxubyte> 𝐄𝐱𝐚𝐜𝐭𝐥𝐲 𝐨𝐧𝐜𝐞 Exactly once is the most difficult delivery semantic to implement. It is friendly to users, but it has a high cost for the system’s performance and complexity.  https://t.co/j9Uk9YaDqk
1496889530569269274 2022-02-24 16:47:29 +0000 <alexxubyte> While not ideal from a user perspective, at-least once delivery semantics are usually good enough for use cases where data duplication is not a big issue or deduplication is possible on the consumer side. For example, with a unique key in each message, a message can be rejected.
1496889528895688704 2022-02-24 16:47:29 +0000 <alexxubyte> Use cases: With at-least once, messages won’t be lost but the same message might be delivered multiple times.
1496889526047809561 2022-02-24 16:47:28 +0000 <alexxubyte> Use cases: It is suitable for use cases like monitoring metrics, where a small amount of data loss is acceptable.  𝐀𝐭-𝐥𝐞𝐚𝐬𝐭 𝐨𝐧𝐜𝐞 With this data delivery semantic, it’s acceptable to deliver a message more than once, but no message should be lost.  https://t.co/Kggw7ss1mC
1496889519479480320 2022-02-24 16:47:26 +0000 <alexxubyte> 𝐀𝐭-𝐦𝐨𝐬𝐭 𝐨𝐧𝐜𝐞 As the name suggests, at-most once means a message will be delivered not more than once. Messages may be lost but are not redelivered. This is how at-most once delivery works at the high level.  https://t.co/FQPngTHgKi
1496889513355870209 2022-02-24 16:47:25 +0000 <alexxubyte> In modern architecture, systems are broken up into small and independent building blocks with well-defined interfaces between them. Message queues provide communication and coordination for those building blocks. Today, let’s discuss at-most once, at-least once, and exactly once.  https://t.co/v4uWj3PCzn
1496884231254904832 2022-02-24 16:26:26 +0000 <alexxubyte> @Arsenal_Homer Omnigraffle
1496883910071914497 2022-02-24 16:25:09 +0000 <alexxubyte> @xtbot Yes, I'm writing another book. Blogging is a good idea. I'll start that soon.
1496881211666407427 2022-02-24 16:14:26 +0000 <alexxubyte> @koyinshowercap It depends on the situation. The ideal solution would be to choose a sharding key that gives us even distribution. If that’s not possible, we may need to further partition the hot shards. For example, if we know a key is hot, we can split the key into multiple keys.
1496877138762350594 2022-02-24 15:58:15 +0000 <alexxubyte> @danylaws The issue is resolved on  https://t.co/FNsQxJAa5f
1496539496430682114 2022-02-23 17:36:34 +0000 <alexxubyte> This topic is very big and I’m sure I missed a lot of important details. What else do you think is important for data partitioning?
1496539495147188231 2022-02-23 17:36:34 +0000 <alexxubyte> 𝐃𝐫𝐚𝐰𝐛𝐚𝐜𝐤𝐬 🔹 The order by operation is more complicated. Usually, we need to fetch data from different shards and sort the data in the application's code.  🔹 Uneven distribution. Some shards may contain more data than others (this is also called the hotspot).
1496539493846994952 2022-02-23 17:36:34 +0000 <alexxubyte> 𝐁𝐞𝐧𝐞𝐟𝐢𝐭𝐬 🔹 Facilitate horizontal scaling. Sharding facilitates the possibility of adding more machines to spread out the load.  🔹 Shorten response time. By sharding one table into multiple tables, queries go over fewer rows, and results are returned much more quickly.
1496539492559331331 2022-02-23 17:36:34 +0000 <alexxubyte> 🔹 Hash-based sharding. This algorithm applies a hash function to one column or several columns to decide which row goes to which table. For example, the diagram below uses 𝐔𝐬𝐞𝐫 𝐈𝐃 𝐦𝐨𝐝 2 as a hash function. User IDs 1 and 3 are in shard 1, User IDs 2 and 4 are in shard 2
1496539491242328064 2022-02-23 17:36:33 +0000 <alexxubyte> 🔹 Range-based sharding. This algorithm uses ordered columns, such as integers, longs, timestamps, to separate the rows. For example, the diagram below uses the User ID column for range partition: User IDs 1 and 2 are in shard 1, User IDs 3 and 4 are in shard 2.
1496539489874886656 2022-02-23 17:36:33 +0000 <alexxubyte> 𝐑𝐨𝐮𝐭𝐢𝐧𝐠 𝐚𝐥𝐠𝐨𝐫𝐢𝐭𝐡𝐦 The routing algorithm decides which partition (shard) stores the data.
1496539486909796352 2022-02-23 17:36:32 +0000 <alexxubyte> Horizontal partitioning (often called sharding): divides a table into multiple smaller tables. Each table is a separate data store, and it contains the same number of columns, but fewer rows.  Horizontal partitioning is widely used so let’s take a closer look  https://t.co/RTr4CxAaew
1496539479796031488 2022-02-23 17:36:30 +0000 <alexxubyte> 🔹 Vertical partitioning: it means some columns are moved to new tables. Each table contains the same number of rows but fewer columns (see diagram below).  https://t.co/0fE6hIUdem
1496539472351182854 2022-02-23 17:36:29 +0000 <alexxubyte> In many large-scale applications, data is divided into partitions that can be accessed separately. There are two typical strategies for partitioning data.  https://t.co/SitM6L1cHG
1496166295733260291 2022-02-22 16:53:36 +0000 <alexxubyte> 𝐀 𝐪𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐟𝐨𝐫 𝐲𝐨𝐮: How do you prevent videos cached on CDN from being pirated?
1496166292734513154 2022-02-22 16:53:36 +0000 <alexxubyte> 11. If the edge CDN server cache doesn't contain the content, it goes upward to the regional CDN server. If the content is still not found, it will go upward to the central CDN server, or even go to the origin - the London web server.  https://t.co/ppDnmAoVxG
1496166285146738700 2022-02-22 16:53:34 +0000 <alexxubyte> 10. The browser visits the CDN edge server to load the content. There are two types of contents cached on the CDN servers: static contents and dynamic contents. The former contains static pages, pictures, videos; the latter one includes results of edge computing.  https://t.co/uebIWJODQ4
1496166277651521538 2022-02-22 16:53:32 +0000 <alexxubyte> 8. The CDN load balancer returns the CDN edge server’s IP address for  https://t.co/7NbPViFbXd.  9. Now we finally get the actual IP address to visit. The DNS resolver returns the IP address to the browser.  https://t.co/o7YyAEIGhV
1496166270651473921 2022-02-22 16:53:31 +0000 <alexxubyte> 7. The DNS resolver asks the CDN load balancer to resolve  https://t.co/7NbPViFJML. The load balancer chooses an optimal CDN edge server based on the user’s IP address, user’s ISP, the content requested, and the server load.  https://t.co/BRB1436b9i
1496166263332167684 2022-02-22 16:53:29 +0000 <alexxubyte> 5. The DNS resolver asks the authoritative name server to resolve  https://t.co/DDqnTPtFv5.  6. The authoritative name server returns the domain name for the load balancer of CDN  https://t.co/7NbPViFbXd.  https://t.co/bWDHkh9KSt
1496166256688644096 2022-02-22 16:53:27 +0000 <alexxubyte> 4. If we don’t use CDN, the authoritative name server returns the IP address for  https://t.co/tQrTSOG0xV. But with CDN, the authoritative name server has an alias pointing to  https://t.co/DDqnTPudkD (the domain name of the CDN server).  https://t.co/qS6TepcifV
1496166242067312641 2022-02-22 16:53:24 +0000 <alexxubyte> 2. If the domain name does not exist in the local DNS cache, the browser goes to the DNS resolver to resolve the name. The DNS resolver usually sits in the Internet Service Provider (ISP).  https://t.co/51gxRiBdMQ
1496166235289309185 2022-02-22 16:53:22 +0000 <alexxubyte> The diagram below illustrates the process:   1. Bob types in  https://t.co/tQrTSOG0xV in the browser. The browser looks up the domain name in the local DNS cache.  https://t.co/R5YpbdNiOr
1496166230239358977 2022-02-22 16:53:21 +0000 <alexxubyte> Suppose Bob who lives in New York wants to visit an eCommerce website that is deployed in London. If the request goes to servers in London, the response will be quite slow. So we deploy CDN servers close to where Bob lives, and the content will be loaded from the nearby CDN.
1496166227731181571 2022-02-22 16:53:20 +0000 <alexxubyte> A content delivery network (CDN) refers to geographically distributed servers (also called edge servers) that provide fast delivery of static and dynamic content. Let’s take a look at how it works.  https://t.co/RLUquLhted
1495631580215521285 2022-02-21 05:28:50 +0000 <alexxubyte> @fromap16 Authentication can be moved to the load balancer but other fine-grained permission controls might still need to be done after the load balancer.
1495628863245799429 2022-02-21 05:18:03 +0000 <alexxubyte> @atul_nus @b0rk Omnigraffle
1495628799987302400 2022-02-21 05:17:48 +0000 <alexxubyte> @TheAshwaniK Everything (except the client) in the diagram is part of S3. Files are stored in Data Store.
1495471556616617986 2022-02-20 18:52:58 +0000 <alexxubyte> @SandorDargo Thank you for writing the review!
1495115162809896961 2022-02-19 19:16:47 +0000 <alexxubyte> @PreslavMihaylov Fundamentally, they are the same. Take a look at reed-Solomon codes if you are interested.
1494713288113852418 2022-02-18 16:39:52 +0000 <alexxubyte> What other techniques do you think are important to improve the scalability and durability of an object store such as S3? 7/7
1494713285962133507 2022-02-18 16:39:52 +0000 <alexxubyte> Does erasure coding increase data durability? Let’s assume a node has a 0.81% annual failure rate. According to the calculation done by Backblaze, erasure coding can achieve 11 nines durability vs 3-copy replication can achieve 6 nines durability. 6/7  https://t.co/fbes59yav2
1494713280765431808 2022-02-18 16:39:51 +0000 <alexxubyte> How much extra space does erasure coding need? For every two chunks of data, we need one parity block, so the storage overhead is 50% (Figure 2). While in 3-copy replication, the storage overhead is 200% (Figure 2). 5/7  https://t.co/zpygEpAapd
1494713275786809348 2022-02-18 16:39:50 +0000 <alexxubyte> 3️⃣ Data d3 and d4 are lost due to node crashes.    4️⃣ The mathematical formula is used to reconstruct lost data d3 and d4, using the known values of d1, d2, p1, and p2. 4/7  https://t.co/jm1NFhm4b3
1494713270158053385 2022-02-18 16:39:48 +0000 <alexxubyte> 1️⃣ Data is broken up into four even-sized data chunks d1, d2, d3, and d4.   2️⃣ The mathematical formula is used to calculate the parities p1 and p2. To give a much simplified example, p1 = d1 + 2*d2 - d3 + 4*d4 and p2 = -d1 + 5*d2 + d3 - 3*d4. 3/7  https://t.co/whiW7Tc6pj
1494713266345447425 2022-02-18 16:39:47 +0000 <alexxubyte> Erasure coding deals with data durability differently from replication. It chunks data into smaller pieces and creates parities for redundancy. In the event of failures, we can use chunk data and parities to reconstruct the data. 4 + 2 erasure coding is shown in Figure 1. 2/7
1494713264172777476 2022-02-18 16:39:47 +0000 <alexxubyte> A really cool technique that’s commonly used in object storage such as S3 to improve durability is called 𝐄𝐫𝐚𝐬𝐮𝐫𝐞 𝐂𝐨𝐝𝐢𝐧𝐠. Let’s take a look at how it works. 1/7  https://t.co/mu1o4FcKLI
1494356560050417665 2022-02-17 17:02:22 +0000 <alexxubyte> We’ve been exploring different ways to make better summaries of each chapter (SDI-Part 2) and settled with this format.   The idea is to give readers a quick summary of what’s discussed and create a “graph” of a system in memory that they can easily refer to.  What do you think?  https://t.co/37MrAwvuk1
1494000111730388992 2022-02-16 17:25:58 +0000 <alexxubyte> @b0rk Your illustration is so cool! I draw something similar a few days ago but with a different format.  https://t.co/1x7zyLu5C0
1493998940353556482 2022-02-16 17:21:19 +0000 <alexxubyte> 7. The API service calls the metadata store to create a new entry in the metadata database. It contains important metadata such as the object_id (UUID), bucket_id (which bucket the object belongs to), object_name, etc. 12/12  https://t.co/5EzYihmIHT
1493998934959681538 2022-02-16 17:21:17 +0000 <alexxubyte> 6. Once validation succeeds, the API service sends the object data in the HTTP PUT payload to the data store. The data store persists the payload as an object and returns the UUID of the object. 10/11  https://t.co/dcxzPt5PQ9
1493998929322463234 2022-02-16 17:21:16 +0000 <alexxubyte> 4. After the bucket is created, the client sends an HTTP PUT request to create an object named “script.txt”.   5. The API service verifies the user’s identity and ensures the user has WRITE permission on the bucket. 9/11  https://t.co/YJpr5IqUQJ
1493998923777667074 2022-02-16 17:21:15 +0000 <alexxubyte> 3. The API service calls the metadata store to create an entry with the bucket info in the metadata database. Once the entry is created, a success message is returned to the client. 8/11  https://t.co/kY8pZlCjZm
1493998918794842112 2022-02-16 17:21:14 +0000 <alexxubyte> 1. The client sends an HTTP PUT request to create a bucket named “bucket-to-share.” The request is forwarded to the API service.  2. The API service calls the Identity and Access Management (IAM) to ensure the user is authorized and has WRITE permission. 7/11  https://t.co/ZPuxaIhUg2
1493998913904275461 2022-02-16 17:21:12 +0000 <alexxubyte> The diagram below (Figure 2) illustrates how file uploading works. In this example, we first create a bucket named “bucket-to-share” and then upload a file named “script.txt” to the bucket. 6/11  https://t.co/feXpAVc3K6
1493998908774645760 2022-02-16 17:21:11 +0000 <alexxubyte> In S3, an object resides in a bucket. The path looks like this: /bucket-to-share/script.txt. The bucket only has metadata. The object has metadata and the actual data. 5/11  https://t.co/mud4q0lqMr
1493998903783424000 2022-02-16 17:21:10 +0000 <alexxubyte> An S3 object consists of (Figure 1): 🔹 Metadata. It is mutable and contains attributes such as ID, bucket name, object name, etc. 🔹 Object data. It is immutable and contains the actual data. 4/11  https://t.co/nf8ldNUqgl
1493998898867671045 2022-02-16 17:21:09 +0000 <alexxubyte> 𝐎𝐛𝐣𝐞𝐜𝐭. An object is an individual piece of data we store in a bucket. It contains object data (also called payload) and metadata. Object data can be any sequence of bytes we want to store. The metadata is a set of name-value pairs that describe the object. 3/11  https://t.co/Uk6XVvMH3t
1493998893306040323 2022-02-16 17:21:07 +0000 <alexxubyte> 𝐁𝐮𝐜𝐤𝐞𝐭. A logical container for objects. The bucket name is globally unique. To upload data to S3, we must first create a bucket. 2/11  https://t.co/Fwg1Ok26wZ
1493998887715020804 2022-02-16 17:21:06 +0000 <alexxubyte> Today, let’s design an S3 like object storage system.  Before we dive into the design, let’s define some terms. 1/11  https://t.co/WEj5svcGf7
1493665356237328384 2022-02-15 19:15:46 +0000 <alexxubyte> @MohitGupta90_ The kindle version is available in Amazon India.
1493665181171208192 2022-02-15 19:15:04 +0000 <alexxubyte> @jonatadev This is what I use:  https://t.co/NKke4Jwycp
1493633643033493505 2022-02-15 17:09:45 +0000 <alexxubyte> DNS lookups on average take between 20-120 milliseconds to complete (according to YSlow). 8/8
1493633641213140992 2022-02-15 17:09:45 +0000 <alexxubyte> 7. The IP address for  https://t.co/ftXj1CXlJe is then returned to the resolver from the nameserver.  8. The DNS resolver responds to the web browser with the IP address (142.251.46.238) of the domain requested initially. 7/8  https://t.co/xE8gzb2Iwk
1493633636544876545 2022-02-15 17:09:43 +0000 <alexxubyte> 4. The resolver then makes a request to the .com TLD.  5. The TLD server responds with the IP address of the domain’s name server,  https://t.co/ftXj1CXlJe (authoritative name server).  6. The DNS resolver sends a query to the domain’s nameserver. 6/8  https://t.co/UczMGWZF3Z
1493633632195411969 2022-02-15 17:09:42 +0000 <alexxubyte> 1.  https://t.co/ftXj1CXlJe is typed into the browser, and the browser sends the domain name to the DNS resolver.  2. The resolver queries a DNS root name server.  3. The root server responds to the resolver with the address of a TLD DNS server. In this case, it is .com. 5/8  https://t.co/NSuKp6RS09
1493633627468353537 2022-02-15 17:09:41 +0000 <alexxubyte> 3. Authoritative name server. It provides actual answers to the DNS query. You can register authoritative name servers with domain name registrar such as GoDaddy, Namecheap, etc.   The diagram below illustrates how DNS lookup works under the hood: 4/8  https://t.co/ocVEH07t2i
1493633622695239680 2022-02-15 17:09:40 +0000 <alexxubyte> 2. TLD name server. It stores the IP addresses of authoritative name servers. There are several types of TLD names. For example, generic TLD (.com, .org), country code TLD (.us), test TLD (.test). 3/8  https://t.co/kiJBFXIKfM
1493633618236698625 2022-02-15 17:09:39 +0000 <alexxubyte> There are 3 basic levels of DNS servers:  1. Root name server (.). It stores the IP addresses of Top Level Domain (TLD) name servers. There are 13 logical root name servers globally. 2/8  https://t.co/pdeRoQnaUF
1493633613740470275 2022-02-15 17:09:38 +0000 <alexxubyte> How does the Domain Name System (DNS) lookup work? . DNS acts as an address book. It translates human-readable domain names ( https://t.co/ftXj1CXlJe) to machine-readable IP addresses (142.251.46.238).  The DNS servers are organized in a hierarchical tree structure. 1/8  https://t.co/yqBV8YJZk3
1491821631295004686 2022-02-10 17:09:28 +0000 <alexxubyte> 𝘏𝘛𝘛𝘗/1.1 200 𝘖𝘒 𝘋𝘢𝘵𝘦: 𝘚𝘶𝘯, 30 𝘑𝘢𝘯 2022 00:01:01 𝘎𝘔𝘛 𝘊𝘰𝘯𝘵𝘦𝘯𝘵-𝘛𝘺𝘱𝘦: 𝘵𝘦𝘹𝘵/𝘩𝘵𝘮𝘭; 𝘤𝘩𝘢𝘳𝘴𝘦𝘵=𝘶𝘵𝘧-8  &lt;!𝘋𝘖𝘊𝘛𝘠𝘗𝘌 𝘩𝘵𝘮𝘭&gt; &lt;𝘩𝘵𝘮𝘭 𝘭𝘢𝘯𝘨="𝘦𝘯"&gt; 𝘏𝘦𝘭𝘭𝘰 𝘸𝘰𝘳𝘭𝘥 &lt;/𝘩𝘵𝘮𝘭&gt;  6. The browser renders the HTML content. 7/7  https://t.co/VZLg3PboEc
1491821626647715855 2022-02-10 17:09:27 +0000 <alexxubyte> 5. The server processes the request and sends back the response. For a successful response (the status code is 200). The HTML response might look like this: 6/7  https://t.co/ZyIOByIp4l
1491821622155567106 2022-02-10 17:09:26 +0000 <alexxubyte> 3. Now that we have the IP address of the server, the browser establishes a TCP connection with the server.  4. The browser sends an HTTP request to the server. The request looks like this:  𝘎𝘌𝘛 /𝘱𝘩𝘰𝘯𝘦 𝘏𝘛𝘛𝘗/1.1 𝘏𝘰𝘴𝘵: 𝘦𝘹𝘢𝘮𝘱𝘭𝘦.𝘤𝘰𝘮 5/7  https://t.co/N156J7E9Zd
1491821618246537217 2022-02-10 17:09:25 +0000 <alexxubyte> 2.1 If the IP address cannot be found at any of the caches, the browser goes to DNS servers to do a recursive DNS lookup until the IP address is found (this will be covered in another post). 4/7  https://t.co/Ru0T1bE0VH
1491821614199042048 2022-02-10 17:09:24 +0000 <alexxubyte> 🔹 resource - 𝒑𝒉𝒐𝒏𝒆. It is the name of the resource Bob wants to visit.  2. The browser looks up the IP address for the domain with a DNS lookup. To make the lookup process fast, data is cached at different layers: browser cache, OS cache, network cache, and ISP cache. 3/7  https://t.co/oGbcnd3TXm
1491821610646466561 2022-02-10 17:09:23 +0000 <alexxubyte> 🔹 scheme - 𝒉𝒕𝒕𝒑𝒔://. This tells the browser to send a connection to the server using HTTPS. 🔹 domain - 𝒆𝒙𝒂𝒎𝒑𝒍𝒆.𝒄𝒐𝒎. This is the domain name of the site. 🔹 path - 𝒑𝒓𝒐𝒅𝒖𝒄𝒕/𝒆𝒍𝒆𝒄𝒕𝒓𝒊𝒄. It is the path on the server to the requested resource: phone. 2/7  https://t.co/XpxAYjSEdB
1491821606422781975 2022-02-10 17:09:22 +0000 <alexxubyte> What happens when you type a URL into your browser?  The diagram below illustrates the steps.  1. Bob enters a URL into the browser and hits Enter. In this example, the URL is composed of 4 parts: 1/7  https://t.co/4tv7B0p6Uf
1490405524952653825 2022-02-06 19:22:22 +0000 <alexxubyte> @josafapfilho Yes it’s still an issue in many countries. Thank you for letting me know. I’ll look into it.
1490404982255861763 2022-02-06 19:20:12 +0000 <alexxubyte> @dsnssc Interesting. I’m not sure. The final price is decided by the Amazon algorithm.
1490404589950046209 2022-02-06 19:18:39 +0000 <alexxubyte> @TrippTan @ttdias25 Thanks. This is what I use:  https://t.co/NKke4Jwycp
1489635087909994513 2022-02-04 16:20:55 +0000 <alexxubyte> DeepMind says its new AI coding engine is as good as an average programmer in competitive programming. Imagine people use this to clear coding rounds...  Source:  https://t.co/MnEb431JOO
1489305346195668998 2022-02-03 18:30:39 +0000 <alexxubyte> - Additional middleware layer means additional network latency. Therefore, this layer requires excellent performance.  A real-world example from Shopify:  https://t.co/G2qoVp3CFC 8/8
1489305345327390721 2022-02-03 18:30:38 +0000 <alexxubyte> Cons: - Increased system complexity. A database middleware is a complex system. Since all database queries go through the middleware, it usually requires a high availability setup to avoid a single point of failure. 7/8
1489305344467558403 2022-02-03 18:30:38 +0000 <alexxubyte> - Better compatibility. The middleware uses the MySQL network protocol. Any MySQL compatible client can connect to the middleware easily. This makes database migration easier. 6/8
1489305343624548354 2022-02-03 18:30:38 +0000 <alexxubyte> The middleware acts as a proxy between the application and databases. It uses the standard MySQL protocol for communication.  Pros: - Simplified application code. The application doesn’t need to be aware of the database topology and manage access to the database directly. 5/8
1489305341569368065 2022-02-03 18:30:38 +0000 <alexxubyte> 3. The database middleware routes writes to the primary database. Data is replicated to two replicas.  4. Alice views the order details. The request is sent through the middleware.  5. Alice views the recent order history. The request is sent through the middleware. 4/8  https://t.co/pQArxkBThS
1489305338155192321 2022-02-03 18:30:37 +0000 <alexxubyte> 1. When Alice places an order on amazon, the request is sent to Order Service.   2. Order Service does not directly interact with the database. Instead, it sends database queries to the database middleware. 3/8  https://t.co/5l5VEWVE8e
1489305335160467459 2022-02-03 18:30:36 +0000 <alexxubyte> We focus on option 2 here. The middleware provides transparent routing between the application and database servers. We can customize the routing logic based on difficult rules such as user, schema, statement, etc.  The diagram below illustrates the setup: 2/8
1489305333457559553 2022-02-03 18:30:36 +0000 <alexxubyte> There are two common ways to implement the read replica pattern:   1. Embed the routing logic in the application code (explained in the last post). 2. Use database middleware. #cloud #programming 1/8  https://t.co/QIgIYGRpHK
1489303766629187586 2022-02-03 18:24:22 +0000 <alexxubyte> @YaroNaan @lalitha_jr @haranprasanna @shrikanth_vsi @tskrishnan @bseshadri That's exactly what happened to my book. Scammers usually target books that are over $25.
1489303140696412160 2022-02-03 18:21:53 +0000 <alexxubyte> @rose_w Amazon doesn't seem to care about authors because the problem is so prevalent. Sadly, there is no good alternative as at least 80% of the people go to Amazon for books.
1488946803747655682 2022-02-02 18:45:55 +0000 <alexxubyte> @xdg The article is great. Thank you for sharing.
1488946298258554881 2022-02-02 18:43:55 +0000 <alexxubyte> @ttdias25 There are a few options. 1) hard code in the application code. 2) introduce a database middleware (MySQL router, vitess, etc.). We can register primary and replica hosts with the middleware.
1488923843380973568 2022-02-02 17:14:41 +0000 <alexxubyte> Real-world example. An excellent article about how they solve this problem:  https://t.co/2xoN5B55Lj  If you have any questions or I missed anything, please leave a comment. 7/7
1488923842516979712 2022-02-02 17:14:41 +0000 <alexxubyte> 3️⃣ A relational DB generally provides a way to check if a replica is caught up with the primary. If data is up to date, query the replica. Otherwise, fail the read request or read from the primary. 6/7
1488923841577451520 2022-02-02 17:14:41 +0000 <alexxubyte> Possible solutions to mitigate this problem:  1️⃣ Latency-sensitive reads are sent to the primary database. 2️⃣ Reads that immediately follow writes are routed to the primary database. 5/7
1488923840746901513 2022-02-02 17:14:41 +0000 <alexxubyte> Under certain circumstances (network delay, server overload, etc.), data in replicas might be seconds or even minutes behind. If Alice immediately checks the order status (query is served by the replica) after the order is placed, she might not see the order at all. 4/7
1488923839060791297 2022-02-02 17:14:40 +0000 <alexxubyte> 3. Alice views the order details. Data is served from a replica (read).  4. Alice views the recent order history. Data is served from a replica (read).  There is one major problem in this setup: 𝐫𝐞𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐥𝐚𝐠. 3/7  https://t.co/qJ9yQOb1EB
1488923835613155332 2022-02-02 17:14:39 +0000 <alexxubyte> The diagram below illustrates the setup:   1. When Alice places an order on amazon, the request is sent to Order Service.   2. Order Service creates a record about the order in the primary DB (write). Data is replicated to two replicas. 2/7  https://t.co/bUuPJkcXyG
1488923832555474959 2022-02-02 17:14:39 +0000 <alexxubyte> In this thread, we talk about a simple yet commonly used database design pattern (setup): 𝐑𝐞𝐚𝐝 𝐫𝐞𝐩𝐥𝐢𝐜𝐚 𝐩𝐚𝐭𝐭𝐞𝐫𝐧.  In this setup, all data-modifying commands are sent to the primary DB, and reads are sent to read replicas. #techtwitter #cloud #programming 1/7
1488561820423970820 2022-02-01 17:16:08 +0000 <alexxubyte> 9. For offline users, emails are stored in the storage layer. When a user comes back online, the webmail client connects to web servers via RESTful API.  10. Web servers pull new emails from the storage layer and return them to the client.  What email client do you use? 7/7  https://t.co/lR2ThCf6rd
1488561814728101891 2022-02-01 17:16:07 +0000 <alexxubyte> 7. If the receiver is currently online, the email is pushed to real-time servers.  8. Real-time servers are WebSocket servers that allow clients to receive new emails in real-time. 6/7  https://t.co/MfiGHhpuNn
1488561809539801088 2022-02-01 17:16:06 +0000 <alexxubyte> 5. Mail processing workers are responsible for a lot of tasks, including filtering out spam mails, stopping viruses, etc. The following steps assume an email passed the validation.  6. The email is stored in the mail storage, cache, and object data store.  5/7  https://t.co/eJM8suiNI0
1488561804171100160 2022-02-01 17:16:04 +0000 <alexxubyte> 4. Emails are put in the incoming email queue. The queue decouples mail processing workers from SMTP servers so they can be scaled independently. Moreover, the queue serves as a buffer in case the email volume surges. 4/7  https://t.co/X3PlpkD0LA
1488561798856916993 2022-02-01 17:16:03 +0000 <alexxubyte> 3. If the attachment of an email is too large to put into the queue, we can put it into the attachment store (s3).  3/7  https://t.co/U9NrEMilag
1488561793899188225 2022-02-01 17:16:02 +0000 <alexxubyte> 2. The load balancer distributes traffic among SMTP servers. Email acceptance policy can be configured and applied at the SMTP-connection level. For example, invalid emails are bounced to avoid unnecessary email processing. 2/7  https://t.co/xKMMzDCrx4
1488561788186619905 2022-02-01 17:16:01 +0000 <alexxubyte> One picture is worth more than a thousand words. The following diagram demonstrates the email receiving flow. . 1. Incoming emails arrive at the SMTP load balancer. #softwaredevelopment #cloud 1/7  https://t.co/JVRTZz6XG3
1488560978442682368 2022-02-01 17:12:48 +0000 <alexxubyte> @gitaroktato No worries. I’m more than happy that you replied my tweets :)
1488342681482772486 2022-02-01 02:45:21 +0000 <alexxubyte> @LBacaj Congratulations! Super impressive numbers.
1488337881064095744 2022-02-01 02:26:17 +0000 <alexxubyte> @dvassallo Hi Daniel, I’ve been following you for a while and really liked your projects. Just bought the course. Looking forward to it!
1488265536525897735 2022-01-31 21:38:49 +0000 <alexxubyte> @2beaucoup Looks like you figured it out 👍
1488195965576048641 2022-01-31 17:02:22 +0000 <alexxubyte> The email receiving flow will be explained in my next post. If you have any questions, please leave a comment.  9/9
1488195963533479936 2022-01-31 17:02:21 +0000 <alexxubyte> - The recipient’s mail server is unavailable. In this case, we need to retry sending the email at a later time. Exponential backoff might be a good retry strategy.  - Not enough consumers to send emails. In this case, we may need more consumers to reduce the processing time.8/9  https://t.co/OMPWNSyQgO
1488195958512914436 2022-01-31 17:02:20 +0000 <alexxubyte> We monitor the size of the outgoing queue very closely. If there are many emails stuck in the queue, we need to analyze the cause of the issue. Here are some possibilities: 7/9  https://t.co/nBkeLudnHa
1488195953576546305 2022-01-31 17:02:19 +0000 <alexxubyte> Each message in the outgoing queue contains all the metadata required to create an email. A distributed message queue is a critical component that allows asynchronous mail processing.  6/9  https://t.co/rKG6lyzOHS
1488195946928226304 2022-01-31 17:02:17 +0000 <alexxubyte> 5. SMTP outgoing workers pull events from the outgoing queue and make sure emails are spam and virus free.  6. The outgoing email is stored in the “Sent Folder” of the storage layer.  7. SMTP outgoing workers send the email to the recipient mail server.  5/9  https://t.co/JJ2eyn5SNv
1488195941337219074 2022-01-31 17:02:16 +0000 <alexxubyte> 4. Message queues.       4.a. If basic email validation succeeds, the email data is passed to the outgoing queue.        4.b. If basic email validation fails, the email is put in the error queue. 4/9  https://t.co/3eKTXhZhwt
1488195936211767301 2022-01-31 17:02:15 +0000 <alexxubyte> - Checking if the domain of the recipient’s email address is the same as the sender. If it is the same, email data is inserted to storage, cache, and object store directly. The recipient can fetch the email directly via the RESTful API. There is no need to go to step 4. 3/9  https://t.co/KqUUlqvyWa
1488195707206975489 2022-01-31 17:01:20 +0000 <alexxubyte> 3. Web servers are responsible for:       - Basic email validation. Each incoming email is checked against pre-defined rules such as email size limit. 2/9  https://t.co/FiLtSkazns
1488195702308040704 2022-01-31 17:01:19 +0000 <alexxubyte> In this thread, we will take a look at the email sending flow.   1. A user writes an email on webmail and presses the “send” button. The request is sent to the load balancer.  2. The load balancer makes sure it doesn’t exceed the rate limit and routes traffic to web servers. 1/9  https://t.co/tB4vKlNl9j
1486960187986436098 2022-01-28 07:11:49 +0000 <alexxubyte> @coffeencoke Thank you!
1486960101697097730 2022-01-28 07:11:29 +0000 <alexxubyte> @willmorgan Thank you!
1486838191470436354 2022-01-27 23:07:03 +0000 <alexxubyte> @dangoor I actually don't know. A few customers who bought pirated books reported the seller. That can be one factor. A few Amazon employees helped escalate the issue. This could be the main reason.
1486777411404320769 2022-01-27 19:05:32 +0000 <alexxubyte> @xdg “Twitter rant got the attention of someone with the power to fix things?”&gt;&gt; I think that’s probably the case. The issue was escalated internally. But I don’t think the fundamental issue is fixed because I saw those scammers still sell other pirated books.
1486762650755239936 2022-01-27 18:06:53 +0000 <alexxubyte> I just want to take a moment to thank everyone who supported me and raise awareness for this widespread issue. Without your support, the issue was unlikely to get resolved so soon. Thank you.   Original thread here:  https://t.co/vQ3jLB5icb
1486762649647910913 2022-01-27 18:06:53 +0000 <alexxubyte> Update on the book pirating issue: Amazon removed both sellers from selling a pirated version of my book. It works short-term like a bandage but I hope Amazon can systematically fix the issue.
1486573023880617986 2022-01-27 05:33:22 +0000 <alexxubyte> @SallyWGrotta @AuthorsGuild Thank you! I’ll look into it.
1486559903703453698 2022-01-27 04:41:14 +0000 <alexxubyte> @curtiseinsmann Thank you!
1486531163523284993 2022-01-27 02:47:02 +0000 <alexxubyte> I greatly appreciate the overwhelming support after posting this. Some update: Amazon has removed one seller. The other seller sold out their copies for today but is not removed. Hope this can get resolved soon. Thank you all for helping raise awareness of this widespread issue!
1486456340385992706 2022-01-26 21:49:43 +0000 <alexxubyte> @SarahNEmerson Thank you, Sarah.
1486425197510987777 2022-01-26 19:45:58 +0000 <alexxubyte> And if a customer(not me) reports the seller, Amazon just removes it. This is really sad.  https://t.co/fcZapHBSK1
1486413199586955272 2022-01-26 18:58:17 +0000 <alexxubyte> @jabastiani Yes, that’s a pirated copy. Please leave the seller (not the product) a bad review.
1486403468776534016 2022-01-26 18:19:37 +0000 <alexxubyte> @AmazonHelp I didn't receive any emails from Amazon. Could you send it again or give me a call? Thanks.
1486362177627848708 2022-01-26 15:35:33 +0000 <alexxubyte> Do you have suggestions? Please also help share this as widely as possible. In the meantime, I suggest being VERY careful when buying any paperback tech books on Amazon. Double-check who the seller is. Only buy books sold and fulfilled by Amazon.
1486362176717611010 2022-01-26 15:35:32 +0000 <alexxubyte> Being a full-time indie tech author is already hard and Amazon ignoring copyright claims makes our lives even harder. I have a hard time understanding why Amazon turns a blind eye towards this blatant scam so common for so many tech books and tech authors.
1486362175773949957 2022-01-26 15:35:32 +0000 <alexxubyte> I’ve called Amazon KDP, Author central, Amazon product team but nothing has changed. The scammers are making a profit, while as the author and copyright holder on the books, I can’t do anything. Meanwhile, customers receive knockoffs and often incorrect books.
1486362173458706436 2022-01-26 15:35:32 +0000 <alexxubyte> After doing more research, I’ve found this is a very widespread issue for tech books selling above $20. So many fellow authors have complained about it in the past, but Amazon turns a blind eye. Here are some examples, and the story of @ttorres as well.  https://t.co/ON1grujr1d  https://t.co/ofjDgKba6q
1486362170367504387 2022-01-26 15:35:31 +0000 <alexxubyte> In what is ironic, I pay for Amazon ads on search pages that result in these scammers fulfilling orders.  https://t.co/BImuh0FD0R
1486362167267917826 2022-01-26 15:35:30 +0000 <alexxubyte> How bad is the issue? I estimate between 60%-80% of the copies sold in the past 11 days are pirated books fulfilled by Amazon. You can see the “Buy Now” button hijacking in action here:   https://t.co/8xK1UZslUa
1486362165246234628 2022-01-26 15:35:30 +0000 <alexxubyte> How do I know Amazon fulfills pirated copies? I clicked on the “Buy Now” button and bought them. One had similar content but with a different layout and was printed on inferior quality paper. My book has 309 pages: the pirated one only 276 pages and a completely different ISBN.  https://t.co/TZm5peZJFB
1486362161345482753 2022-01-26 15:35:29 +0000 <alexxubyte> I'm the author of the best-selling book System Design Interview-An Insider’s Guide. 11 days ago, two fraudsters hijacked the "Buy Now" button on Amazon, fulfilling all orders with a different book. I'm helpless to do anything. A sad story on self-publishing: a thread.
1486036520142213122 2022-01-25 18:01:30 +0000 <alexxubyte> Please keep in mind this is a highly simplified design. Hope it sparks your interest and curiosity:) I'll explain each component in more depth in the future. 5/5  https://t.co/mylX1uHcuO
1486036516283437057 2022-01-25 18:01:29 +0000 <alexxubyte> 3. The Gmail server stores the email and makes it available to Bob, the recipient.   4. Gmail client fetches new emails through the IMAP/POP server when Bob logs in to Gmail. 4/5  https://t.co/OPeOsCnJpH
1486036512420417538 2022-01-25 18:01:28 +0000 <alexxubyte> 2. Outlook mail server queries the DNS (not shown in the diagram) to find the address of the recipient’s SMTP server. In this case, it is Gmail’s SMTP server. Next, it transfers the email to the Gmail mail server. The communication protocol between the mail servers is SMTP.3/5  https://t.co/B3b9I08WIQ
1486036508125503492 2022-01-25 18:01:27 +0000 <alexxubyte> 1. Alice logs in to her Outlook client, composes an email, and presses “send”. The email is sent to the Outlook mail server. The communication protocol between the Outlook client and mail server is SMTP.2/5  https://t.co/jkIIctvJrw
1486036503360720897 2022-01-25 18:01:26 +0000 <alexxubyte> One picture is worth more than a thousand words. In this thread, we will take a look at what happens when Alice sends an email to Bob.1/5  https://t.co/65uTpEl9d5
1484581433297420291 2022-01-21 17:39:30 +0000 <alexxubyte> @senleft I like stipe and square (now block)’s engineering blogs. I’m not aware of a really good book for payment system.
1484578176043196419 2022-01-21 17:26:33 +0000 <alexxubyte> 3️⃣ Optionally, the metrics collector registers a change event notification with Service Discovery to receive an update whenever the service endpoints change. Alternatively, the metrics collector can poll for endpoint changes periodically. 8/8  https://t.co/DB6LpIgerM
1484578170321846272 2022-01-21 17:26:32 +0000 <alexxubyte> 2️⃣ The metrics collector pulls metrics data via a pre-defined HTTP endpoint (for example, /metrics). To expose the endpoint, a client library usually needs to be added to the service. In Figure 3, the service is Web Servers. 7/8  https://t.co/GZZxXvmFCs
1484578164651085826 2022-01-21 17:26:31 +0000 <alexxubyte> Figure 3 explains the pull model in detail.  1️⃣ The metrics collector fetches configuration metadata of service endpoints from Service Discovery. Metadata include pulling interval, IP addresses, timeout and retries parameters, etc. 6/8  https://t.co/mYbImXEeg9
1484578159211081729 2022-01-21 17:26:29 +0000 <alexxubyte> The good news is that we have a scalable solution available through Service Discovery, provided by Kubernetes, Zookeeper, etc., wherein services register their availability and the metrics collector can be notified whenever the list of service endpoints changes (Figure 2) 5/8  https://t.co/u9b8vDU7xt
1484578153578131457 2022-01-21 17:26:28 +0000 <alexxubyte> While the idea is simple, this approach is hard to maintain in a large-scale environment where servers are added or removed frequently, and we want to ensure that metric collectors don’t miss out on collecting metrics from any new servers. 4/8  https://t.co/juVmQOapvO
1484578148159135745 2022-01-21 17:26:27 +0000 <alexxubyte> In this approach, the metrics collector needs to know the complete list of service endpoints to pull data from. One naive approach is to use a file to hold DNS/IP information for every service endpoint on the “metric collector” servers. 3/8  https://t.co/VGRM2FCmP6
1484578142828122116 2022-01-21 17:26:26 +0000 <alexxubyte> Figure 1 shows data collection with a pull model over HTTP. We have dedicated metric collectors which pull metrics values from the running applications periodically. 2/8  https://t.co/ehgggXoOJd
1484578136842850312 2022-01-21 17:26:24 +0000 <alexxubyte> Metrics collection is a popular system design interview question. There are two ways metrics data can be collected, pull or push. It is a routine debate. In this post, we will take a look at the pull model.  1/8  https://t.co/IR8zGvgT60
1484399185629937665 2022-01-21 05:35:19 +0000 <alexxubyte> @zqureshi_ @kentcdodds @curtiseinsmann @Franc0Fernand0 @SimonHoiberg @macerub @eddiejaoude @ASpittel @GergelyOrosz @FarzaTV @nachoiacovino @KennethCassel @allthecode_ Thank you very much for the shout-out!
1484264635989512195 2022-01-20 20:40:40 +0000 <alexxubyte> @RandallKanna Congratulations! Love the curriculum, very comprehensive.
1483853543186460672 2022-01-19 17:27:08 +0000 <alexxubyte> It makes things even more interesting when Bob wants to buy a book in the Indian market, where Bob pays USD but the seller can only receive INR. 6/6  https://t.co/cCnVDXiM1z
1483853535477334016 2022-01-19 17:27:06 +0000 <alexxubyte> Because of the asynchronous nature of the info flow and the fund flow, reconciliation is very important for data consistency in the systems along with the flow.  5/6  https://t.co/hIF4KKqPQV
1483853528388947974 2022-01-19 17:27:04 +0000 <alexxubyte> You can see the information flow and fund flow are separated. In the info flow, the money seems to be deducted from one bank account and added to another bank account, but the actual money movement happens in the settlement bank at the end of the day. 4/6  https://t.co/Au8jPuQCSu
1483853521686462464 2022-01-19 17:27:02 +0000 <alexxubyte> The first two layers are called information flow, and the settlement layer is called fund flow. 3/6  https://t.co/wC02pdBHqi
1483853507140620297 2022-01-19 17:26:59 +0000 <alexxubyte> In a payment system, it’s very important to separate  𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐟𝐥𝐨𝐰 𝐚𝐧𝐝 𝐟𝐮𝐧𝐝 𝐟𝐥𝐨𝐰.1/6  https://t.co/nyLVq7Tok1
1483851951058001925 2022-01-19 17:20:48 +0000 <alexxubyte> @_moghul Probably March.
1483849126366244865 2022-01-19 17:09:34 +0000 <alexxubyte> @VrashinAggarwal Not at this moment, but I'm working on a new version for the Indian market.
1483848505194004480 2022-01-19 17:07:06 +0000 <alexxubyte> @varunhorril Thanks!
1483492036451831808 2022-01-18 17:30:38 +0000 <alexxubyte> 2.3 Both Bank A and Bank C send transaction statements to the clearing institution. 2.4 &amp; 2.5 The clearing institution sends clearing and settlement information to the settlement bank. Money is transferred from Bank A’s reserve to Bank C’s reserve. 8/8  https://t.co/jRAvVFAf7A
1483492029904527365 2022-01-18 17:30:36 +0000 <alexxubyte> - Pay-out flow (Amazon pays the money to the seller: Claire): 2.1 Amazon informs the seller (Claire) that she will get paid soon 2.2 Amazon issues a money transfer request from its own bank to the seller bank (bank C). Both banks record the transactions, but no money is moved7/8  https://t.co/vWGzjRrmBs
1483492022832939019 2022-01-18 17:30:34 +0000 <alexxubyte> 1.5 &amp; 1.6 The clearing institution sends clearing and settlement information to the settlement bank. Both Bank A and Bank B have pre-deposited funds in the settlement bank as money reserves, so actual money movement happens between two reserve accounts in the settlement bank6/8  https://t.co/emxbCTu6PC
1483492015383875584 2022-01-18 17:30:33 +0000 <alexxubyte> 1.4 Both Bank A and Bank B send transaction statements to the clearing institution. It reduces the transactions that need to be settled. 5/8  https://t.co/SjOTbU4XjH
1483492008861655040 2022-01-18 17:30:31 +0000 <alexxubyte> 1.3 Since the payment token of Bob’s debit card is stored in Paypal, Paypal can transfer money, on Bob’s behalf, to Amazon’s bank account in Bank A.4/8  https://t.co/HyQC681FeE
1483492002079526912 2022-01-18 17:30:29 +0000 <alexxubyte> Let’s say Bob wants to buy an SDI book from Claire’s shop on Amazon.   - Pay-in flow (Bob pays Amazon money): 1.1 Bob buys a book on Amazon using Paypal. 1.2 Amazon issues a money transfer request to Paypal.3/8  https://t.co/ylNlSSAFcY
1483491995091750914 2022-01-18 17:30:28 +0000 <alexxubyte> To understand this, we need to digest two concepts: 𝐜𝐥𝐞𝐚𝐫𝐢𝐧𝐠 &amp; 𝐬𝐞𝐭𝐭𝐥𝐞𝐦𝐞𝐧𝐭. Clearing is a process that calculates who should pay whom with how much money; while settlement is a process where real money moves between reserves in the settlement bank. 2/8  https://t.co/8hw6RdlDEF
1483491987722412032 2022-01-18 17:30:26 +0000 <alexxubyte> One picture is worth more than a thousand words. This is what happens when you buy a product using Paypal/bank card under the hood.1/8  https://t.co/jBwR3qof0l
1481679754008825857 2022-01-13 17:29:16 +0000 <alexxubyte> Alerting system: This sends alert notifications to various alerting destinations.  Visualization system: This shows metrics in the form of various graphs/charts.   Lots of details are omitted here and I'll make follow-up posts in the next few days.7/7  https://t.co/2VKPNQUA7k
1481679749743140864 2022-01-13 17:29:15 +0000 <alexxubyte> Query service: The query service makes it easy to query and retrieve data from the time-series database. This should be a very thin wrapper if we choose a good time-series database. It could also be entirely replaced by the time-series database’s own query interface.6/7  https://t.co/n6eXK0hOyn
1481679745406304258 2022-01-13 17:29:14 +0000 <alexxubyte> Consumers: Consumers or streaming processing services such as Apache Storm, Flink and Spark, process and push data to the time-series database.5/7  https://t.co/iI2mJ7ej3D
1481679741132234752 2022-01-13 17:29:13 +0000 <alexxubyte> Kafka: Kafka is used as a highly reliable and scalable distributed messaging platform. It decouples the data collection and data processing services from each other.4/7  https://t.co/Vb2DX7a7ga
1481679736933785604 2022-01-13 17:29:12 +0000 <alexxubyte> Time-series database: This stores metrics data as time series. It usually provides a custom query interface for analyzing and summarizing a large amount of time-series data. It maintains indexes on labels to facilitate the fast lookup of time-series data by labels.3/7  https://t.co/czk2GjygnN
1481679733129576450 2022-01-13 17:29:11 +0000 <alexxubyte> Metrics source: This can be application servers, SQL databases, message queues, etc.  Metrics collector: It gathers metrics data and writes data into the time-series database.2/7  https://t.co/PAdOgaoIJC
1481679728960368641 2022-01-13 17:29:10 +0000 <alexxubyte> A well-designed 𝐦𝐞𝐭𝐫𝐢𝐜𝐬 𝐦𝐨𝐧𝐢𝐭𝐨𝐫𝐢𝐧𝐠 and alerting system plays a key role in providing clear visibility into the health of the infrastructure to ensure high availability and reliability. The diagram below explains how it works at a high level.1/7  https://t.co/0IWKk5TjGv
1480957064687980546 2022-01-11 17:37:33 +0000 <alexxubyte> Having a reconciliation system is always necessary. It is like having a safety net to keep you sleeping well at night.   If you have any questions or I missed anything, please leave a comment. 9/9  https://t.co/OHyrwgTxWZ
1480957059382202371 2022-01-11 17:37:32 +0000 <alexxubyte> If we find a match in the next day’s Paypal records, the break is cleared, and no more action is needed.  You may argue that if we have exactly-once semantics in the system, there shouldn’t be any discrepancies. But the truth is, there are so many places that can go wrong. 8/9  https://t.co/WMWOUlTh4K
1480957054466473986 2022-01-11 17:37:31 +0000 <alexxubyte> In this case, we couldn’t find this record in today’s Paypal records. It causes a discrepancy. 𝐏𝐨𝐬𝐬𝐢𝐛𝐥𝐞 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧:  we need to categorize this break as a “temporary break” and run it later against the next day’s Paypal records. 7/9  https://t.co/QEuMRiGjU6
1480957049412280324 2022-01-11 17:37:30 +0000 <alexxubyte> 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 3: Cut-off time issue. For example, if we choose 00:00:00 as the daily cut-off time, one record is stamped with 23:59:55 in the internal system, but might be stamped 00:00:30 in the external system (Paypal), which is the next day.6/9  https://t.co/jnV8NbjXuk
1480957044047835141 2022-01-11 17:37:28 +0000 <alexxubyte> 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 2: Massive data volume 𝐏𝐨𝐬𝐬𝐢𝐛𝐥𝐞 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧: we can use big data processing techniques to speed up data comparisons. If we need near real-time reconciliation, a streaming platform (Flink) is used; otherwise, end-of-day batch processing is enough.5/9  https://t.co/fgBx0TB4TM
1480957038259683335 2022-01-11 17:37:27 +0000 <alexxubyte> 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 1: Data normalization. When comparing records in different systems, they come in different formats. Eg, the timestamp can be “2022/01/01” in one system and “Jan 1, 2022” in another. 𝐏𝐨𝐬𝐬𝐢𝐛𝐥𝐞 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧: add a layer to transform different formats.4/9  https://t.co/Bk6K1kLvel
1480957032341536768 2022-01-11 17:37:26 +0000 <alexxubyte> - The Ledger should record a debit of $200 dollars for the buyer, and a credit of $200 for the seller. This is called double-entry bookkeeping (see the table below).  Let’s take a look at some pain points and how we can address them: 3/9  https://t.co/eAuI4dsG7Y
1480957026381426691 2022-01-11 17:37:24 +0000 <alexxubyte> - The eCommerce website should have a record of the $200 purchase order. - There should be a transaction record of $200 in Paypal (marked with 2 in the diagram).2/9  https://t.co/UHb6Au1UwY
1480957020681302019 2022-01-11 17:37:23 +0000 <alexxubyte> 𝐑𝐞𝐜𝐨𝐧𝐜𝐢𝐥𝐢𝐚𝐭𝐢𝐨𝐧 might be the most painful process in a payment system. It is the process of comparing records in different systems to make sure the amounts match each other. For example, if you pay $200 to buy a watch with Paypal: 1/9  https://t.co/XzQbmDnlQ8
1480647233527709696 2022-01-10 21:06:24 +0000 <alexxubyte> 𝐖𝐡𝐢𝐜𝐡 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞 𝐬𝐡𝐚𝐥𝐥 𝐈 𝐮𝐬𝐞? This is one of the most important questions we usually need to address in a system design interview.   Google Cloud recently posted a great article that summarized different database options available.  https://t.co/Qn8xRAoZnJ
1479290996504416256 2022-01-07 03:17:12 +0000 <alexxubyte> @andrzeybaracz Depends on the use case. The uuid can be generated by the client. Sometime, it can also be the order_id or checkout_id from previous steps.
1479290199381209088 2022-01-07 03:14:02 +0000 <alexxubyte> @Vlad_Vernigora Yes the real system is much more complex than what I listed. I’m trying to explain it in a way that people without financial background can understand.
1479289499372851200 2022-01-07 03:11:15 +0000 <alexxubyte> @paddy111padam The reporter provides trading history, tax return, compliance reporting, etc.
1479288766502092802 2022-01-07 03:08:20 +0000 <alexxubyte> @MichaelPalarya Yes the upcoming book will cover a different set of questions. The plan is to release it Feb or March.
1479135397510737926 2022-01-06 16:58:54 +0000 <alexxubyte> @MarcoDenisi But you are right, inconsistencies can still happen in a distributed environment. Many companies rely on reconciliation which resolves inconsistency either automatically or manually.2/2
1479135310709624834 2022-01-06 16:58:33 +0000 <alexxubyte> @MarcoDenisi Let's say a single database is used. We can add a unique key constraint on the uuid column. That will prevent the second request from being recorded. The race condition can be dealt with at the DB level so the application code doesn't have to worry about it. 1/2
1478796984450355200 2022-01-05 18:34:10 +0000 <alexxubyte> Please notice that steps 1 to 14 are on the critical path (the trading flow), while the market data flow and reporting flow are not. They have different latency requirements. If you have any questions or I missed anything, please leave a comment.   6/6
1478796983603138561 2022-01-05 18:34:10 +0000 <alexxubyte> Step R1 - R2 (reporting flow): The reporter composes all the necessary reporting fields (e.g. client_id, price, quantity, order_type, filled_quantity, remaining_quantity) and writes data to the database.5/6
1478796982726508550 2022-01-05 18:34:10 +0000 <alexxubyte> Step 10 - 14: The execution result is passed all the way back to the client.  Step M1 - M3 (market data flow): Market data, including the candlestick chart and order book, are sent to the data service for consolidation. Brokers query the data service to get the market data. 4/6
1478796981875011584 2022-01-05 18:34:09 +0000 <alexxubyte> Step 6: Once risk checks are passed, the order manager checks if there is enough money in the wallet.  Step 7 - 9: The order is sent to the matching engine. The matching engine sends back the execution result if a match is found. 3/6
1478796981002637313 2022-01-05 18:34:09 +0000 <alexxubyte> Step 3: The exchange client gateway performs operations such as validation, rate limiting, authentication, normalization, etc., and sends the order to the order manager.  Step 4-5: The order manager performs risk checks based on rules set by the risk manager.2/6
1478796978238615553 2022-01-05 18:34:08 +0000 <alexxubyte> Here is a simplified design diagram that explains how a stock exchange such as Nasdaq or Newyork exchange works under the hood: #developers #systemdesign  Step 1: A client places an order via the broker’s web or mobile app.  Step 2: The broker sends the order to the exchange.1/6  https://t.co/sfSMGo2wvd
1478441231629705217 2022-01-04 19:00:32 +0000 <alexxubyte> @mohdjawadi I think that's a good way to do it for internal systems. Sometimes, the client (mobile/web) may not have the unique ID in the first place, so it relies on the UUID generated by the client.
1478409572867985411 2022-01-04 16:54:44 +0000 <alexxubyte> A UUID is commonly used as an idempotency key and it is recommended by many tech companies such as Stripe and PayPal. To perform an idempotent payment request, an idempotency key is added to the HTTP header: &lt;idempotency-key: key_value&gt;. 6/6
1478409571798421506 2022-01-04 16:54:44 +0000 <alexxubyte> For communication between clients (web and mobile applications) and servers, an idempotency key is usually a unique value that is generated by clients and expires after a certain period of time. 5/6
1478409570917646336 2022-01-04 16:54:43 +0000 <alexxubyte> 𝐈𝐝𝐞𝐦𝐩𝐨𝐭𝐞𝐧𝐜𝐲 From an API standpoint, idempotency means clients can make the same call repeatedly and produce the same result. 4/6
1478409569890013186 2022-01-04 16:54:43 +0000 <alexxubyte> We now explain how to implement at least once using retry and at most once using idempotency check.  𝐑𝐞𝐭𝐫𝐲 Occasionally, we need to retry a payment transaction due to network errors or timeout. Retry provides the at-least-once guarantee. 3/6
1478409568950444035 2022-01-04 16:54:43 +0000 <alexxubyte> At the first glance, exactly-once delivery seems very hard to tackle, but if we divide the problem into two parts, it is much easier to solve. An operation is executed exactly-once if:  1. It is executed at least once. 2. At the same time, it is executed at most once.2/6
1478409566463291395 2022-01-04 16:54:42 +0000 <alexxubyte> One of the most serious problems a payment system can have is to 𝐝𝐨𝐮𝐛𝐥𝐞 𝐜𝐡𝐚𝐫𝐠𝐞 𝐚 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫. When we design the payment system, it is important to guarantee that the payment system executes a payment order exactly-once.1/6  https://t.co/JOuhsFQaet
1478181206449537025 2022-01-04 01:47:17 +0000 <alexxubyte> @Mastacheata However if the settlement cannot directly use T2, such as credit card scheme (visa, master), you have to wait for the daily batch settlement. 1/2
1478181092532183040 2022-01-04 01:46:50 +0000 <alexxubyte> @Mastacheata Pay is different from settlement. Pay is what your bank shows to you. Underlyingly your bank has to settle the money with the destination bank. If the settlement could use T2, which is a RTGS system (real-time gross settlement),the settlement process could be done in real-time1/2
1478174081035878401 2022-01-04 01:18:58 +0000 <alexxubyte> @0x1AA37 It's probably because apple counts the pages differently. The ebook on Apple Books is not updated for a while though. Amazon has the latest version.
1478173489894805507 2022-01-04 01:16:37 +0000 <alexxubyte> @bartekci I think there are 3 options: 1. The mismatch is classifiable and the adjustment can be automated.  2. The mismatch is classifiable but we are unable to automate the adjustment.  3. The mismatch is unclassifiable. The   mismatch is put into a special job queue and handled manually
1478172558511906819 2022-01-04 01:12:55 +0000 <alexxubyte> @danylaws Glad to hear it's helpful.
1478170526312898563 2022-01-04 01:04:51 +0000 <alexxubyte> @federoasio Do you mean inconsistency between 7 and 9 (ledger and wallet)? Distributed transactions such as SAGA are commonly used to ensure eventual consistency among different services.
1478059806996893697 2022-01-03 17:44:53 +0000 <alexxubyte> 10. Every night the PSP or banks send settlement files to their clients. The settlement file contains the balance of the bank account, together with all the transactions that took place on this bank account during the day. 6/6
1478059805864464384 2022-01-03 17:44:53 +0000 <alexxubyte> 8. After the wallet service has successfully updated the seller’s balance information, the payment service will call the ledger to update it.  9. The ledger service appends the new ledger information to the database. 5/6
1478059804849369091 2022-01-03 17:44:53 +0000 <alexxubyte> 6. After the payment executor has successfully executed the payment, the payment service will update the wallet to record how much money a given seller has.  7. The wallet server stores the updated balance information in the database. 4/6
1478059803792461825 2022-01-03 17:44:52 +0000 <alexxubyte> 4. The payment executor stores the payment order in the database.  5. The payment executor calls an external PSP to finish the credit card payment. 3/6
1478059802412478471 2022-01-03 17:44:52 +0000 <alexxubyte> 3. Sometimes a single payment event may contain several payment orders. For example, you may select products from multiple sellers in a single checkout process. The payment service will call the payment executor for each payment order. 2/6
1478059800453779456 2022-01-03 17:44:52 +0000 <alexxubyte> Here is what happens when you click the Buy button on Amazon or any of your favorite shopping websites.   1. When a user clicks the “Buy” button, a payment event is generated and sent to the payment service.  2. The payment service stores the payment event in the database. 1/6  https://t.co/AnIoGS21zZ
1476276041383481344 2021-12-29 19:36:50 +0000 <alexxubyte> @laithshadeed Not at this point. The book will be released early 2022.
1475902758439960578 2021-12-28 18:53:33 +0000 <alexxubyte> I’ve been exploring diff ways to make better summaries for each chapter of my SDI - part 2 book and settled with this one.   The idea is to give readers a quick summary of what’s discussed and create a “graph” of a system in memory that they can easily refer to. Feedback welcome  https://t.co/94GuVAUumU
1473724633480413188 2021-12-22 18:38:27 +0000 <alexxubyte> Editing furiously to finish this round of revisions for “system design interview book - part 2” before the year's end.  https://t.co/E99yqGQXcU
1465855255652958211 2021-12-01 01:28:21 +0000 <alexxubyte> @RaVitillo Yeah this happens quite often ☹️. Is the modified book still available on Amazon? I couldn’t find it. Hope Amazon already took it down.
1465403259388981248 2021-11-29 19:32:17 +0000 <alexxubyte> @ProtyayB Hi @ProtyayB, I usually read engineering blogs, talk with engineers and think a lot. Those probably take more time than writing itself.
1463577618611990531 2021-11-24 18:37:50 +0000 <alexxubyte> 6. User experience is important. We definitely don’t want to inform users that they have successfully placed orders but later tell them no items are actually available  Happy shopping! If I missed anything,  please leave a comment.
1463577617160761344 2021-11-24 18:37:50 +0000 <alexxubyte> 3. Async processing- use message queues to handle high TPS  4. Isolation - isolate static and dynamic contents, isolate processes and databases for rare items  5. Overselling is bad. When to decrease the inventory is important
1463577615969648646 2021-11-24 18:37:50 +0000 <alexxubyte> 𝐃𝐞𝐬𝐢𝐠𝐧 𝐩𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬: 1. Less is more - less element on the web page, fewer data queries to the database, fewer web requests, fewer system dependencies  2. Short critical path - fewer hops among services or merge into one service
1463577613595598854 2021-11-24 18:37:49 +0000 <alexxubyte> Black Friday is coming.  Designing a system with extremely high concurrency, high availability and quick responsiveness needs to consider many aspects 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐰𝐚𝐲 𝐟𝐫𝐨𝐦 𝐟𝐫𝐨𝐧𝐭𝐞𝐧𝐝 𝐭𝐨 𝐛𝐚𝐜𝐤𝐞𝐧𝐝.  See the below picture for details:  https://t.co/uWWNXfoguV
1461523886646841347 2021-11-19 02:37:03 +0000 <alexxubyte> @marcosc Thank you for the shout out. Great article!
1461389261681291265 2021-11-18 17:42:05 +0000 <alexxubyte> "If that is the case, it will be necessary to spread the read load among multiple database servers." 7.
1461389260536172544 2021-11-18 17:42:05 +0000 <alexxubyte> "The whole geospatial index can easily fit in the working set of a modern database server. However, depending on the read volume, a single database server might not have enough CPU or network bandwidth to service all read requests." 6.
1461389259290517505 2021-11-18 17:42:05 +0000 <alexxubyte> "One common mistake about scaling the geospatial index is to quickly jump to a sharding scheme without considering the actual data size of the table. In our case, the full dataset for the geospatial index table is not large (quadtree index only takes 1.71G memory)." 5.
1461389258174783491 2021-11-18 17:42:05 +0000 <alexxubyte> One interview question is to design proximity service and how to scale geospatial index is a key part of it. Here are a few paragraphs we wrote to show why jumping to a sharding design without estimations is a bad idea: 4.
1461389256748720130 2021-11-18 17:42:04 +0000 <alexxubyte> - Do we really need a distributed solution?  - Is a cache layer necessary?  - Shall we choose data replication or sharding?  Here is an example of how the estimations shape the design decision. 3.
1461389255561809925 2021-11-18 17:42:04 +0000 <alexxubyte> Estimations are important because we need them to understand the scale of the system and justify the design. It helps answer questions like: 2.
1461389254081200129 2021-11-18 17:42:04 +0000 <alexxubyte> Recently, a few engineers asked me whether we really need back-of-the-envelope estimation in a system design interview. I think it would be helpful to clarify.1.
1460824339784224772 2021-11-17 04:17:18 +0000 <alexxubyte> @ranjanahuc Congratulations! Hard work paid off 😄
1459562459728007169 2021-11-13 16:43:02 +0000 <alexxubyte> @banyuken Thank you!
1457364269822103572 2021-11-07 15:08:13 +0000 <alexxubyte> @hackbuddyorg Thank you!
1456797691313147908 2021-11-06 01:36:50 +0000 <alexxubyte> @sasiki222 Thank you! Glad to hear my book was helpful.
1456300999316934656 2021-11-04 16:43:09 +0000 <alexxubyte> 4. Adding all those together, I spend at least 1khours per 5k words. I want to make the book easy to understand but at the same time have technical depth. It’s hard to balance sometimes, but I always try. Now we are at 84k words. It’s finally getting close to the finish line.
1456300998176083969 2021-11-04 16:43:09 +0000 <alexxubyte> 3.-- lots of thinking/researching -- lots of talking to domain experts in specific fields -- lots lots of editing -- asking for feedback, discussing, rewriting. Repeat many many times -- dog peed on the carpet and cleaned up the mess  -- toddler got sick and I lost a lot of sleep
1456300996800356352 2021-11-04 16:43:09 +0000 <alexxubyte> 2. I thought if I write 5 pages per day, I could finish a 300-page book in 60 days.   5 x 60 days later, it was far from being done.   Estimation is hard. Here were the things I forgot to include in the initial estimation:
1456300995584028674 2021-11-04 16:43:08 +0000 <alexxubyte> 1. “This shouldn’t take too long”. That’s a promise we as software engineers like to give.  That is exactly what I told myself when I started writing the system design interview book (part 2, coming soon in December).
1453959255703253004 2021-10-29 05:37:54 +0000 <alexxubyte> “FAANG” is an acronym that refers to the five best performing tech stocks: Facebook, Amazon, Apple, Netflix, and Alphabet. With Facebook rebranding to Meta and the strong performance of Microsoft past five years, it’s time to say bye-bye to “FAANG”. Hello, MMAAAN?  https://t.co/MElA893XVt
1453926886845792256 2021-10-29 03:29:17 +0000 <alexxubyte> @RandallKanna This is so true. One of the best ways to get better at interviews is just to keep interviewing. Can always learn something for each failed one.
1453808069394124800 2021-10-28 19:37:08 +0000 <alexxubyte> @khirodchandrap3 @curtiseinsmann  https://t.co/Nr5PaVxNDQ
1453799318133956608 2021-10-28 19:02:22 +0000 <alexxubyte> @curtiseinsmann Thank you for the shout out! I feel very honored.
1452678393435066376 2021-10-25 16:48:13 +0000 <alexxubyte> @BarnwalAashish Probably this December.
1452678081718611969 2021-10-25 16:46:58 +0000 <alexxubyte> @meghanatweets Thank you for the endorsement!
1451614460460765187 2021-10-22 18:20:31 +0000 <alexxubyte> I’ll be sharing my learning, thinking, or interview tips every week. If you think my posts will be useful, please like or share so they can reach a wider audience. Thanks for reading my story.
1451614427183140866 2021-10-22 18:20:23 +0000 <alexxubyte> One year after the release of my first book (link in the comment), it has 800+ reviews on Amazon and consistently ranked in the top 10 of Computer &amp; Technology books. All traffic is organic.  I’ve met a lot of like-minded individuals and love what I do.
1451614365036134404 2021-10-22 18:20:08 +0000 <alexxubyte> I quit my job at Twitter 3 years ago and put a huge burden of the mortgage on my wife. Bay area houses are expensive...  Now I make a living by writing a series of system design interview books.
1451598045280305155 2021-10-22 17:15:18 +0000 <alexxubyte> @curtiseinsmann This will be very useful as code review is part of our daily life. Looking forward to it!
1448109672414605313 2021-10-13 02:13:45 +0000 <alexxubyte> @Ritwij10 I might build some sample projects but it will take quite some time.
1448109309255159814 2021-10-13 02:12:18 +0000 <alexxubyte> @Ritwij10 On kindle? That’s a good suggestion.
1446488622178324489 2021-10-08 14:52:16 +0000 <alexxubyte> @GergelyOrosz Upvoted!  First time using product hunt. Good luck with your launch.
1445538531045101571 2021-10-05 23:56:57 +0000 <alexxubyte> @marcosluis2186 Thank you for the shout out!
1441096181497536521 2021-09-23 17:44:38 +0000 <alexxubyte> @GergelyOrosz @RandallKanna Thank you Gergely!
1432414392952365059 2021-08-30 18:46:18 +0000 <alexxubyte> @bjlee72 @insightbook Thank you so much for translating my book! I’m beyond impressed by the final work and couldn’t have asked for anything better. Awesome job 👏👏. Look forward to reading your book one day!
1425489947851513859 2021-08-11 16:11:02 +0000 <alexxubyte> @ranjanahuc @insightbook Thank you so much! Hope it’s helpful.
1425480567831764996 2021-08-11 15:33:46 +0000 <alexxubyte> Just received 3 copies of the Korean translation of my book “System Design Interview - An Insider’s Guide”. I still cannot believe I was able to write a popular book. I’ll share more about the writing journey in the future. For now, I just want to say thank u. @insightbook  https://t.co/M2hhzYrSRB
1422357160860684292 2021-08-03 00:42:27 +0000 <alexxubyte> @GergelyOrosz Someone was even able to link an audiobook to my kindle book (exactly the same content). Took me many hours to convince Amazon to remove the audiobook :(  https://t.co/Jn6h1gQ1YY
1420510140357251074 2021-07-28 22:23:03 +0000 <alexxubyte> @curtiseinsmann Thank you! I’m glad to hear you like the book.
1381729993428934657 2021-04-12 22:04:36 +0000 <alexxubyte> @GergelyOrosz Congrats!
1378827453964054528 2021-04-04 21:50:57 +0000 <alexxubyte> @ykdojo @replit Congratulations! Wish you all the best.
1358805564269031427 2021-02-08 15:51:06 +0000 <alexxubyte> @ykdojo Thanks. Sent you a DM.
1357368665096638464 2021-02-04 16:41:23 +0000 <alexxubyte> @ykdojo Big fan of your youtube channel. Seriously awesome work! I'm the author of a popular system design interview book:  https://t.co/sSB8oN0fNj Have been on both sides of the interview table many times. Happy to chat more.
[!] No more data! Scraping will stop now.
found 0 deleted tweets in this search.
['twitter'] poster drawer done in `OUT_FOLDER`
